
// Misc compiler testing which gets compiled first and makes it easy to set break points.
// TBD: Move working test cases into AATestPass


mod AATest

use Zurfur
use Zurfur[Log, Iterator, Iterable, Equatable, Number]
use Zurfur.Unsafe[Xuint, RawPointer, castPointer,]
use Zurfur.Math[cos]
use Zurfur.Draw2d[Size, Point]
use Zurfur.ConvertBytes[readBytesInt64, writeBytesInt64, writeBytesHex]
 
//pragma ShowParse

type ReadStuff()
fun ReadStuff.read(my, buffer Span<Byte>) !Int todo

fun AAA_test_paramable(p AParamable)
    let a *Int
    let x = p.takePointer(nil)
    let b = nil == a
    let c = a == nil

fun test_convertBytes()
    let y = ReadStuff()
    let i = y.readBytesInt64!
    let list = List<Byte>()
    list.writeBytesInt64(0)
    list.writeBytesHex(Span<Byte>(4), true)

    

fun test_reduce()


    // TBD: Need return type inference here
    // TBD: takeListInt(returnList())
    takeListInt(returnList<Int>())
    takeIteratorInt2("", List<Int>().asIterator)
    takeIteratorInt(List<Int>().asIterator)
    takeIteratorInt(List<Int>())
    @myReduceInt2 = List<Int>().asIterator.reduceInt(|item1, item2| => item1 + item2)
    @myReduceInt1 = List<Int>().reduceInt(|item1, item2| => item1 + item2)
    takeIterator4(List<Int>().asIterator, |i1,i2| => 2)
    takeIterator4(List<Int>().asSpan, |i1,i2| => 2)
    @p1 Iterator<Int> = List<Int>().asIterator
    @p2 Iterator<Int> = List<Int>()
    takeIterator1(p1)
    takeIterator1(List<Int>().asIterator)
    takeIterator1(List<Int>())
    p1.takeIterator2
    List<Int>().asIterator.takeIterator2
    List<Int>().takeIterator2
    takeIteratorInt(p1)
    takeIteratorInt(List<Int>().asIterator)

    takeIterator1(MyType().asIterator)
    takeIterator1(MyType())
    MyType().asIterator.map<Int,Str>(s => "")
    MyType().map<Int,Str>(s => "")
    MyType().asIterator.map<Int,Str>(s => "")

    for x1 in MyType()
        nop
    for x2 in List<Int>()
        nop

    @myReduce1 = List<Int>().reduce(|item1, item2| => item1 + item2)
    @myReduce2 = List<Int>().reduce(|item1, item2| => item1 + item2)
    @myReduceTuple1 = List<(x Int, y Int)>().reduce(|item1, item2| => item1)
    @myReduceTuple2 = List<(a Int, b Int)>().reduce(|item1, item2| => item2)

[pub] type MyType()
[implicit] fun MyType.asIterator(my) MyTypeIter todo

type MyTypeIter()
fun MyTypeIter.next(my) ?Int
    todo

fun Iterator.reduceInt(my Iterator<Int>, f fun(item1 Int, item2 Int) Int) ?Int
    return my.reduce(f)

fun takeIterator1<T>(a Iterator<T>)
    return

fun Iterator.takeIterator2<T>(my)
    return

fun takeIteratorInt(my Iterator<Int>)
    return
    
fun takeIteratorInt2<T1,T2>(a T1, b Iterator<T2>)
    return

fun takeIterator4(my Iterator<Int>, f fun(item1 Int, item2 Int) Int) ?Int
    return my.reduce(f)

fun returnList<T>()List<T> todo
fun takeList<T>(a List<T>) todo
fun takeListInt(a List<Int>) todo

fun testInfer()
    @m = List<(x Int, y Float)>()
    @m2 = inferFun(m)               // Float

    // Tuple
    @ml = List<(x Int, y F32)>()
    @ml2 = List<(Int, F32)>()
    @mli2 = ml[0].y                 // Float
    takeListOfTuples(ml)

fun inferFun<S,R>(x List<(S,R)>) R
    return R()


fun takeListOfTuples(x List<(a Int, b F32)>) F32
    return x[0].b


// TBD: Global variables need to be compiled
@a1 AParamable = A1Parameter()
@b1 AParamable = Int()


type interface AParamable
    fun takePointer(my, a *Int) Span<Int>
    fun takeInt(my, a Int) Float

type interface BParamable
    fun fun1(my, x AParamable)
    fun fun2(my, y BParamable)
    fun fun3(my, a AParamable, b BParamable)

type A1Parameter
    a Int
fun A1Parameter.takePointer(my, a *Int) Span<Int>
    return Span<Int>()
fun A1Parameter.takeInt(my, a Int) Float
    return 0.0

type A1ParameterNot1
    a Int
fun takePointer(my A1ParameterNot1, a *Int) Int // Causes it to not be AParamable
    return 0
fun A1ParameterNot1.takeInt(my, a Int) Float
    return 0.0

type A1ParameterNot2
    a Int
fun A1ParameterNot2.takePointer(my, a *Int) Span<Int>
    return Span<Int>()
fun A1ParameterNot2.takeInt(my, a Int) Int // Causes it to not be AParamable
    return 0


    
type interface Printable
    fun toStr(my) Str    
type interface Printable2
    fun toStr(my) Str    

fun test_printableFail<T, Q>(t T, q Q)
where T Printable
    // Fail test case
    //q.toStr
    nop

// TBD: This should be acceptable
fun test_printableAmbiguous<T>(t T)
where T Printable + Printable2
    t.toStr // TBD: Should not fail


type interface TestGlobal
    [static] fun testGlobal()
    
fun test_Global<T>()
where T TestGlobal
    testGlobal()

type interface TestGlobal2<T>
    [static] fun testGlobal2(x T) T

fun test_Global2<T>(t T)
where T TestGlobal2<Int>
    @x = testGlobal2(1)

    // Fail test case
    //testGlobal2(t)


fun lambdaCall(a fun(b Float)Int) todo
fun lambdaCall(a fun(b F32)I32) todo
fun lambdaCall2(a fun(b Float)Int) todo


fun test_lambdaCall()
    lambdaCall(|a Float| => a + 32) // TBD: Should be OK
    lambdaCall2(a => 0)

type MyCollection<T> {}
type MyCollectionIter<T> {}

type MyCollectionNot<T> {}
type MyCollectionNotIter<T> {}


[implicit] fun MyCollection.asIterator<T>(my) MyCollectionIter<T>
    nop
fun MyCollectionIter.next<T>(my) ?T
    nop
fun MyCollectionNot.asIterator<T>(my) MyCollectionNotIter<T>
    nop
fun MyCollectionNotIter.next<T>(my) ?T
    nop


fun test_use()
    @myCollection = MyCollection<Int>()
    @myCollectionIter = myCollection.asIterator
    @myCollectionItem = myCollectionIter.next()
    @myCollectionMapIter = myCollection.map<Int,Str>(i => i.toStr)
    // TBD: Fix asset hit for: @myCollectionMapList = myCollection.map<Int,Str>(@i => i.toStr).toList
    @myCollectionMapList2 = myCollection.map<Int,Str>(i => i.toStr).toList<Str>

    @myReduce = List<Int>()
        .reduce<Int>(|item1, item2| => item1 + item2)
    
    @myCollectionNot = MyCollectionNot<Int>()
    @myCollectionNotIter = myCollectionNot.asIterator
    @myCollectionNotItem = myCollectionNotIter.next()
        

fun test_map()
    for @ir in 0..2
        Log.info("")

    @i = List<Int>().asIterator()
    @m3 = i.map<Int,Str>(q => 0.0)
    @m3item = m3.next()
    @m4 = i.map<Int,Str>(q => 0.0).map<Str,Float>(q => "hello")
    @m4item = m4.next()
    @m5 = List<Int>().map<Int,Str>(q => 0).map<Str,Float>(q => 0)
    @m5List = m5.toList<Float>

    @myFold = List<Int>()
        .reduce<Int, Float>(0.0, |acc, item| => acc + item.toFloat)
    @myReduce = List<Int>()
        .reduce<Int>(|item1, item2| => item1 + item2)

    @myStringList = List<Int>()
        .map<Int, Str>(s => s.toStr)
        .map<Str,Str>(s => s + " ")
        .reduce<Str,Str>("", |acc, item| => acc + item)

    @testIter = (0..5).map<Int,Float>(fl => (2*fl).toFloat + 0.5)

    for @a in m5
        Log.info("")


    

fun test_callInterfaces() AParamable
    @a AParamable = A1Parameter()
    @params = A1Parameter()
    test_paramable(params)


    // Passing test cases (TBD: Verifier to ensure no local variables returned by ref)
    if false
        return a
    if false
        return A1Parameter()

    @a1 AParamable = A1Parameter()
    test_paramable(A1Parameter())

    // Failing test cases
    //test_paramable(3)
    //if false
    //    return 3
    //@b1 AParamable = Int()
    //@c1 AParamable = A1ParameterNot1()
    //@d1 AParamable = A1ParameterNot2()

    // TBD: Should this be allowed since ints are Printable?
    //      Compiler would need to write an adapter?
    //test_printPrintable(ints) // TBD: Should this be allowed?
    

    @ints = List<Int>()
    test_printable(1)
    test_printable(1.0)
    test_printable("hello")

    // TBD: Need correct assembly
    test_multiPrintableOverload(1,   1, 0 Byte, "x")
    test_multiPrintableOverload(1.0, 1, 0 Byte, 2.3 F32)

    // TBD: Still working on this
    test_printInts(ints)

    @intSpan = Span<Int>()
    test_printInts(intSpan)

    // TBD: Generic interfaces, etc
    //test_printGeneric(ints)

fun test_paramable(p AParamable)
    @x = p.takePointer(nil)

fun test_for()
    @list = List<Int>()
    for @i in list
        @istr = i.toStr

fun test_printable(x Printable)
    @item = x.toStr
    Log.info("Item={item}")

fun test_multiPrintableOverload(a Int, b Int, c Printable, d Printable)
    Log.info("Item={a},{b},{c},{d}")
fun test_multiPrintableOverload(a Float, b Int, c Printable, d Printable)
    Log.info("Item={a},{b},{c},{d}")

fun test_printInts(x Iterable<Int>)
    @i = x.asIterator
    while i.next()@item
        @s = item.toStr
        Log.info("Item={s}")

fun test_printPrintable(x mut Iterable<Printable>)
    @i = x.asIterator
    while i.next()@item
        @s = item.toStr
        Log.info("Item={item}")


fun test_printGeneric<T>(x mut Iterable<T>)
where T Printable
    @i = x.asIterator
    while i.next()@item
        @s = item.toStr()
        Log.info("Item={s}")

fun aaa_arith(a Int, b Int, c mut aaa_arith_test) Int
    Log.info("Hello world: 2+2 is " + (2 + 2).toStr)
    @x = a+b
    @y = a*b
    Log.info("X is " + x.toStr + ", Y is " + y.toStr)
    @tuples = List<(Int, Str)>()
    tuples.push((1, "Hello"))
    @tupleElement = tuples[0]    
    @hold
    if x < y
        @q = -1
        Log.info("if x < y" + q.toStr)
        hold = q
    elif x > y
        @q = 1
        Log.info("elif x > y")
        hold = q
    else
        @q = 0
        Log.info("else x == y")
        hold = q
    Log.info("Answer: " + hold.toStr)

    @q2 = c.bref.e

    c.property = 10
    
    return y + c.b.e + c.property

fun MyGenericInt<T>()
where T Number<Int>
    @a = T()
    @c = T.One
    @d = One

fun MyGeneric<T>()
where T Number<T>
    @a = T()
    @c = T.One
    @d = One
    @x = T() + Zero


type aaa_arith_test
    a Int
    b aaa_arith_test2
    c Int
    _property Int
    
fun get aaa_arith_test.property(my) Int
    return my._property
fun set aaa_arith_test.property(my, d Int)
    my._property = d

fun get aaa_arith_test.bref(my) mut &aaa_arith_test2
    return my.b

type aaa_arith_test2
    d Int
    e Int
    f Int
 


fun test_listMap()
    @a = List<Float>()
    @c = a.map<Float,Int>(i => i.toIntMask)


fun test_forEach(args Array<Str>)
    @sum = 0
    @list List<Int>
    list.forEach(item => { sum += item })


// https://stackoverflow.com/questions/1825952/how-to-create-a-generic-extension-method
fun Iterator.alphaLengthWise<Item, L>(my, lengthProvider fun(t Item) L) Iterator<Item>
    return my.orderBy<Item, L>(a => lengthProvider(a)).thenBy<Item, L>(a => a)
    
fun Iterator.orderBy<Source,Key>(my, keySelector fun(i Source)Key) Iterator<Source>
    todo
    
fun Iterator.thenBy<Source,Key>(my, keySelector fun(i Source)Key) Iterator<Source>
    todo

fun test_alphaLengthWise()
    let a = List<Str>().asIterator.alphaLengthWise<Str, Int>(i => i.len)

fun Iterator.find<T>(my, f fun(item T) Bool) mut ?&T
    while my.next()@item
        if f(item)
            return &item // TBD: Require `&` here
    return nil


// Simple selection sort
fun Span.test_selectionSort<T>(my, lessThan fun(a T,b T)Bool)
    for @i in 0..my.len-1
        @lowElem = my[i]
        @lowIndex = i
        for @j in i+1..my.len
            if lessThan(my[j], lowElem)
                lowElem = my[j]
                lowIndex = j
        if lowIndex != i
            my[lowIndex] = my[i]
            my[i] = lowElem

type AA<T1,T2,T3>
    a T1

type MyPoint<T1,T2,T3>
    a T1
    b T2
    c T3
    x (Int, T1, Int)
    y (a Int, b T1, c Int, d (r Int, b Int))

type interface Iterable2<Item>
    fun iterator2(my) Iterator<Item>

type interface GetMap<Item1,Item2>
    fun getMap(my) Map<Item1, Item2>
    fun getMapKeys(my) Iterator<Item1>
    fun getMapValues(my) Iterator<Item2>

type interface Getter
    fun get myGet(my) I32
    fun myFun(my) I32

type interface Getter2<T>
    fun get myGet2(my) T
    fun myFun2(my) T
    fun myFun2Ns(my) T
    [static] fun myFun2Stat() T

type interface MyAdd<T>
    fun myAddNotStatic(my, a T, b T) T
    [static] fun myAddStatic(a T, b T) T

fun getMapFun<K,V>() Map<V,K>
    return Map<V,K>()

fun myFun2Interf<T>(i T) T todo

fun takeFun(i fun(a Int)Int) todo

type interface GetHash
    fun getHash(my) U32

fun test_tuples()
    @tuples = List<(Int, Str)>()
    tuples.push((1, "Hello"))
    @tupleElement = tuples[0]
    
    @tuplesNamed = List<(x Int,  y Str)>()
    tuplesNamed.push((1, "Hello"))
    @tuplesNamedElement = tuplesNamed[0]
    @element = tuplesNamedElement.x

fun AAAAA<X,T,Q>(t T, q Q, intf1 Iterator<I32>, intf2 GetHash, mgQ Getter2<Q>, mgF Getter2<Float>, myGetter Getter)
where   T Number<T> + GetHash + Iterable<Int> + Iterable2<Int> + GetMap<F32,Float> + Iterator<Int>,
        Q Number<Q> + Getter + Getter2<Int> + MyAdd<Q>

    // Source code symbols should be non-generic
    @next3 = q.myGet2           // Int
    @next4 = q.myFun2Ns()       // Int
    @next5 = Q.myFun2Stat()     // Int
    @next6 = q.myGet            // I32
    @next7 = q.myFun()          // I32
    @addTestQ = q + q           // #2
    @mulTestT = t * t           // #1

    
    @next1 = t.next()           // ?Int
    @gotq = myFun2Interf(q)     // #2
    @gotInt = myFun2Interf(3)   // Int  - myFun2Interf not linked to specialized
    @next2 = intf1.next()       // ?I32 - Next is linked to generic
    @myGet = q.myGet            // I32
    @myGetter2 = myGetter.myGet // I32
    @myGet2 = q.myGet2          // Int
    @mgGet2a = mgQ.myGet2       // #2
    @mgGet2F = mgF.myGet2       // Float
    @mgFun2F = mgF.myFun2()     // Float
    @myPoint = MyPoint<Int,Float,F32>().b   // Float

    @intf2b = intf2.getHash()   // U32
    @myAddNs = q.myAddNotStatic(Q(),Q())    // #2
    @myAdd = Q.myAddStatic(Q(),Q())         // #2
    @myFun = q.myFun()          // I32
    @myFun2 = q.myFun2()        // Int
    @getMap = t.getMap()        // Map<F32,Float>
    @getMapFunc = getMapFun<I32,U32>()  // Map<U32,I32>
    @getMapKeys = t.getMapKeys()        // Iterator<F32>
    @getMapValues = t.getMapValues()    // Iterator<Float>
    @iter1 = t.asIterator                 // Iterator<Int>
    @iter2 = t.iterator2()              // Iterator<Int>
    @first = iter1.next()               // ?Int
    @x = 1
    @y = 2
    @z1 = x + y
    @z2 = _opAdd(x, y)
    @a = T()
    @b = T()
    @z3 = a + b                 // #1
    @z4 = _opAdd(a, b)
    @z5 = T.One
    @iter3 = t.asIterator()

    // TBD: Resolve multiple interface implementations, which is
    //      allowed since they would be resolved when called
    //@aa = t.getHash()           // U32
    //@z6 = T().getHash()

    for @item in t.asIterator
        @itemt = item           // Int


fun MyFun1<T1,T2,T3>(a T1, b T2, c T3)(x T2, y T3)
    @q = b
    return (T2(), T3())

fun MyFun2<I,O>(i I) O
    return O()

fun MyFun3<I,O>(i Int) O
    return O()

fun MyFun4<T0,T1,T2,T3>(i Int) List<T2>
    return List<T2>()

fun MyFun5<T0,T1,T2,T3>(i Int)(a List<T1>, b List<T3>)
    return (List<T1>(), List<T3>())

fun inferMap<T1,T2>(a Map<T1,T2>, b List<T2>)(x T1, y T2)
    return (T1(), T2())

fun Test<X0,X1,X2,X3>()
    @infer1 = MyFun1(0, "", 0.0)
    @infer2 = MyFun1(0, List<Int>(), 0)
    @infer3 = MyFun1(0, List<X2>(), 0.0)
    @infer4 = inferMap(Map<Int,Str>(), List<Str>())
    @f1 = MyFun2<Int, Float>(0)
    @f2 = MyFun3<Int,Float>(1)
    @f3 = MyFun3<Float,Int>(1)
    @f4 = MyFun4<Float,Int,List<X3>,U32>(1)
    @f5 = MyFun5<Float,Int,Str,U64>(1)
    @a = MyPoint<Int,Float,Str>()
    @b = MyPoint<X2, List<X3>, Map<X1,X3>>()
    @c = MyFun1<Int, MyPoint<Int,Int,Int>, Str>(0, MyPoint<Int,Int,Int>(), "hello")
    @d = MyFun1<Int, MyPoint<Int,X3,Int>, Str>(0, MyPoint<Int,X3,Int>(), "hello")
    @e = MyFun2<X2,X3>(X2())
    @g = MyFun2<Int,Float>(0)
    @h = MyFun2<Float,Int>(0.0)
    @f4a = MyFun4<Int,Str,F32,U64>(0)
    @f5a = MyFun5<Int,Str,F32,U64>(0) 
    @i Size<Int> = Size<Int>(0,0)  
    @k Float = 0.0
    @l Float = 0Float
    @p1 = Xuint()
    @p2 = castPointer<RawPointer<Byte>>(p1)
    @p3 = castPointer<RawPointer<Int>>(p2)
    @p4 = castPointer<Xuint>(p3)
    @t = (0,1,2)
    @toSize = Point<F32>().toSizeTest

type OneGeneric<T> { } 

fun get Point.toSizeTest<T>(my) Size<T>
    @a = Size<T>(T(),T())
    @b = Size<T>()
    @c = Size(my.x, my.y)
    @d = Size(0,0)
    return c





fun helloVoid() {}
fun helloInt() Int {}
fun cos2(a Int)(x Float, y Int) {}
 
fun test(x Float)
    @a = 3
    @b = x
    @c = x == 3.0
    @z = cos2(1)
    @d = cos2(3)
    @e = d.x
    @f = helloVoid()
    @g = helloInt()
    Log.info("Hello world, 2+2={2+2}")
    @h = cos(2.0+3.0*23.0).toStr


type AAAA<T>
    v Void

type BBBB
    v Void
        
fun BBBB.BBBB_fm1(my) {}
fun BBBB.BBBB_fm2(my, a BBBB) {}
    


fun AAAA.AAAA_fm(my AAAA<Int>) {}
fun AAAA.AAAA_fm<T>(my) {}
fun BBBB.AAAA_fm(my) {}

fun AAAA_f() {}

fun BBBB.AAAA_fe2(my, a BBBB) {}

// TBD: AAAA should not conflict with AAAA typename
//      must be resolved before moving methods to module level
fun aapoint.AAAA(my) {}
fun aapoint.BBBB(my) {}
fun aapoint.AAAB(my) {}
fun List.X<T>(my) {}
fun Int.X(my) {}
    

type aapoint
    v Void
    
type bbpoint
    v Void

[pub] fun aapoint.x(my) {}

[pub] fun bbpoint.xx(my) {}

[pub] fun aapoint.y(my) {}
[pub] fun bbpoint.yy(my) {}

  
[pub]
type AAFun    
    aaf4 fun(a Int, b Int) Int
    aaf5 AAFunc<Int, Int>
    aaf6 fun()()
    aaf7 fun()
    aaf8 fun()Int
    aaf9 fun(a Int)
    aaf9a fun(a Int) Int
    aaf9b fun(a Int)(x Int)
    af10 fun(v Int)Int

fun AAFun.aaaa(my, a Int, b Int) Int { }
fun AAFun.aaaa(my, a Int, b Float) Int { }
fun AAFun.aaaa(my, x Float, y Int) Int { }
fun AAFun.aaf1(my, a Int, b Int)Int { }
fun AAFun.aaf2(my, v AAFunc<Int, Int>) { }
fun AAFun.aaf3<T1,T2>(my, i T1)T2 { }
fun AAFun.aaf1s(my, a Int, b Int)Int { }
fun AAFun.aaf2s(my, v AAFunc<Int, Int>) { }
fun AAFun.aaf3s<T1,T2>(my, i T1)T2 { }
fun AAFun.af6(my, p fun(v Int)Bool) {}
fun AAFun.af7<X>(my, p fun(v X)Bool) {}


[pub]
type AAFunc<T1,T2>
    Invoke fun (v T1) T2


fun AGenericTest.af6<T,QQQ>(my, p fun(v Int)Bool) {}


type interface ToStr
    fun get toStr(my) Str

[pub]
fun GenericTest<Q1,Q2>(a Q1, b Q2) Int
where Q1 ToStr, Q2 ToStr
    return a.toStr.len + b.toStr.len    

[pub]
type AGenericTest<T, QQQ> // TBD: new() where T : new()
where QQQ Equatable<T>
    
    af0 fun()()
    af1 fun()
    af2 fun()Int
    af3 fun(a Int)
    af4 fun(a Int) Int
    af5 fun(a Int)(x Int)
    
    field0 T = 0
    Xfield6 Zurfur.Int

    