
// Misc compiler testing
mod AATest


use Zurfur
use Zurfur[Log, Iterator, GetIterator, Equatable, Number]
use Zurfur.Unsafe[Xuint, RawPointer, castPointer,]
use Zurfur.Math[cos]
use Zurfur.Draw2d[Size, Point]
use AATest2[MyCollection, MyCollectionNot, MyCollectionNotIter]


//pragma ShowParse


// TBD: Global variables need to be compiled
@a1 AParamable = A1Parameter()
@b1 AParamable = int()


type interface AParamable
    fun takePointer(a *int) Span<int>
    fun takeInt(a int) float

type interface BParamable
    fun fun1(x AParamable)
    fun fun2(y BParamable)
    fun fun3(a AParamable, b BParamable)

type A1Parameter
    a int
fun A1Parameter.takePointer(a *int) Span<int>
    ret Span<int>()
fun A1Parameter.takeInt(a int) float
    ret 0.0

type A1ParameterNot1
    a int
fun A1ParameterNot1.takePointer(a *int) int // Causes it to not be AParamable
    ret 0
fun A1ParameterNot1.takeInt(a int) float
    ret 0.0

type A1ParameterNot2
    a int
fun A1ParameterNot2.takePointer(a *int) Span<int>
    ret Span<int>()
fun A1ParameterNot2.takeInt(a int) int // Causes it to not be AParamable
    ret 0


    
type interface Printable
    fun toStr() str    

fun test_use()
    @myCollection = MyCollection<int>()
    @myCollectionIter = myCollection.getIterator
    @myCollectionItem = myCollectionIter.next()
    @myCollectionMapIter = myCollection.map<int,str>(@i => i.toStr)
    // TBD: Fix asset hit for: @myCollectionMapList = myCollection.map<int,str>(@i => i.toStr).toList
    @myCollectionMapList2 = myCollection.map<int,str>(@i => i.toStr).toList<str>

    @myReduce = List<int>()
        .reduce<int>(@(item1, item2) => item1 + item2)
    
    @myCollectionNot = MyCollectionNot<int>()
    @myCollectionNotIter = myCollectionNot.getIterator
    @myCollectionNotItem = myCollectionNotIter.next()
    for @a in myCollectionNot
        nop
        
    // Failed test cases
    //@a = MyCollection()
    //@myCollectionMapList3 = myCollection.map<int,str>(@i => i.toStr).toList<int>
    //@myCollectionNotMapIter = myCollectionNot.map<int,str>(@i => i.toStr)
    //@myCollectionNotMapList = myCollectionNot.map<int,str>(@i => i.toStr).toList<int>
    //@myReduceFail = List<int>()
    //    .reduce<float>(@(item1, item2) => item1 + item2)

fun test_map()

    for @ir in 0..2
        Log.info("")

    @i = List<int>().getIterator()
    @m3 = i.map<int,str>(@q => 0.0)
    @m3item = m3.next()
    @m4 = i.map<int,str>(@q => 0.0).map<str,float>(@q => "hello")
    @m4item = m4.next()
    @m5 = List<int>().map<int,str>(@q => 0).map<str,float>(@q => 0)
    @m5List = m5.toList<float>

    @myFold = List<int>()
        .fold<int, float>(0.0, @(acc, item) => acc + item.toFloat)
    @myReduce = List<int>()
        .reduce<int>(@(item1, item2) => item1 + item2)

    @myStringList = List<int>()
        .map<int, str>(@s => s.toStr)
        .map<str,str>(@s => s + " ")
        .fold<str,str>("", @(acc, item) => acc + item)

    @testIter = (0..5).map<int,float>(@fl => (2*fl).toFloat + 0.5)

    // TBD: This should work
    for @a in m5
        Log.info("")


[pub] fun MyCollectionNot.getIterator[T]() MyCollectionNotIter<T>
    nop
[pub] fun MyCollectionNotIter.next[T]() ?T
    nop
    

fun test_callInterfaces() AParamable
    @a AParamable = A1Parameter()
    @params = A1Parameter()
    test_paramable(params)


    // Passing test cases (TBD: Verifier to ensure no local variables returned by ref)
    if false
        ret a
    if false
        ret A1Parameter()

    @a1 AParamable = A1Parameter()
    test_paramable(A1Parameter())

    // Failing test cases
    //test_paramable(3)
    //if false
    //    ret 3
    //@b1 AParamable = int()
    //@c1 AParamable = A1ParameterNot1()
    //@d1 AParamable = A1ParameterNot2()

    // TBD: Should this be allowed since ints are Printable?
    //      Compiler would need to write an adapter?
    //test_printPrintable(ints) // TBD: Should this be allowed?
    

    @ints = List<int>()
    test_printable(1)
    test_printable(1.0)
    test_printable("hello")

    // TBD: Need correct assembly
    test_multiPrintableOverload(1,   1, 0 byte, "x")
    test_multiPrintableOverload(1.0, 1, 0 byte, 2.3 f32)

    // TBD: Still working on this
    test_printInts(ints)

    @intSpan = Span<int>()
    test_printInts(intSpan)

    // TBD: Generic interfaces, etc
    //test_printGeneric(ints)

fun test_paramable(p AParamable)
    @x = p.takePointer(nil)

fun test_for()
    @list = List<int>()
    for @i in list
        @istr = i.toStr

fun test_printable(x Printable)
    @item = x.toStr
    Log.info("Item={item}")

fun test_multiPrintableOverload(a int, b int, c Printable, d Printable)
    Log.info("Item={a},{b},{c},{d}")
fun test_multiPrintableOverload(a float, b int, c Printable, d Printable)
    Log.info("Item={a},{b},{c},{d}")

fun test_printInts(x GetIterator<int>)
    @i = x.getIterator
    while i.next()@item
        @s = item.toStr
        Log.info("Item={s}")

fun test_printPrintable(x mut GetIterator<Printable>)
    @i = x.getIterator
    while i.next()@item
        @s = item.toStr
        Log.info("Item={item}")


fun test_printGeneric[T Printable](x mut GetIterator<T>)
    @i = x.getIterator
    while i.next()@item
        @s = item.toStr()
        Log.info("Item={s}")

fun aaa_arith(a int, b int, c mut aaa_arith_test) int
    Log.info("Hello world: 2+2 is " + (2 + 2).toStr)
    @x = a+b
    @y = a*b
    Log.info("X is " + x.toStr + ", Y is " + y.toStr)
    @tuples = List<(int, str)>()
    tuples.push((1, "Hello"))
    @tupleElement = tuples[0]    
    @hold
    if x < y
        @q = -1
        Log.info("if x < y" + q.toStr)
        hold = q
    elif x > y
        @q = 1
        Log.info("elif x > y")
        hold = q
    else
        @q = 0
        Log.info("else x == y")
        hold = q
    Log.info("Answer: " + hold.toStr)

    @q2 = c.bref.e

    c.property = 10
    
    ret y + c.b.e + c.property

fun MyGenericInt[T Number<int>]()
    @a = T()
    @c = T.One
    @d = One

fun MyGeneric[T Number<T>]()
    @a = T()
    @c = T.One
    @d = One
    @x = T() + Zero


type aaa_arith_test
    a int
    b aaa_arith_test2
    c int
    _property int
    
fun get aaa_arith_test.property() int
    ret my._property
fun set aaa_arith_test.property(d int)
    my._property = d

fun get aaa_arith_test.bref() mut &aaa_arith_test2
    ret my.b

type aaa_arith_test2
    d int
    e int
    f int
 


fun test_listMap()
    @a = List<float>()
    @c = a.map<float,int>(@i => i.toIntMask)


fun test_forEach(args Array<str>)
    @sum = 0
    @list List<int>
    list.forEach(@item => { sum += item })


// https://stackoverflow.com/questions/1825952/how-to-create-a-generic-extension-method
fun Iterator.alphaLengthWise[Item, L](lengthProvider fun(t Item) L) Iterator<Item>
    ret my.orderBy<Item, L>(@a => lengthProvider(a))
        .thenBy<Item, L>(@a => a)
fun Iterator.orderBy[Source,Key](keySelector fun(i Source)Key) Iterator<Source>
    todo
fun Iterator.thenBy[Source,Key](keySelector fun(i Source)Key) Iterator<Source>
    todo

fun Iterator.find[T](f fun(item T) bool) mut ?&T
    while my.next()@item
        if f(item)
            ret &item // TBD: Require `&` here
    ret nil


// Simple selection sort
fun Span.test_selectionSort[T](lessThan fun(a T,b T)bool)
    for @i in 0..my.len-1
        @lowElem = my[i]
        @lowIndex = i
        for @j in i+1..my.len
            if lessThan(my[j], lowElem)
                lowElem = my[j]
                lowIndex = j
        if lowIndex != i
            my[lowIndex] = my[i]
            my[i] = lowElem

type AA[T1,T2,T3]
    a T1

type MyPoint[T1,T2,T3]
    a T1
    b T2
    c T3
    x (int, T1, int)
    y (a int, b T1, c int, d (r int, b int))

type interface GetIterator2[Item]
    fun iterator2() Iterator<Item>

type interface GetMap[Item1,Item2]
    fun getMap() Map<Item1, Item2>
    fun getMapKeys() Iterator<Item1>
    fun getMapValues() Iterator<Item2>

type interface Getter
    fun get myGet() i32
    fun myFun() i32

type interface Getter2[T]
    fun get myGet2() T
    fun myFun2() T
    fun myFun2Ns() T
    [static] fun myFun2Stat() T

type interface MyAdd[T]
    fun myAddNotStatic(a T, b T) T
    [static] fun myAddStatic(a T, b T) T

fun getMapFun[K,V]() Map<V,K>
    ret Map<V,K>()

fun myFun2Interf[T](i T) T todo

fun takeFun(i fun(a int)int) todo

type interface GetHash
    fun getHash() u32

fun test_tuples()
    @tuples = List<(int, str)>()
    tuples.push((1, "Hello"))
    @tupleElement = tuples[0]
    
    @tuplesNamed = List<(x int,  y str)>()
    tuplesNamed.push((1, "Hello"))
    @tuplesNamedElement = tuplesNamed[0]
    @element = tuplesNamedElement.x

fun AAAAA[X,
        T Number<T> + GetHash + GetIterator<int> + GetIterator2<int> + GetMap<f32,float> + Iterator<int>,
        Q Number<Q> + Getter + Getter2<int> + MyAdd<Q>
        ](t T, q Q, intf1 Iterator<i32>, intf2 GetHash, mgQ Getter2<Q>, mgF Getter2<float>, myGetter Getter)

    // Source code symbols should be non-generic
    @next3 = q.myGet2           // int
    @next4 = q.myFun2Ns()       // int
    @next5 = Q.myFun2Stat()     // int
    @next6 = q.myGet            // i32
    @next7 = q.myFun()          // i32

    
    @next1 = t.next()           // ?int
    @gotq = myFun2Interf(q)     // #2
    @gotInt = myFun2Interf(3)   // int  - myFun2Interf not linked to specialized
    @next2 = intf1.next()       // ?i32 - Next is linked to generic
    @myGet = q.myGet            // i32
    @myGetter2 = myGetter.myGet // i32
    @myGet2 = q.myGet2          // int
    @mgGet2a = mgQ.myGet2       // #2
    @mgGet2F = mgF.myGet2       // float
    @mgFun2F = mgF.myFun2()     // float
    @myPoint = MyPoint<int,float,f32>().b   // float

    @intf2b = intf2.getHash()   // u32
    @myAddNs = q.myAddNotStatic(Q(),Q())    // #2
    @myAdd = Q.myAddStatic(Q(),Q())         // #2
    @myFun = q.myFun()          // i32
    @myFun2 = q.myFun2()        // int
    @getMap = t.getMap()        // Map<f32,float>
    @getMapFunc = getMapFun<i32,u32>()  // Map<u32,i32>
    @getMapKeys = t.getMapKeys()        // Iterator<f32>
    @getMapValues = t.getMapValues()    // Iterator<float>
    @iter1 = t.getIterator                 // Iterator<int>
    @iter2 = t.iterator2()              // Iterator<int>
    @first = iter1.next()               // ?int
    @x = 1
    @y = 2
    @z1 = x + y
    @z2 = _opAdd(x, y)
    @a = T()
    @b = T()
    @z3 = a + b                 // #1
    @z4 = _opAdd(a, b)
    @z5 = T.One
    @iter3 = t.getIterator()

    // TBD: Resolve multiple interface implementations, which is
    //      allowed since they would be resolved when called
    //@aa = t.getHash()           // u32
    //@z6 = T().getHash()

    for @item in t
        @itemt = item           // int


fun MyFun1[T1,T2,T3](a T1, b T2, c T3)(x T2, y T3)
    @q = b
    ret (T2(), T3())

fun MyFun2[I,O](i I) O
    ret O()

fun MyFun3[I,O](i int) O
    ret O()

fun MyFun4[T0,T1,T2,T3](i int) List<T2>
    ret List<T2>()

fun MyFun5[T0,T1,T2,T3](i int)(a List<T1>, b List<T3>)
    ret (List<T1>(), List<T3>())

fun inferMap[T1,T2](a Map<T1,T2>, b List<T2>)(x T1, y T2)
    ret (T1(), T2())

fun Test[X0,X1,X2,X3]()
    @infer1 = MyFun1(0, "", 0.0)
    @infer2 = MyFun1(0, List<int>(), 0)
    @infer3 = MyFun1(0, List<X2>(), 0.0)
    @infer4 = inferMap(Map<int,str>(), List<str>())
    @f1 = MyFun2<int, float>(0)
    @f2 = MyFun3<int,float>(1)
    @f3 = MyFun3<float,int>(1)
    @f4 = MyFun4<float,int,List<X3>,u32>(1)
    @f5 = MyFun5<float,int,str,u64>(1)
    @a = MyPoint<int,float,str>()
    @b = MyPoint<X2, List<X3>, Map<X1,X3>>()
    @c = MyFun1<int, MyPoint<int,int,int>, str>(0, MyPoint<int,int,int>(), "hello")
    @d = MyFun1<int, MyPoint<int,X3,int>, str>(0, MyPoint<int,X3,int>(), "hello")
    @e = MyFun2<X2,X3>(X2())
    @g = MyFun2<int,float>(0)
    @h = MyFun2<float,int>(0.0)
    @f4a = MyFun4<int,str,f32,u64>(0)
    @f5a = MyFun5<int,str,f32,u64>(0) 
    @i Size<int> = Size<int>(0,0)  
    @k float = 0.0
    @l float = 0float
    @p1 = Xuint()
    @p2 = castPointer<RawPointer<byte>>(p1)
    @p3 = castPointer<RawPointer<int>>(p2)
    @p4 = castPointer<Xuint>(p3)
    @t = (0,1,2)
    @toSize = Point<f32>().toSizeTest

type OneGeneric[T] { } 

fun get Point.toSizeTest[T]() Size<T>
    @a = Size<T>(T(),T())
    @b = Size<T>()
    @c = Size(my.x, my.y)
    @d = Size(0,0)
    ret c





fun helloVoid() {}
fun helloInt() int {}
fun cos2(a int)(x float, y int) {}
 
fun test(x float)
    @a = 3
    @b = x
    @c = x == 3.0
    @z = cos2(1)
    @d = cos2(3)
    @e = d.x
    @f = helloVoid()
    @g = helloInt()
    Log.info("Hello world, 2+2={2+2}")
    @h = cos(2.0+3.0*23.0).toStr


type AAAA[T]
    v void

type BBBB
    v void
        
fun BBBB.BBBB_fm1() {}
fun BBBB.BBBB_fm2(a BBBB) {}
    


fun AAAA<int>.AAAA_fm() {}
fun AAAA.AAAA_fm[T]() {}
fun BBBB.AAAA_fm() {}

fun AAAA_f() {}

fun BBBB.AAAA_fe2(a BBBB) {}

// TBD: AAAA should not conflict with AAAA typename
//      must be resolved before moving methods to module level
fun aapoint.AAAA() {}
fun aapoint.BBBB() {}
fun aapoint.AAAB() {}
fun List.X[T]() {}
fun int.X() {}
    

type aapoint
    v void
    
type bbpoint
    v void

[pub] fun aapoint.x() {}

[pub] fun bbpoint.xx() {}

[pub] fun aapoint.y() {}
[pub] fun bbpoint.yy() {}

  
[pub] type AAFun    
    aaf4 fun(a int, b int) int
    aaf5 AAFunc<int, int>
    aaf6 fun()()
    aaf7 fun()
    aaf8 fun()int
    aaf9 fun(a int)
    aaf9a fun(a int) int
    aaf9b fun(a int)(x int)
    af10 fun(v int)int

fun AAFun.aaaa(a int, b int) int { }
fun AAFun.aaaa(a int, b float) int { }
fun AAFun.aaaa(x float, y int) int { }
fun AAFun.aaf1(a int, b int)int { }
fun AAFun.aaf2(v AAFunc<int, int>) { }
fun AAFun.aaf3[T1,T2](i T1)T2 { }
fun AAFun.aaf1s(a int, b int)int { }
fun AAFun.aaf2s(v AAFunc<int, int>) { }
fun AAFun.aaf3s[T1,T2](i T1)T2 { }
fun AAFun.af6(p fun(v int)bool) {}
fun AAFun.af7[X](p fun(v X)bool) {}


[pub] type AAFunc[T1,T2]
    Invoke fun (v T1) T2


// TBD: These are identical to the ones defined in the class
fun AGenericTest.af6[T,QQQ](p fun(v int)bool) {}
//fun AGenericTest<T, QQQ>.af7<X>(p fun(v X)bool) {}
//fun AGenericTest<T, QQQ>.af8<T1,T2>(i T1)T2 { }
//fun AGenericTest<T, QQQ>.Q<T1>() {}
//[pub] fun AGenericTest<T, QQQ>.new()
//    todo
//[pub] fun AGenericTest<T, QQQ>.new(a int)
//    todo
//[pub] fun AGenericTest<T, QQQ>.aaa(a Zurfur.Draw2d.Size<int>) {}
//[pub] fun AGenericTest<T, QQQ>.P1() { ret 0 }
//[pub] fun AGenericTest<T, QQQ>.P2()() { ret 0}
//[pub] fun P2<Quack>(a Quack, b QQQ) { ret (a.ToStr() + b.ToStr()).Length; }
//[pub] fun AGenericTest<T, QQQ>.P3<Z>() { ret 0; }
//[pub] fun AGenericTest<T, QQQ>.P4<Quack, Quack1>() { ret 0; }
//[pub] fun AGenericTest<T, QQQ>.fun9(a *?OneGeneric<List<int>>) { }

//[pub] fun AGenericTest<T, QQQ>.UseIt(x Zurfur.int, y List<Inner1<int,int>>, z List<str>)
//    XField0.ToStr()
    // Xfield2<str, T>.P3<T>(); - Xfield2 can't use type parameters
    // Xfield2.P3(); - Can't infer P3<type>
//    Xfield2.P3<T>()
//    @a = List<str, Outer<int, int>>()
//    Inner1<str, byte>.Inner2<short, ushort>.Hello = 1
//    Outer<T, QQQ>.Inner1<str, byte>.Inner2<short, ushort>.Hello = 2
//    Outer<QQQ, T>.Inner1<str, byte>.Inner2<short, ushort>.Hello = 3
//    Outer<long, ulong>.Inner1<T, decimal>.Inner2<QQQ, byte>.Hello = 4
//    @p = AGenericTest<long, ulong>.Inner1<T, decimal>.Inner2<QQQ, byte>()
//    p.P5<short, QQQ, ushort>(3, QQQ(), 0)
//[pub] fun (AGenericTest<T, QQQ>.Inner1<Ta, Qa>) P1(a T, b QQQ, c Ta, d Qa)
//    ret 0

type interface ToStr
    fun get toStr() str

[pub] fun GenericTest[Q1 ToStr,Q2 ToStr](a Q1, b Q2) int
    ret a.toStr.len + b.toStr.len    

[pub] type AGenericTest[T, QQQ Equatable<T>] // TBD: new() where T : new()
    
    af0 fun()()
    af1 fun()
    af2 fun()int
    af3 fun(a int)
    af4 fun(a int) int
    af5 fun(a int)(x int)
    
    field0 T = 0
    Xfield6 Zurfur.int

    