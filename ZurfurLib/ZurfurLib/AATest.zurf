
// Misc compiler testing which gets compiled first and makes it easy to set break points.
// TBD: Move working test cases into AATestPass


mod AATest


use Zurfur
use Zurfur[Log, Iterator, GetIterator, Equatable, Number]
use Zurfur.Unsafe[Xuint, RawPointer, castPointer,]
use Zurfur.Math[cos]
use Zurfur.Draw2d[Size, Point]

 
//pragma ShowParse
 


fun test_reduce()
    @myReduce1 = List<Int>()
        .reduce(|item1, item2| => item1 + item2)
    @myReduce2 = List<Int>()
        .reduce(|item1, item2| => item1 + item2)
    @myReduceInt = List<Int>()
        .reduceInt(|item1, item2| => item1 + item2)
    @myReduceTuple1 = List<(x Int, y Int)>()
        .reduce(|item1, item2| => item1)
    @myReduceTuple2 = List<(a Int, b Int)>()
        .reduce(|item1, item2| => item2)

fun (my GetIterator<Int>) reduceInt(f fun(item1 Int, item2 Int) Int) ?Int
    ret my.getIterator.reduce<Int>(f) 

fun testInfer()
    @m = List<(x Int, y Float)>()
    @m2 = inferFun(m)               // Float

    // Tuple
    @ml = List<(x Int, y F32)>()
    @ml2 = List<(Int, F32)>()
    @mli2 = ml[0].y                 // Float
    takeListOfTuples(ml)

fun inferFun<S,R>(x List<(S,R)>) R
    ret R()


fun takeListOfTuples(x List<(a Int, b F32)>) F32
    ret x[0].b


// TBD: Global variables need to be compiled
@a1 AParamable = A1Parameter()
@b1 AParamable = Int()


type interface AParamable
    fun self.takePointer(a *Int) Span<Int>
    fun self.takeInt(a Int) Float

type interface BParamable
    fun self.fun1(x AParamable)
    fun self.fun2(y BParamable)
    fun self.fun3(a AParamable, b BParamable)

type A1Parameter
    a Int
fun (my A1Parameter) takePointer(a *Int) Span<Int>
    ret Span<Int>()
fun (my A1Parameter) takeInt(a Int) Float
    ret 0.0

type A1ParameterNot1
    a Int
fun (my A1ParameterNot1) takePointer(a *Int) Int // Causes it to not be AParamable
    ret 0
fun (my A1ParameterNot1) takeInt(a Int) Float
    ret 0.0

type A1ParameterNot2
    a Int
fun (my A1ParameterNot2) takePointer(a *Int) Span<Int>
    ret Span<Int>()
fun (my A1ParameterNot2) takeInt(a Int) Int // Causes it to not be AParamable
    ret 0


    
type interface Printable
    fun self.toStr() Str    
type interface Printable2
    fun self.toStr() Str    

fun test_printableFail<T Printable, Q>(t T, q Q)
    // Fail test case
    //q.toStr
    nop

// TBD: This should be acceptable
fun test_printableAmbiguous<T Printable + Printable2>(t T)
    t.toStr // TBD: Should not fail


type interface TestGlobal
    fun testGlobal()
fun test_Global<T TestGlobal>()
    testGlobal()

type interface TestGlobal2<T>
    fun testGlobal2(x T) T
fun test_Global2<T TestGlobal2<Int>>(t T)
    @x = testGlobal2(1)

    // Fail test case
    //testGlobal2(t)


fun lambdaCall(a fun(b Float)Int) todo
fun lambdaCall(a fun(b F32)I32) todo
fun lambdaCall2(a fun(b Float)Int) todo


fun test_lambdaCall()
    lambdaCall(|a Float| => a + 32) // TBD: Should be OK
    lambdaCall2(a => 0)

[pub] type MyCollection<T> {}
[pub] type MyCollectionIter<T> {}

[pub] type MyCollectionNot<T> {}
[pub] type MyCollectionNotIter<T> {}


[pub] fun (my MyCollection<T>) getIterator<T>() MyCollectionIter<T>
    nop
[pub] fun (my MyCollectionIter<T>) next<T>() ?T
    nop


fun test_use()
    @myCollection = MyCollection<Int>()
    @myCollectionIter = myCollection.getIterator
    @myCollectionItem = myCollectionIter.next()
    @myCollectionMapIter = myCollection.map<Int,Str>(i => i.toStr)
    // TBD: Fix asset hit for: @myCollectionMapList = myCollection.map<Int,Str>(@i => i.toStr).toList
    @myCollectionMapList2 = myCollection.map<Int,Str>(i => i.toStr).toList<Str>

    @myReduce = List<Int>()
        .reduce<Int>(|item1, item2| => item1 + item2)
    
    @myCollectionNot = MyCollectionNot<Int>()
    @myCollectionNotIter = myCollectionNot.getIterator
    @myCollectionNotItem = myCollectionNotIter.next()
    for @a in myCollectionNot
        nop
        

fun test_map()
    for @ir in 0..2
        Log.info("")

    @i = List<Int>().getIterator()
    @m3 = i.map<Int,Str>(q => 0.0)
    @m3item = m3.next()
    @m4 = i.map<Int,Str>(q => 0.0).map<Str,Float>(q => "hello")
    @m4item = m4.next()
    @m5 = List<Int>().map<Int,Str>(q => 0).map<Str,Float>(q => 0)
    @m5List = m5.toList<Float>

    @myFold = List<Int>()
        .reduce<Int, Float>(0.0, |acc, item| => acc + item.toFloat)
    @myReduce = List<Int>()
        .reduce<Int>(|item1, item2| => item1 + item2)

    @myStringList = List<Int>()
        .map<Int, Str>(s => s.toStr)
        .map<Str,Str>(s => s + " ")
        .reduce<Str,Str>("", |acc, item| => acc + item)

    @testIter = (0..5).map<Int,Float>(fl => (2*fl).toFloat + 0.5)

    // TBD: This should work
    for @a in m5
        Log.info("")


[pub] fun (my MyCollectionNot<T>) getIterator<T>() MyCollectionNotIter<T>
    nop
[pub] fun (my MyCollectionNotIter<T>) next<T>() ?T
    nop
    

fun test_callInterfaces() AParamable
    @a AParamable = A1Parameter()
    @params = A1Parameter()
    test_paramable(params)


    // Passing test cases (TBD: Verifier to ensure no local variables returned by ref)
    if false
        ret a
    if false
        ret A1Parameter()

    @a1 AParamable = A1Parameter()
    test_paramable(A1Parameter())

    // Failing test cases
    //test_paramable(3)
    //if false
    //    ret 3
    //@b1 AParamable = Int()
    //@c1 AParamable = A1ParameterNot1()
    //@d1 AParamable = A1ParameterNot2()

    // TBD: Should this be allowed since ints are Printable?
    //      Compiler would need to write an adapter?
    //test_printPrintable(ints) // TBD: Should this be allowed?
    

    @ints = List<Int>()
    test_printable(1)
    test_printable(1.0)
    test_printable("hello")

    // TBD: Need correct assembly
    test_multiPrintableOverload(1,   1, 0 Byte, "x")
    test_multiPrintableOverload(1.0, 1, 0 Byte, 2.3 F32)

    // TBD: Still working on this
    test_printInts(ints)

    @intSpan = Span<Int>()
    test_printInts(intSpan)

    // TBD: Generic interfaces, etc
    //test_printGeneric(ints)

fun test_paramable(p AParamable)
    @x = p.takePointer(nil)

fun test_for()
    @list = List<Int>()
    for @i in list
        @istr = i.toStr

fun test_printable(x Printable)
    @item = x.toStr
    Log.info("Item={item}")

fun test_multiPrintableOverload(a Int, b Int, c Printable, d Printable)
    Log.info("Item={a},{b},{c},{d}")
fun test_multiPrintableOverload(a Float, b Int, c Printable, d Printable)
    Log.info("Item={a},{b},{c},{d}")

fun test_printInts(x GetIterator<Int>)
    @i = x.getIterator
    while i.next()@item
        @s = item.toStr
        Log.info("Item={s}")

fun test_printPrintable(x mut GetIterator<Printable>)
    @i = x.getIterator
    while i.next()@item
        @s = item.toStr
        Log.info("Item={item}")


fun test_printGeneric<T Printable>(x mut GetIterator<T>)
    @i = x.getIterator
    while i.next()@item
        @s = item.toStr()
        Log.info("Item={s}")

fun aaa_arith(a Int, b Int, c mut aaa_arith_test) Int
    Log.info("Hello world: 2+2 is " + (2 + 2).toStr)
    @x = a+b
    @y = a*b
    Log.info("X is " + x.toStr + ", Y is " + y.toStr)
    @tuples = List<(Int, Str)>()
    tuples.push((1, "Hello"))
    @tupleElement = tuples[0]    
    @hold
    if x < y
        @q = -1
        Log.info("if x < y" + q.toStr)
        hold = q
    elif x > y
        @q = 1
        Log.info("elif x > y")
        hold = q
    else
        @q = 0
        Log.info("else x == y")
        hold = q
    Log.info("Answer: " + hold.toStr)

    @q2 = c.bref.e

    c.property = 10
    
    ret y + c.b.e + c.property

fun MyGenericInt<T Number<Int>>()
    @a = T()
    @c = T.One
    @d = One

fun MyGeneric<T Number<T>>()
    @a = T()
    @c = T.One
    @d = One
    @x = T() + Zero


type aaa_arith_test
    a Int
    b aaa_arith_test2
    c Int
    _property Int
    
fun get (my aaa_arith_test) property() Int
    ret my._property
fun set (my aaa_arith_test) property(d Int)
    my._property = d

fun get (my aaa_arith_test) bref() mut &aaa_arith_test2
    ret my.b

type aaa_arith_test2
    d Int
    e Int
    f Int
 


fun test_listMap()
    @a = List<Float>()
    @c = a.map<Float,Int>(i => i.toIntMask)


fun test_forEach(args Array<Str>)
    @sum = 0
    @list List<Int>
    list.forEach(item => { sum += item })


// https://stackoverflow.com/questions/1825952/how-to-create-a-generic-extension-method
fun (my Iterator<Item>) alphaLengthWise<Item, L>(lengthProvider fun(t Item) L) Iterator<Item>
    ret my.orderBy<Item, L>(a => lengthProvider(a))
        .thenBy<Item, L>(a => a)
fun (my Iterator<Source>) orderBy<Source,Key>(keySelector fun(i Source)Key) Iterator<Source>
    todo
fun (my Iterator<Source>) thenBy<Source,Key>(keySelector fun(i Source)Key) Iterator<Source>
    todo

fun (my Iterator<T>) find<T>(f fun(item T) Bool) mut ?&T
    while my.next()@item
        if f(item)
            ret &item // TBD: Require `&` here
    ret nil


// Simple selection sort
fun (my Span<T>) test_selectionSort<T>(lessThan fun(a T,b T)Bool)
    for @i in 0..my.len-1
        @lowElem = my[i]
        @lowIndex = i
        for @j in i+1..my.len
            if lessThan(my[j], lowElem)
                lowElem = my[j]
                lowIndex = j
        if lowIndex != i
            my[lowIndex] = my[i]
            my[i] = lowElem

type AA<T1,T2,T3>
    a T1

type MyPoint<T1,T2,T3>
    a T1
    b T2
    c T3
    x (Int, T1, Int)
    y (a Int, b T1, c Int, d (r Int, b Int))

type interface GetIterator2<Item>
    fun self.iterator2() Iterator<Item>

type interface GetMap<Item1,Item2>
    fun self.getMap() Map<Item1, Item2>
    fun self.getMapKeys() Iterator<Item1>
    fun self.getMapValues() Iterator<Item2>

type interface Getter
    fun get self.myGet() I32
    fun self.myFun() I32

type interface Getter2<T>
    fun get self.myGet2() T
    fun self.myFun2() T
    fun self.myFun2Ns() T
    fun myFun2Stat() T

type interface MyAdd<T>
    fun self.myAddNotStatic(a T, b T) T
    fun myAddStatic(a T, b T) T

fun getMapFun<K,V>() Map<V,K>
    ret Map<V,K>()

fun myFun2Interf<T>(i T) T todo

fun takeFun(i fun(a Int)Int) todo

type interface GetHash
    fun self.getHash() U32

fun test_tuples()
    @tuples = List<(Int, Str)>()
    tuples.push((1, "Hello"))
    @tupleElement = tuples[0]
    
    @tuplesNamed = List<(x Int,  y Str)>()
    tuplesNamed.push((1, "Hello"))
    @tuplesNamedElement = tuplesNamed[0]
    @element = tuplesNamedElement.x

fun AAAAA<X,
        T Number<T> + GetHash + GetIterator<Int> + GetIterator2<Int> + GetMap<F32,Float> + Iterator<Int>,
        Q Number<Q> + Getter + Getter2<Int> + MyAdd<Q>
        >(t T, q Q, intf1 Iterator<I32>, intf2 GetHash, mgQ Getter2<Q>, mgF Getter2<Float>, myGetter Getter)

    // Source code symbols should be non-generic
    @next3 = q.myGet2           // Int
    @next4 = q.myFun2Ns()       // Int
    @next5 = Q.myFun2Stat()     // Int
    @next6 = q.myGet            // I32
    @next7 = q.myFun()          // I32
    @addTestQ = q + q           // #2
    @mulTestT = t * t           // #1

    
    @next1 = t.next()           // ?Int
    @gotq = myFun2Interf(q)     // #2
    @gotInt = myFun2Interf(3)   // Int  - myFun2Interf not linked to specialized
    @next2 = intf1.next()       // ?I32 - Next is linked to generic
    @myGet = q.myGet            // I32
    @myGetter2 = myGetter.myGet // I32
    @myGet2 = q.myGet2          // Int
    @mgGet2a = mgQ.myGet2       // #2
    @mgGet2F = mgF.myGet2       // Float
    @mgFun2F = mgF.myFun2()     // Float
    @myPoint = MyPoint<Int,Float,F32>().b   // Float

    @intf2b = intf2.getHash()   // U32
    @myAddNs = q.myAddNotStatic(Q(),Q())    // #2
    @myAdd = Q.myAddStatic(Q(),Q())         // #2
    @myFun = q.myFun()          // I32
    @myFun2 = q.myFun2()        // Int
    @getMap = t.getMap()        // Map<F32,Float>
    @getMapFunc = getMapFun<I32,U32>()  // Map<U32,I32>
    @getMapKeys = t.getMapKeys()        // Iterator<F32>
    @getMapValues = t.getMapValues()    // Iterator<Float>
    @iter1 = t.getIterator                 // Iterator<Int>
    @iter2 = t.iterator2()              // Iterator<Int>
    @first = iter1.next()               // ?Int
    @x = 1
    @y = 2
    @z1 = x + y
    @z2 = _opAdd(x, y)
    @a = T()
    @b = T()
    @z3 = a + b                 // #1
    @z4 = _opAdd(a, b)
    @z5 = T.One
    @iter3 = t.getIterator()

    // TBD: Resolve multiple interface implementations, which is
    //      allowed since they would be resolved when called
    //@aa = t.getHash()           // U32
    //@z6 = T().getHash()

    for @item in t
        @itemt = item           // Int


fun MyFun1<T1,T2,T3>(a T1, b T2, c T3)(x T2, y T3)
    @q = b
    ret (T2(), T3())

fun MyFun2<I,O>(i I) O
    ret O()

fun MyFun3<I,O>(i Int) O
    ret O()

fun MyFun4<T0,T1,T2,T3>(i Int) List<T2>
    ret List<T2>()

fun MyFun5<T0,T1,T2,T3>(i Int)(a List<T1>, b List<T3>)
    ret (List<T1>(), List<T3>())

fun inferMap<T1,T2>(a Map<T1,T2>, b List<T2>)(x T1, y T2)
    ret (T1(), T2())

fun Test<X0,X1,X2,X3>()
    @infer1 = MyFun1(0, "", 0.0)
    @infer2 = MyFun1(0, List<Int>(), 0)
    @infer3 = MyFun1(0, List<X2>(), 0.0)
    @infer4 = inferMap(Map<Int,Str>(), List<Str>())
    @f1 = MyFun2<Int, Float>(0)
    @f2 = MyFun3<Int,Float>(1)
    @f3 = MyFun3<Float,Int>(1)
    @f4 = MyFun4<Float,Int,List<X3>,U32>(1)
    @f5 = MyFun5<Float,Int,Str,U64>(1)
    @a = MyPoint<Int,Float,Str>()
    @b = MyPoint<X2, List<X3>, Map<X1,X3>>()
    @c = MyFun1<Int, MyPoint<Int,Int,Int>, Str>(0, MyPoint<Int,Int,Int>(), "hello")
    @d = MyFun1<Int, MyPoint<Int,X3,Int>, Str>(0, MyPoint<Int,X3,Int>(), "hello")
    @e = MyFun2<X2,X3>(X2())
    @g = MyFun2<Int,Float>(0)
    @h = MyFun2<Float,Int>(0.0)
    @f4a = MyFun4<Int,Str,F32,U64>(0)
    @f5a = MyFun5<Int,Str,F32,U64>(0) 
    @i Size<Int> = Size<Int>(0,0)  
    @k Float = 0.0
    @l Float = 0Float
    @p1 = Xuint()
    @p2 = castPointer<RawPointer<Byte>>(p1)
    @p3 = castPointer<RawPointer<Int>>(p2)
    @p4 = castPointer<Xuint>(p3)
    @t = (0,1,2)
    @toSize = Point<F32>().toSizeTest

type OneGeneric<T> { } 

fun get (my Point<T>) toSizeTest<T>() Size<T>
    @a = Size<T>(T(),T())
    @b = Size<T>()
    @c = Size(my.x, my.y)
    @d = Size(0,0)
    ret c





fun helloVoid() {}
fun helloInt() Int {}
fun cos2(a Int)(x Float, y Int) {}
 
fun test(x Float)
    @a = 3
    @b = x
    @c = x == 3.0
    @z = cos2(1)
    @d = cos2(3)
    @e = d.x
    @f = helloVoid()
    @g = helloInt()
    Log.info("Hello world, 2+2={2+2}")
    @h = cos(2.0+3.0*23.0).toStr


type AAAA<T>
    v Void

type BBBB
    v Void
        
fun (my BBBB) BBBB_fm1() {}
fun (my BBBB) BBBB_fm2(a BBBB) {}
    


fun (my AAAA<Int>) AAAA_fm() {}
fun (my AAAA<T>) AAAA_fm<T>() {}
fun (my BBBB) AAAA_fm() {}

fun AAAA_f() {}

fun (my BBBB) AAAA_fe2(a BBBB) {}

// TBD: AAAA should not conflict with AAAA typename
//      must be resolved before moving methods to module level
fun (my aapoint) AAAA() {}
fun (my aapoint) BBBB() {}
fun (my aapoint) AAAB() {}
fun (my List<T>) X<T>() {}
fun (my Int) X() {}
    

type aapoint
    v Void
    
type bbpoint
    v Void

[pub] fun (my aapoint) x() {}

[pub] fun (my bbpoint) xx() {}

[pub] fun (my aapoint) y() {}
[pub] fun (my bbpoint) yy() {}

  
[pub] type AAFun    
    aaf4 fun(a Int, b Int) Int
    aaf5 AAFunc<Int, Int>
    aaf6 fun()()
    aaf7 fun()
    aaf8 fun()Int
    aaf9 fun(a Int)
    aaf9a fun(a Int) Int
    aaf9b fun(a Int)(x Int)
    af10 fun(v Int)Int

fun (my AAFun) aaaa(a Int, b Int) Int { }
fun (my AAFun) aaaa(a Int, b Float) Int { }
fun (my AAFun) aaaa(x Float, y Int) Int { }
fun (my AAFun) aaf1(a Int, b Int)Int { }
fun (my AAFun) aaf2(v AAFunc<Int, Int>) { }
fun (my AAFun) aaf3<T1,T2>(i T1)T2 { }
fun (my AAFun) aaf1s(a Int, b Int)Int { }
fun (my AAFun) aaf2s(v AAFunc<Int, Int>) { }
fun (my AAFun) aaf3s<T1,T2>(i T1)T2 { }
fun (my AAFun) af6(p fun(v Int)Bool) {}
fun (my AAFun) af7<X>(p fun(v X)Bool) {}


[pub] type AAFunc<T1,T2>
    Invoke fun (v T1) T2


// TBD: These are identical to the ones defined in the class
fun (my AGenericTest<T,QQQ>) af6<T,QQQ>(p fun(v Int)Bool) {}
//fun AGenericTest<T, QQQ>.af7<X>(p fun(v X)Bool) {}
//fun AGenericTest<T, QQQ>.af8<T1,T2>(i T1)T2 { }
//fun AGenericTest<T, QQQ>.Q<T1>() {}
//[pub] fun AGenericTest<T, QQQ>.new()
//    todo
//[pub] fun AGenericTest<T, QQQ>.new(a Int)
//    todo
//[pub] fun AGenericTest<T, QQQ>.aaa(a Zurfur.Draw2d.Size<Int>) {}
//[pub] fun AGenericTest<T, QQQ>.P1() { ret 0 }
//[pub] fun AGenericTest<T, QQQ>.P2()() { ret 0}
//[pub] fun P2<Quack>(a Quack, b QQQ) { ret (a.ToStr() + b.ToStr()).Length; }
//[pub] fun AGenericTest<T, QQQ>.P3<Z>() { ret 0; }
//[pub] fun AGenericTest<T, QQQ>.P4<Quack, Quack1>() { ret 0; }
//[pub] fun AGenericTest<T, QQQ>.fun9(a *?OneGeneric<List<Int>>) { }

//[pub] fun AGenericTest<T, QQQ>.UseIt(x Zurfur.Int, y List<Inner1<Int,Int>>, z List<Str>)
//    XField0.ToStr()
    // Xfield2<Str, T>.P3<T>(); - Xfield2 can't use type parameters
    // Xfield2.P3(); - Can't infer P3<type>
//    Xfield2.P3<T>()
//    @a = List<Str, Outer<Int, Int>>()
//    Inner1<Str, Byte>.Inner2<short, ushort>.Hello = 1
//    Outer<T, QQQ>.Inner1<Str, Byte>.Inner2<short, ushort>.Hello = 2
//    Outer<QQQ, T>.Inner1<Str, Byte>.Inner2<short, ushort>.Hello = 3
//    Outer<long, ulong>.Inner1<T, decimal>.Inner2<QQQ, Byte>.Hello = 4
//    @p = AGenericTest<long, ulong>.Inner1<T, decimal>.Inner2<QQQ, Byte>()
//    p.P5<short, QQQ, ushort>(3, QQQ(), 0)
//[pub] fun (AGenericTest<T, QQQ>.Inner1<Ta, Qa>) P1(a T, b QQQ, c Ta, d Qa)
//    ret 0

type interface ToStr
    fun get self.toStr() Str

[pub] fun GenericTest<Q1 ToStr,Q2 ToStr>(a Q1, b Q2) Int
    ret a.toStr.len + b.toStr.len    

[pub] type AGenericTest<T, QQQ Equatable<T>> // TBD: new() where T : new()
    
    af0 fun()()
    af1 fun()
    af2 fun()Int
    af3 fun(a Int)
    af4 fun(a Int) Int
    af5 fun(a Int)(x Int)
    
    field0 T = 0
    Xfield6 Zurfur.Int

    