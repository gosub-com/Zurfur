
mod Zurfur

use Zurfur[Copy, Iterator, Number]
use Zurfur.Math[abs]

// TBD: Default constructor taking low and high
[pub]
type struct Range<T Number<T>>
    low T
    high T

[pub]
fun (my Range<T>) new<T>(low T, high T)
    // TBD: (r.low, r.high) = (low, high)
    my.low = low
    my.high = high

[pub]
fun get (my Range<T>) length<T Number<T>>() T // TBD: Use constraints from `Range`
    ret my.high-my.low

[pub]
fun get (my Range<T>) getIterator<T>() RangeIterator<T>
    ret RangeIterator<T>(my.low, my.high)
        
[pub]
type RangeIterator<T Number<T>>
    current T pub init
    high T pub init

[pub]
fun (my RangeIterator<T>) new<T>(low T, high T)
    // TBD: (my.current, my.high) = (low, high)
    my.current = low
    my.high = high

[pub]
fun (my mut RangeIterator<T>) next<T Number<T>>() ?T
    if my.current >= my.high
        ret nil
    @prev = my.current
    my.current += T.One
    ret Maybe<T>(prev)
        