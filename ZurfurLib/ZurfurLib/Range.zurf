
mod Zurfur

use Zurfur[Copy, Iterator, Number]

// TBD: Default constructor taking low and high
[pub]
type struct Range<T>
where T Number<T>
    low T
    high T

    [pub, implicit]
    fun get asIterator() RangeIterator<T>
        return RangeIterator<T>(self.low, self.high)


[pub]
fun new<T>(my Range<T>, low T, high T)
    // TBD: (r.low, r.high) = (low, high)
    my.low = low
    my.high = high

[pub]
fun get length<T>(my Range<T>) T // TBD: Use constraints from `Range`
where T Number<T>
    return my.high-my.low
        
[pub]
type RangeIterator<T>
where T Number<T>
    current T pub init
    high T pub init

[pub]
fun new<T>(my RangeIterator<T>, low T, high T)
    // TBD: (my.current, my.high) = (low, high)
    my.current = low
    my.high = high

[pub]
fun next<T>(my mut RangeIterator<T>) ?T
where T Number<T>
    if my.current >= my.high
        return nil
    @prev = my.current
    my.current += T.One
    return Maybe<T>(prev)
        