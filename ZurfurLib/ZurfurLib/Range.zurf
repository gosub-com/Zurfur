
mod Zurfur

use Zurfur[Copy, Iterator, NumOps]
use Zurfur.Math[abs]

[pub]
type Range<T> copy
    where T has NumOps<T>
    low T
    high T

[pub]
fun new<T>(r Range<T>, low T, high T)
    r.low = low
    r.high = high
    // TBD: (r.low, r.high) = (low, high)

fun abs(i int) int
    ret 3

// TBD: Shortcut syntax
type Abs<T> interface
    [static] fun abs(n T) T

// Absolute length of range: abs(high-low)
// TBD: Allow individual functions in the where clause
[pub]
fun get length<T>(my r Range<T>) T
    where T has Abs<T> + NumOps<T> // TBD: Use constraints from `Range`, ALSO: fun abs(n T) T 
  
    // Alternatively:
    //      return if(r.low <= r.high, r.low : r.high) 
    ret T.abs(r.high-r.low)

[pub]
fun get iterator<T>(my r Range<T>) RangeIterator<T>
    ret RangeIterator<T>(r.low, r.high)
        
[pub]
type RangeIterator<T>
    where T has NumOps<T>
    
    current T pub init
    high T pub init

[pub]
fun new<T>(r RangeIterator<T>, low T, high T)
    // TBD: (my.current, my.high) = (low, high)
    r.current = low
    r.high = high

[pub]
fun next<T>(my r mut RangeIterator<T>) ?T
    where T has Abs<T> + NumOps<T>
    
    if r.current >= r.high
        ret nil
    @prev = r.current
    r.current += T.One
    ret Maybe<T>(prev)
        