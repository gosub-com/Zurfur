
mod Zurfur

use Zurfur[Copy, Iterator, NumOps]
use Zurfur.Math[abs]

[pub]
type Range<T> copy
    where T has NumOps<T>
    low T
    high T

[pub]
fun Range.new<T>(low T, high T)
    my.low = low
    my.high = high
    // TBD: (r.low, r.high) = (low, high)

[pub]
fun get Range.length<T>() T
    where T has NumOps<T> // TBD: Use constraints from `Range`, ALSO: fun abs(n T) T 
    ret my.high-my.low

[pub]
fun get Range.iterator<T>() RangeIterator<T>
    ret RangeIterator<T>(my.low, my.high)
        
[pub]
type RangeIterator<T>
    where T has NumOps<T>
    
    current T pub init
    high T pub init

[pub]
fun RangeIterator.new<T>(low T, high T)
    // TBD: (my.current, my.high) = (low, high)
    my.current = low
    my.high = high

[pub]
fun mut RangeIterator.next<T>() ?T
    where T has NumOps<T>
    
    if my.current >= my.high
        ret nil
    @prev = my.current
    my.current += T.One
    ret Maybe<T>(prev)
        