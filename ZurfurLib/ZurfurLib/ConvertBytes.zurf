
// Low level byte conversions are little endian regardless
// of platform.  Floating point formats are IEEE.
//
// Most conversions have 3 overloads:
//     bytesToType(my s Span<byte>)
//     setBytesType(my s Span<byte>, value type)
//     pushBytesType(my s List<byte>, value type)
//
// Examples:
//     @myU32 = myList[index::4].bytesToU32()
//     myList[index::4].setBytesU32(myU32)
//     myList.pushBytesU32(myU32)
//
mod Zurfur.ConvertBytes


fun Test_ConvertExample()
    @myList = List<byte>()
    @myU32 u32 = myList[0..4].bytesToU32()
    myList[0..4].setBytesU32(myU32)
    myList.pushBytesU32(myU32)


[pub] fun bytesToHex(my s Span<byte>, capitalize bool = false) str todo
[pub] fun pushBytesToHex(my l mut List<byte>, bytes []byte, capitalize bool = false) todo
[pub] fun pushHexToBytes(my l mut List<byte>, hex []byte) !void todo


// Convert 4 bytes (u32) to int (little endian)
[pub]
fun bytesToU32(my s Span<byte>) u32
    require(s.len == 4)
    ret     s[0].toU32
            + (s[1].toU32 << 8)
            + (s[2].toU32 << 16)
            + (s[3].toU32 << 24)

// Convert u32 to 4 bytes (little endian) 
[pub]
fun setBytesU32(my s mut Span<byte>, v u32)
    require(s.len == 4)
    s[0] = v.toByteMask
    s[1] = (v<<8).toByteMask
    s[2] = (v<<16).toByteMask
    s[3] = (v<<24).toByteMask

// Convert u32 to 4 bytes (little endian) and push to list
[pub]
fun pushBytesU32(my l mut List<byte>, v u32)
    l.pushClones<byte>(byte(), 4)
    l[l.len-4..+4].setBytesU32(v)


[pub]
fun bytesToI32(my s Span<byte>) i32
    require(s.len == 4)
    ret s.bytesToU32().toI32Mask
    
[pub]
fun setBytesI32(my s mut Span<byte>, v i32)
    require(s.len == 4)
    s.setBytesU32(v.toU32Mask)
    
[pub]
fun pushBytesI32(my l mut List<byte>, v i32)
    l.pushBytesU32(v.toU32Mask)

[pub]
fun bytesToU16(my s Span<byte>) u16
    require(s.len == 2)
    todo
    
[pub]
fun setBytesU16(my s mut Span<byte>, v u16)
    require(s.len == 2)
    todo

[pub]
fun  pushBytesU16(my l mut List<byte>, v u16)
    require(false, "not implemented")
    
[pub]
fun bytesToI16(my s Span<byte>) i16
    require(s.len == 2)
    todo
    
[pub]
fun setBytesI16(my s mut Span<byte>, v i16)
    require(s.len == 2)
    todo
    
[pub]
fun pushBytesI16(my l mut List<byte>, v i16) todo

[pub]
fun bytesToU64(my s mut Span<byte>) u64
    require(s.len == 8)
    todo
    
[pub]
fun setBytesU64(my s mut Span<byte>, v u64)
    require(s.len == 8)
    todo
    
[pub]
fun pushBytesU64(my l mut List<byte>, v u64) todo

[pub]
fun bytesToInt(my s Span<byte>) int
    require(s.len == 8)
    todo
    
[pub]
fun setBytesInt(my s mut Span<byte>, v int)
    require(s.len == 8)
    todo
    
[pub]
fun pushBytesInt(my l mut List<byte>, v int) todo

[pub]
fun bytesToF32(my s Span<byte>) f32
    require(s.len == 4)
    todo
    
[pub]
fun setBytesF32(my s mut Span<byte>, v f32)
    require(s.len == 4)
    todo
    
[pub] fun pushBytesF32(my l mut List<byte>, v f32) todo

[pub]
fun bytesToFloat(my s Span<byte>) float
    require(s.len == 8)
    todo
    
[pub]
fun setBytesFloat(my s mut Span<byte>, v float)
    require(s.len == 8)
    todo
    
[pub]
fun pushBytesFloat(my l mut List<byte>, v float) todo

   