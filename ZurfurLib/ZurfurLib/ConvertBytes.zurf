
// Low level Byte conversions are little endian regardless of platform.
// Floating point formats are IEEE.
//
// Conversions are in the forms of:
//      getBytesType(my Span<Byte>, index Int)
//      setBytesType(my mut Span<Byte>, index Int, value Type)
//      readBytesType(my Reader)
//      writeBytesType(my Writer, value type)
//
mod Zurfur.ConvertBytes

use Zurfur.Io[Reader,Writer]

fun Test_ConvertExample()
    let myList = List<Byte>()
    myList.writeBytesInt64(1)
    myList.writeBytesInt64(2)

    myList.setBytesInt64(0, 10)
    myList.setBytesInt64(8, 20)
    
    let myInt10 = myList.getBytesInt64(0)
    let myInt20 = myList.getBytesInt64(8)

    let myReader = myList.asReader
    let myInt10a = myReader.readBytesInt64
    let myInt20a = myReader.readBytesInt64
    


[pub] fun writeBytesHex(my Writer, bytes Span<Byte>, capitalize Bool = false)! todo


// Read 8 bytes from the stream, convert to an int in little endian
[pub] fun readBytesInt64(my Reader) !Int
    var bytes = Span<Byte>(8)
    my.readExact(bytes)!
    return bytes.getBytesInt64(0)

[pub] fun writeBytesInt64(my Writer, value Int)!
    var bytes = Span<Byte>(8)
    bytes.setBytesInt64(0, value)
    my.write(bytes)!


// Convert 4 bytes (U32) to Int (little endian)
[pub] fun getBytesInt64(my Span<Byte>, index Int) Int
    let s = my[index..+8]
    return     s[0].toInt
            | (s[1].toInt << 8)
            | (s[2].toInt << 16)
            | (s[3].toInt << 24)
            | (s[4].toInt << 32)
            | (s[5].toInt << 40)
            | (s[6].toInt << 48)
            | (s[7].toInt << 56)

// Convert U32 to 4 bytes (little endian) 
[pub] fun setBytesInt64(my mut Span<Byte>, index Int, value Int)
    var s = my[index..+8]
    s[0] = value // TBD: Should be error
    s[0] = value.toByteMask
    s[1] = (value<<8).toByteMask
    s[2] = (value<<16).toByteMask
    s[3] = (value<<24).toByteMask
    s[4] = (value<<32).toByteMask
    s[5] = (value<<40).toByteMask
    s[6] = (value<<48).toByteMask
    s[7] = (value<<56).toByteMask

   