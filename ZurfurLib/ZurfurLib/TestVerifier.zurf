// Misc compiler testing
mod TestVerifier

use Zurfur

// Comment out the next line to see verification errors
pragma NoParse
pragma ShowParse

// Disable compiler type checking so we can see verifier errors
pragma NoCompilerChecks

type OneGeneric<T> { } // No error expected here

type VerifyErrors<T>
    // Undefined/unresolved
    field1 hello
    field2 List<List<hello>>
    
    // Wrong number of type parameters
    a List
    b List<Int,Int>
  
// Duplicate
fun .VerifyErrors<T>(my VerifyErrors<T>) Void {} // TBD: Don't allow same name
fun .Y<T>(my VerifyErrors<T>, Y Int) Void {}
fun .X<T>(my VerifyErrors<T>, T Int) Void {} // TBD: Verifier should catch this
fun .IllegalGenericOverload<T, X>(my VerifyErrors<T>, a Int) Void { }
fun .IllegalGenericOverload<T>(my VerifyErrors<T>, a Byte) Void { }

fun .BadOverload<T>(my VerifyErrors<T>, a Int) {  } // Dummy
fun .BadOverload<T>(my VerifyErrors<T>, a Int) Int{  } // TBD: This overload should fail 

// Undefined/unresolved
fun .F4<T>(my VerifyErrors<T>, a List<Int,hello>) Void { }
fun .F5<T>(my VerifyErrors<T>, a List<List<x>>) Void { }

// Wrong number of type parameters
fun .F1<T>(my VerifyErrors<T>, a List) Void { }
fun .F3<T>(my VerifyErrors<T>, a List<Int,Int>) Void { }

fun .fun1<T>(my VerifyErrors<T>, a List<List<x>>) Void { } // Undefined generic symbol
fun .fun2<T>(my VerifyErrors<T>, a List) Void { } // Wrong number of generic parameters
fun .fun3<T>(my VerifyErrors<T>, a List<Int,Int>) Void { } // Wrong number of generic parameters
fun .fun4<T>(my VerifyErrors<T>, a List<List>) Void { } // Wrong number of generic parameters
fun .fun5<T>(my VerifyErrors<T>, a List<List<Int,Int>>) Void { } // Wrong number of generic parameters
fun .fun6<T>(my VerifyErrors<T>, a Zurfur) Void {} // Symbol is a module
fun .fun7<T>(my VerifyErrors<T>, a field1) Void {} // Symbol is a field
fun .fun8<T>(my VerifyErrors<T>, a fun1) Void {} // Symbol is a method
fun .fun9<T>(my VerifyErrors<T>, a *?OneGeneric) Void { }
fun .fun10<T>(my VerifyErrors<T>, a undefinedSymbol) Void {} // Symbol is undefined