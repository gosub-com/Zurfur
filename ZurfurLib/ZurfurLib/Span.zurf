

mod Zurfur

use Zurfur[Equatable]
use Zurfur.Unsafe[castPointer, RawPointer]

// []T is converted to Span<T>
[pub]
type ref Span<T>
    data ro mut &T
    len ro int


[pub] fun Span.getIterator<T>() SpanIterator<T>
    todo

[pub]
type ref SpanIterator<T>
    _data *T
    _end *T

[pub] fun SpanIterator.next<T>() ?&T
    if my._data >= my._end
        ret nil
    @r = my._data
    my._data = my._data + 1
    ret r
       
    
[pub]
fun _opIndex<T>(s Span<T>, i int) mut &T
    require(i in 0..s.len)
    todo // Implementation TBD

[pub]
fun _opIndex<T>(s Span<T>, range Range<int>) mut Span<T>
    require(range.low in 0..s.len)
    require(range.high in 0..s.len)
    require(range.low <= range.high)
    todo // Implementation TBD

      