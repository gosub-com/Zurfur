

mod Zurfur

use Zurfur[OpEq]

// []T is converted to Span<T>
[pub]
type Span<T> ref copy
    data ro mut &T
    len ro Int


[pub]
type SpanIterator<T> ref copy
    data ro mut &T
    _len ro Int
    _count ro Int
    
[pub static]
fun Span._opIndex<T>(s Span<T>, i Int) mut &T
    require(i in 0..s.len)
    todo // Implementation TBD

[pub static]
fun Span._opIndex<T>(s Span<T>, range Range<Int>) mut Span<T>
    require(range.low in 0..s.len)
    require(range.high in 0..s.len)
    require(range.low <= range.high)
    todo // Implementation TBD

[pub]
fun mut Span.sort<T>(compare fun(a T, b T)Bool)
    todo

// Set the span to `item` (or default if not specified)
[pub]
fun mut Span.clear<T>(item T = default)
    todo
    
// Find index of the sequence `seq`.
// Returns -1 if not found, or 0 if `seq` is empty.
[pub]
fun Span.find<T>(seq Span<T>) Int
        where T has OpEq<T>
    todo

// Find the index of the `item`.  Returns -1 if not found.
[pub]
fun Span.find<T>(item T) Int
        where T has OpEq<T>
    todo
    
// Find the index of the `item` when `eq` returns true.
// Returns -1 if not found.
[pub]
fun Span.find<T>(eq fun(item T) Bool) Int
    todo

        