

mod Zurfur.Io

use Zurfur.Io[FileStream]

type Reader interface
    afun mut read(data mut Span<Byte>) !Int

type Writer interface
    afun mut write(data Span<Byte>) !Int
    afun mut flush() !Void

type SeekOrigin enum
    Begin; Current; End

type Seeker interface
    fun mut seek(offset Int, origin SeekOrigin) !Int
    
[pub] fun get Seeker.length() !Int { }
[pub] fun get Seeker.position() !Int { }
[pub] fun set Seeker.position(value Int) !Void { }

// Interface or concrete type?
type FileStream interface { }

mod Zurfur.Io.File

[pub] afun open(fileName Str, mode Str="r") !FileStream { }
[pub] afun readAllText(fileName Str) !List<Str> { }
[pub] afun readAllBytes(fileName Str) !List<Byte> { }
[pub] afun writeAllText(fileName Str, data List<Str>) !Void { }
[pub] afun writeAllBytes(fileName Str, data List<Byte>) !Void { }

// TBD: It's probably better to have cancellation built
//      into the async system.  Maybe progress too.
type Progress(bytesTotal Int, bytesTransferred Int)
afun readAllText(
    fileName Str,
    progress ?fun (p Progress) = nil) !Void { }