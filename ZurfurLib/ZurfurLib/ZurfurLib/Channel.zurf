
mod Zurfur

// Experiment on how to do golang channels using async.
afun readSequence()
    // ch is captured by the closure
    @ch = Channel<Int>()
    astart produceSequence(ch)
    @sum = 0
    while ch.read()@i
        sum += i
    Log.info("The sum is ${sum}")
    

afun produceSequence(ch Channel<Int>)
    for @i in 1..+10
        ch.write(i)

// A channel is an async queue.  By default its capacity is zero which means a
// writer will always block unless there is already a reader waiting for data.
type Channel<T>
    _stuff Queue<T>

// Read an item from the channel.  Blocks if the channel is empty.  Returns
// the item synchrounously if there is already one in the queue.  Returns nil
// if the channel is closed or there is already a reader waiting on the channel.
afun Channel.read<T>() ?T extern

// Write an item to the channel.  Blocks if the channel is full.  Throws if
// the channel is closed. Complete synchrounously if possible.
afun Channel.write<T>(item T) ! extern

fun get Channel.len<T>() Int extern

fun get Channel.capacity<T>() Int extern

// Close the channel, then throw if there are any items still in the queue.
afun Channel.close<T>() ! extern

// Close the channel now if empty, or after the last item has been drained
// from the queue.  The channel is immediately closed for writing.
afun Channel.closeLater<T>() extern