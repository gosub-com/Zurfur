
mod Zurfur

use Zurfur[Iterator, Iterable, OpEq]


// Entries in the bucket list
type MapEntry(index U32, hash U32)


// Key value pair
[pub]
type KvPair<K,V>
        where K has OpEq<K>
    key K pub ref
    value V pub mut

// A map is a hash table
[pub]
type Map<K,V>
        where K has OpEq<K>
    _items List<KvPair<K,V>>
    _buckets List<MapEntry>



// TBD: Need this: fun (kv Map<K,V>.Pair) ...
[pub]
fun KvPair.new<K,V>(key own K, value own V)
    my.key = key
    my.value = value


[pub]
fun Map.new<K,V>(capacity Int)
    extern
    
[pub]
fun Map.new<K,V>(keyValues Iterator<KvPair<K, V>>)
    extern
    
[pub]
fun get Map.len<K,V>() Int
    extern

// TBD: Figure out map["Hello"] += 1
[pub static]
fun Map._opIndex<K,V>(map Map<K, V>, key K) mut ?&V
    extern

// TBD: An indexer with 3 inputs???
[pub static]
fun Map._opIndex<K,V>(map Map<K, V>, key K, item V)
    extern

[pub]
fun Map.contains<K,V>(key K) Bool
    extern

// TBD: Return Iterable<(K, V)>???
[pub]
fun get Map.iterator<K,V>() mut Iterator<KvPair<K, V>>
    extern

[pub]
fun get Map.keys<K,V>() Iterator<K>
    extern

[pub]
fun get Map.values<K,V>() mut Iterator<V>
    extern

[pub]
fun mut Map.clear<K,V>()
    extern

[pub]
fun mut Map.add<K,V>(item KvPair<K, V>)
    extern

[pub]
fun mut Map.add<K,V>(items Iterator<KvPair<K, V>>)
    extern

[pub]
fun mut Map.remove<K,V>(key K) Bool
    extern

    