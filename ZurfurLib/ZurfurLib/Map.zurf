
mod Zurfur

use Zurfur[Iterator, Equatable]


// Entries in the bucket list
type MapEntry(index U32, hash U32)


// Key value pair
[pub]
type KvPair<K Equatable<K>,V>
    key K pub ref
    value V pub mut

// A map is a hash table
[pub]
type Map<K Equatable<K>,V>
    _items List<KvPair<K,V>>
    _buckets List<MapEntry>



// TBD: Need this: fun (kv Map<K,V>.Pair) ...
[pub]
fun (my KvPair<K,V>) new<K,V>(key own K, value own V)
    my.key = key
    my.value = value


[pub]
fun (my Map<K,V>) new<K,V>(capacity Int)
    extern
    
[pub]
fun (my Map<K,V>) new<K,V>(keyValues Iterator<KvPair<K, V>>)
    extern
    
[pub]
fun get (my Map<K,V>) len<K,V>() Int
    extern

// TBD: Figure out map["Hello"] += 1
[pub]
fun _opIndex<K,V>(m Map<K,V>, key K) mut ?&V
    extern

[pub]
fun (my Map<K,V>) contains<K,V>(key K) Bool
    extern

// TBD: Return GetIterator<(K, V)>???
[pub]
fun get (my Map<K,V>) iterator<K,V>() mut Iterator<KvPair<K, V>>
    extern

[pub]
fun get (my Map<K,V>) keys<K,V>() Iterator<K>
    extern

[pub]
fun get (my Map<K,V>) values<K,V>() mut Iterator<V>
    extern

[pub]
fun (my mut Map<K,V>) clear<K,V>()
    extern

[pub]
fun (my mut Map<K,V>) add<K,V>(item KvPair<K, V>)
    extern

[pub]
fun (my mut Map<K,V>) add<K,V>(items Iterator<KvPair<K, V>>)
    extern

[pub]
fun (my mut Map<K,V>) remove<K,V>(key K) ?V
    extern

    