
mod Zurfur

use Zurfur[Iterator, Equatable]


// Entries in the bucket list
type MapEntry(index U32, hash U32)


// Key value pair
[pub]
type KvPair<K, V>
where K Equatable<K>
    key K pub ref
    value V pub mut

// A map is a hash table
[pub]
type Map<K,V>
where K Equatable<K>
    _items List<KvPair<K,V>>
    _buckets List<MapEntry>



// TBD: Need this: fun (kv Map<K,V>.Pair) ...
[pub]
fun KvPair.new<K,V>(my, key own K, value own V)
    my.key = key
    my.value = value


[pub]
fun Map.new<K,V>(my, capacity Int) extern
    
[pub]
fun Iterator.new<K,V>(keyValues Iterator<KvPair<K, V>>) extern
    
[pub]
fun get Map.len<K,V>(my) Int extern

// TBD: Figure out map["Hello"] += 1
[pub]
fun _opIndex<K,V>(m Map<K,V>, key K) mut ?&V extern

[pub]
fun Map.contains<K,V>(my, key K) Bool extern

[pub]
fun get Map.keys<K,V>(my) Iterator<K> extern

[pub]
fun get Map.values<K,V>(my) mut Iterator<V> extern

[pub]
fun Map.clear<K,V>(my mut) extern

[pub]
fun Map.add<K,V>(my mut, item KvPair<K, V>) extern

[pub]
fun Map.add<K,V>(my mut, items Iterator<KvPair<K, V>>) extern

[pub]
fun Map.remove<K,V>(my mut, key K) ?V extern

    