
// Basic shapes for use with 2d drawing library.
// Point, Size, Rect.
// TBD: Vec2, Vec3, Vec4 for 3d, is Point same as Vec2?
mod Zurfur.Draw2d

use Zurfur[NumOps]

fun test_Shape()
    @rect = Rect<Int>(1,2,3,4) // TBD: Type inderence for constructors
    
    rect.location.y = 30
    @rl1 = rect.location
    @rly1 = rect.location.y
    @rly2 = rect.location.x2

    @rl2a = rect.lf()
    @rl2b = rect.lf().yf()
    
    

[pub]
type Point<T> copy
        where T has NumOps<T>
    x T
    y T

// Identical to a field
fun get Point.x2<T>() mut ref T
    return ref my.x

[pub]
type Size<T> copy
        where T has NumOps<T>
    width T
    height T

[pub]
type Rect<T> copy
        where T has NumOps<T>
    // TBD: use location Point<T>
    //      use size Size<T>
    location Point<T>
    size Size<T>

// Identical to fields (not necessary when we have 'use location Point<T>' syntax)
[pub]
fun get Rect.x<T>() mut ref T
    return ref my.location.x
[pub]
fun get Rect.y<T>() mut ref T
    return ref my.location.y
[pub]
fun get Rect.width<T>() mut ref T
    return ref my.size.height
[pub]
fun get Rect.height<T>() mut ref T
    return ref my.size.width


[pub]
fun Point.new<T>(x T, y T)
    // TBD: (my.x, my.y) = (x, y)
    my.x = x
    my.y = y


[pub]
fun Point.toSize<T>() Size<T>
    return Size<T>(my.x, my.y)

// TBD: Remove
fun Point.yf<T>() T
    return my.y


[pub static]
fun Point._opAdd<T>(a Point<T>, b Point<T>) Point<T>
        where T has NumOps<T> // TBD: Use constraints from `Point`
    return Point(a.x+b.x, a.y+b.y)

[pub static]
fun Point._opNeg<T>(a Point<T>) Point<T>
        where T has NumOps<T> // TBD: Use constraints from `Point`
    return Point(-a.x, -a.y)

[pub static]
fun Point._opSub<T>(a Point<T>, b Point<T>) Point<T>
        where T has NumOps<T> // TBD: Use constraints from `Point`
    return Point(a.x-b.x, a.y-b.y)

[pub static]
fun Point._opMul<T>(a T, b Point<T>) Point<T>
        where T has NumOps<T> // TBD: Use constraints from `Point`
    return Point(a*b.x, a*b.y)

[pub static]
fun Point._opMul<T>(a Point<T>, b T) Point<T>
        where T has NumOps<T> // TBD: Use constraints from `Point`
    return Point(a.x*b, a.y*b)

[pub static]
fun Point._opDiv<T>(a T, b Point<T>) Point<T>
        where T has NumOps<T> // TBD: Use constraints from `Point`
    return Point(a/b.x, a/b.y)

[pub static]
fun Point._opDiv<T>(a Point<T>, b T) Point<T>
        where T has NumOps<T> // TBD: Use constraints from `Point`
    return Point(a.x/b, a.y/b)

[pub]
fun Size.new<T>(width T, height T)
    // TBD: (my.width, my.height) = (width, height)
    my.width = width
    my.height = height
    
[pub]
fun Size.toPoint<T>() Point<T>
    return Point(my.width, my.height)


// TBD: Shortcut syntax for this:
[pub]
fun Rect.new<T>(x T, y T, width T, height T)
    my.x = x
    my.y = y
    my.width = width
    my.height = height
    
[pub]
fun Rect.new<T>(location Point<T>, size Size<T>)
    my.location = location
    my.size = size


// TBD: Operators (add, multiply, divide, sizes, etc.)

[pub]
fun get Rect.left<T>() T
    return my.x
    
[pub]
fun get Rect.right<T>() T
        where T has NumOps<T> // TBD: Use constraints from `Point`
    return my.x + my.width

[pub]
fun get Rect.top<T>() T
    return my.y
    
[pub]
fun get Rect.bottom<T>() T
        where T has NumOps<T> // TBD: Use constraints from `Point`
    return my.y + my.height
    
// TBD: Remove
[pub]
fun Rect.lf<T>() Point<T>
    return Point(my.x, my.y)
    