
// Basic shapes for use with 2d drawing library.
// Point, Size, Rect.
// TBD: Vec2, Vec3, Vec4 for 3d, is Point same as Vec2?
mod Zurfur.Draw2d

use Zurfur[NumOps]

fun test_Shape()
    @rect = Rect<int>(1,2,3,4) // TBD: Type inderence for constructors
    
    rect.location.y = 30
    @rl1 = rect.location
    @rly1 = rect.location.y
    @rly2 = rect.location.x2

    @rl2a = rect.lf()
    @rl2b = rect.lf().yf()
    
    

[pub]
type Point<T> copy
    where T has NumOps<T>
    x T
    y T

// Identical to a field
fun get x2<T>(my p Point<T>) mut &T
    ret &p.x // TBD: Require `&`, do not allow just `my.x`

[pub]
type Size<T> copy
    where T has NumOps<T>
    
    width T
    height T

[pub]
type Rect<T> copy
    where T has NumOps<T>
    
    // TBD: use location Point<T>
    //      use size Size<T>
    location Point<T>
    size Size<T>

// Identical to fields (not necessary when we have 'use location Point<T>' syntax)
[pub]
fun get x<T>(my r Rect<T>) mut &T
    ret &r.location.x // TBD: Require `&`
[pub]
fun get y<T>(my r Rect<T>) mut &T
    ret &r.location.y // TBD: Require `&`
[pub]
fun get width<T>(my r Rect<T>) mut &T
    ret &r.size.height // TBD: Require `&`
[pub]
fun get height<T>(my r Rect<T>) mut &T
    ret &r.size.width // TBD: Require `&`


[pub]
fun new<T>(p Point<T>, x T, y T)
    // TBD: (my.x, my.y) = (x, y)
    p.x = x
    p.y = y


[pub]
fun toSize<T>(my p Point<T>) Size<T>
    ret Size<T>(p.x, p.y)

// TBD: Remove
fun yf<T>(my p Point<T>) T
    ret p.y


[pub]
fun _opAdd<T>(my a Point<T>, b Point<T>) Point<T>
    where T has NumOps<T> // TBD: Use constraints from `Point`
    ret Point(a.x+b.x, a.y+b.y)

[pub]
fun _opNeg<T>(my p Point<T>, a Point<T>) Point<T>
    where T has NumOps<T> // TBD: Use constraints from `Point`
    ret Point(-a.x, -a.y)

[pub]
fun _opSub<T>(my a Point<T>, b Point<T>) Point<T>
    where T has NumOps<T> // TBD: Use constraints from `Point`
    ret Point(a.x-b.x, a.y-b.y)

[pub]
fun _opMul<T>(a T, my b Point<T>) Point<T>
    where T has NumOps<T> // TBD: Use constraints from `Point`
    ret Point(a*b.x, a*b.y)

[pub]
fun _opMul<T>(my a Point<T>, b T) Point<T>
    where T has NumOps<T> // TBD: Use constraints from `Point`
    ret Point(a.x*b, a.y*b)

[pub]
fun _opDiv<T>(a T, my b Point<T>) Point<T>
    where T has NumOps<T> // TBD: Use constraints from `Point`
    ret Point(a/b.x, a/b.y)

[pub]
fun _opDiv<T>(my a Point<T>, b T) Point<T>
    where T has NumOps<T> // TBD: Use constraints from `Point`
    ret Point(a.x/b, a.y/b)

[pub]
fun new<T>(s Size<T>, width T, height T)
    // TBD: (my.width, my.height) = (width, height)
    s.width = width
    s.height = height
    
[pub]
fun toPoint<T>(my s Size<T>) Point<T>
    ret Point(s.width, s.height)


// TBD: Shortcut syntax for this:
[pub]
fun new<T>(r Rect<T>, x T, y T, width T, height T)
    r.x = x
    r.y = y
    r.width = width
    r.height = height
    
[pub]
fun new<T>(r Rect<T>, location Point<T>, size Size<T>)
    r.location = location
    r.size = size


// TBD: Operators (add, multiply, divide, sizes, etc.)

[pub]
fun get left<T>(my r Rect<T>) T
    ret r.x
    
[pub]
fun get right<T>(my r Rect<T>) T
    where T has NumOps<T> // TBD: Use constraints from `Point`
    ret r.x + r.width

[pub]
fun get top<T>(my r Rect<T>) T
    ret r.y
    
[pub]
fun get bottom<T>(my r Rect<T>) T
    where T has NumOps<T> // TBD: Use constraints from `Point`
    ret r.y + r.height
    
// TBD: Remove
[pub]
fun lf<T>(my r Rect<T>) Point<T>
    ret Point(r.x, r.y)
    