
mod Zurfur


use Zurfur[Iterator, Clone]
use Zurfur.Math[max]
use Zurfur.Unsafe[castPointer, GcHeapArray]


// All empty lists point here
@empty GcHeapArray


// Send to DlMalloc
fun calloc(size Int) *Void
    todo


// The one and only dynamically sized data structure.  Calling any function
// that could modify `len` or `capacity` while a reference to an element
// exists is a runtime error.
[pub]
type List<T>
    const MaxItems Int = u32.MaxValue/2
    
    list *GcHeapArray
    _len Int

    [pub, implicit]
    fun get asSpan(my) Span<T> todo
    
    [pub, implicit]
    fun get asIterator(my) SpanIterator<T> todo


[pub]
fun List.new<T>(my)
    my.list = &*empty
        

[pub]
fun List.new<T>(my, capacity Int)
require capacity in 0..my.MaxItems
    if capacity == 0
        my.list = &*empty
    else
        my.list = castPointer<*GcHeapArray>(calloc(sizeof(T)*capacity + sizeof(GcHeapArray)))


fun get List.len<T>(my) Int
    return my._len

// Returns true if there is a reference to any element.  When locked, the
// list length cannot be changed.  A GC implementation might not ever lock.
[pub]
fun get List.locked<T>(my) Bool
    return my.list.refCount != 0

// TBD: Only generic
// Usage: myList.For @item => DoStuffWithItem()
[pub]
fun List.forEach<T>(my, f fun(item mut T)) {}

// Clone items into the new list
[pub]
fun List.new<T>(my, items Span<T>)
where T Clone<T>
    todo

// Clone items into the new list
[pub]
fun List.new<T>(my, items mut Iterator<T>)
    todo

[pub]
fun get List.capacity<T>(my) Int
    return my.list.capacity.toInt

// Set the capacity, won't shrink below count.
[pub]
fun set List.capacity<T>(my, value Int)
require not my.locked and value < my.MaxItems
    todo


// Return a new list with all occurences of `seqSearch`
// replaced by `seqReplace`.
[pub]
fun List.replaceIp<T>(my mut, seqSearch Span<T>, seqReplace Span<T>)
require not my.locked
    todo

[pub]
fun List.clear<T>(my mut)
require not my.locked
    todo

// Push the item onto the end of the list
[pub]
fun List.push<T>(my mut, item own T)
require not my.locked
    todo

// Push item clones onto the end of the list
[pub]
fun List.push<T>(my mut, items Span<T>)
require not my.locked
    todo

// Push item clones onto the end of the list
[pub]
fun List.push<T>(my mut, items mut Iterator<T>)
require not my.locked
    todo

// Write bytes to the end of the list, expanding the list as necessary
[pub] fun List.write(my mut List<Byte>, buffer Span<Byte>)! todo

[pub] fun List.asReader(my List<Byte>) SpanReader
    return my.asSpan.asReader


[pub]
fun List.insertIp<T>(my mut, index Int, item own T)
require not my.locked
    todo

[pub]
fun List.removeIp<T>(my mut, index Int) T
require not my.locked
    todo