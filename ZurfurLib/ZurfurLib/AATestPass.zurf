
// Passing test cases
// TBD: Copy from AATest

mod AATestPass

use Zurfur[Iterator, SpanIterator]


type ImpNone()

type interface TakeConcrete
    fun self.take(a Int)
type interface TakeConcrete2 // TBD: Interfce to interface for compatible interfaces
    fun self.take(a Int)
type interface TakeInterface
    fun self.take(a TakeConcrete)
    
type ImpTakeConcrete()
fun (my ImpTakeConcrete) take(a Int) todo

type ImpTakeInterface()
fun (my ImpTakeInterface) take(a TakeConcrete) todo


fun takeInterfaceConcrete(x TakeConcrete) todo
fun takeInterfaceInterface(x TakeInterface) todo

fun test_interfaces()
    takeInterfaceConcrete(ImpTakeConcrete())
    @a TakeConcrete = ImpTakeConcrete()
    takeInterfaceConcrete(a)
    @x TakeConcrete = ImpTakeConcrete()
    @y TakeConcrete = x
    takeInterfaceConcrete(y)

// Test type inference on an iterator
fun inferIterator<A,I>(a A, i Iterator<I>) todo
fun test_inferIterator()
    inferIterator(1, SpanIterator<F32>())  // inferIterator<Int,F32>
    inferIterator(1, List<F32>().getIterator)  // inferIterator<Int,F32>
    

    