
// This file is to test the parse, make sure error
// messages look good and no crashes, etc.


mod TestSyntax

use Zurfur

// Comment out the next line to see parse errors
pragma NoParse
//pragma ShowMeta


fun A() { } // Expecting a type name
fun A() Void{ } // Duplicate
fun B() Int { } // Duplicate
fun B() F32 { } // Duplicate
fun C(a Int, a Int) Void { } // Duplicate parameter
fun D<X,X>(a X) Void { } // Duplicate type parameter
fun E<X>(a Y) Void { } // Unresolved type

// If we allow embedded functions and types
type A { fun A() Void { } } // Same name as parent
type C<T> { type D<T> { } } // Same type arg name as parent
type B<T> { fun A<T>() Void { } } // Same type arg name as parent


// Try to give good info at the end of each line
fun new(a I8) Void // Compound statement error
fun
fun A
fun B(
fun C(a
fun E(a Int
fun F(a Int,
fun G(a Int, b
fun J(a, x Int) 
fun H(a Int, b Int) Void  // Compound error on this line (not next)
fun I(a Int, b Int) Void

fun J(a Int, x Int) Void
NoCompoundHere()

// Error in 'fun' declaration still parses function after '{'
fun K(a Int, x)  Void
    if a > 3   // Error: Next line doesn't look like a compound
    a += 1


    if a > 3
        a+=1
         b+=1  // Error: Compound statement alignment

    if a >
    a+= 1       // No error here because it's marked on the previous line

    if a >
    a+= 1       // No error here because it's marked on the previous line


    if a > 3 ret 4 // Error: Compound must be on next line


    if

    if a

    if a>

    if a>b        


// TBD: The curly brace should be accepted as part of the `fun` declaration
fun K(a Int, x) hello world Void
{
}
    