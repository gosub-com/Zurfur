mod Zurfur

use Zurfur.Unsafe[Xuint, GcHeapObject]
    
// This is private, so only Xuint, RawPointer<T>, Ref<T>, and Pointer<T>
// implement GetRawPointer.  When implemented, the compiler knows it is a
// pointer (32 or 64 bits) and can allow `castPointer`.
type RawPointerMarker
    value Xuint

// Forward references are an optimization the code synthesizer can use when
// they are passed down the stack, e.g. f(value Ref<T>) can be replaced with
// f(value FRef<T>) since the reference is "covered".
type ref ro FRef<T>
    value *T

// A pointer to heap memory.  This implementation uses reference
// counting, but future implementations might be compacting instead.
type ro Pointer<T>
    value *GcHeapObject  // Can also point to GcHeapArray<T>

// Mark these types as the only pointer types in the system
fun getRawPointer<T>(my Pointer<T>) RawPointerMarker extern

fun free(memory *GcHeapObject) extern // Pass to DlMalloc.free
    

    