
// Each test case is separated by three pounds (#),
// and should generate exactly one error

pragma NoParse

mod AATestFails

use Zurfur[Iterator, Iterable]

// Make first test case pass by adding a syntax error
fun test_makeError()
    makeError


// ### Interface conversion that fails

type interface TakeConcrete
    fun .take(a Int)
type interface TakeConcrete2
    fun .take(a Int)
type interface TakeInterface
    fun .take(a TakeConcrete)
    
type ImpNone()

type ImpTakeConcrete()
fun .take(my ImpTakeConcrete, a Int) todo

type ImpTakeInterface()
fun .take(my ImpTakeInterface, a TakeConcrete) todo

fun takeInterfaceConcrete(x TakeConcrete) todo
fun takeInterfaceInterface(x TakeInterface) todo

fun test_noImp1()
    @a TakeConcrete = ImpTakeConcrete()
    takeInterfaceConcrete(ImpTakeConcrete())
    @b TakeConcrete = ImpNone() // Type doesn't implement interface

// ### Interface conversion that fails

fun test_noImp2()
    takeInterfaceConcrete(ImpTakeConcrete())
    takeInterfaceConcrete(ImpNone()) // Type doesn't implement interface

// ### Interface conversion that fails

fun test_noImp5()
    @t TakeInterface = ImpTakeConcrete() // Type doesn't implement the interface

// ### Interface conversion that fails

fun test_noImp6()
    takeInterfaceConcrete(ImpTakeConcrete())
    takeInterfaceInterface(ImpTakeConcrete()) // Type doesn't implement the interface

// ### Interface conversion that fails

fun test_noImp3()
    @a TakeConcrete = ImpTakeConcrete()
    @b TakeConcrete = a
    @c TakeConcrete2 = a // Interface to interface conversion not supported

// ### Interface conversion that fails

fun test_noImp4()
    takeInterfaceConcrete(ImpTakeConcrete())
    @b TakeConcrete2 = ImpTakeConcrete()
    takeInterfaceConcrete(b) // Interface to interface conversion not supported
    

// ### Cannot infer interface type args

fun takeInterfaceConcreteInfer<T>(x TakeConcrete) todo
fun test_noImpInfer1()
    takeInterfaceConcreteInfer<Byte>(ImpTakeConcrete()) // Ok
    takeInterfaceConcreteInfer(ImpTakeConcrete())       // Cannot infer interface type args


// ### Cannot infer interface type args

fun takeInterfaceInterfaceInfer<T>(x TakeInterface) todo
fun test_noImpInfer2()
    takeInterfaceInterfaceInfer<Byte>(ImpTakeInterface())   // Ok
    takeInterfaceInterfaceInfer(ImpTakeInterface())         // Cannot infer interface type args


// ### Convert concrete types to interface

type interface Printable
    fun .toStr() Str
    
type interface Printable2
    fun .toStr() Str
    
type MyCollection<T> {}
type MyCollectionIter<T> {}

type MyCollectionNot<T> {}
type MyCollectionNotIter<T> {}


[implicit] fun .asIterator<T>(my MyCollection<T>) MyCollectionIter<T>
    nop
fun .next<T>(my MyCollectionIter<T>) ?T
    nop

fun .reduceInt(my Iterable<Int>, f fun(item1 Int, item2 Int) Int) ?Int
    return my.asIterator.reduce(f) 

fun test_takePrintable(a Printable)
    @x = a.toStr
    x = ""
fun test_printable()
    test_takePrintable(1)
    test_takePrintable(1.0)
    test_takePrintable("")
    test_takePrintable(MyCollection<Int>()) // Doesn't implement Printable
    

// ### Constraint used properly

fun test_printableFail1<T Printable, Q>(t T, q Q)
    q.toStr // toStr not defined in Q
    t.toStr // ok

// ### Constraint used properly

fun test_printableFail2<Q, T Printable>(t T, q Q)
    q.toStr // toStr not defined in Q
    t.toStr // ok

// ### Incompatible parameter types (expecting Int)

type interface TestGlobal
    fun testGlobal()
fun test_Global<T TestGlobal>()
    testGlobal()
type interface TestGlobal2<T>
    fun testGlobal2(x T) T

fun test_Global2<T TestGlobal2<Int>>(t T)
    testGlobal2(t)  // Incompatible parameter types (expecting Int, not T)
    testGlobal2(1)  // Ok

// ### Incompatible parameter types (expecting Int)

fun test_Global2a<T TestGlobal2<Int>>(t T)
    testGlobal2(1.0)  // Incompatible parameter types (expecting Int)


// ### Lambda return type is checked
// TBD: *** FAILED TEST *** need to check lambda returns

fun lambdaCall(a fun(b Float)Int) todo
fun test_lambdaCall2()
    lambdaCall(a => 0.0)  // TBD: Should fail, return is Int

    // Make this test case pass (until we can fix the above error)
    MakeTestCaseFail
    

// ### Can't infer type

fun test_newInfer()
    @a = MyCollection() // Can't infer type

// ### Basic interface works

fun test_newInfer2()
    @a = MyCollection<Int>()    // ok
    @b = a.asIterator          // ok
    @c = b.next()               // ok
    @d ?Int = c                 // ok
    @e Int = c                  // Can't assign type

// ### Type doesn't implement the interface because

fun test_noImplementInterface1()
    @myCollection = MyCollection<Int>()
    @ok1 = myCollection.map<Int,Str>(i => i.toStr).toList<Str>     // Type arg given
    @ok2 = myCollection.map<Int,Str>(i => i.toStr).toList          // Infer toList
    @fail = myCollection.map<Int,Str>(i => i.toStr).toList<Int>    // Error on toList

// ### Type doesn't implement the interface

fun test_noImplementInterface2()
    @myCollectionNot = MyCollectionNot<Int>()
    @myCollectionNotMapIter = myCollectionNot.map<Int,Str>(i => i.toStr)

// ### Type doesn't implement the interface because of explicit type

fun test_returnFail()
    @ok1 = List<Int>().reduce<Int>(|item1, item2| => item1 + item2)
    @ok2 = List<Int>().reduce(|item1, item2| => item1 + item2)
    @fail = List<Int>().reduce<Float>(|item1, item2| => item1 + item2)
    @ok3 = List<Int>().reduce(|item1, item2| => item1 + item2)

// ### Type doesn't implement interface because of reciever parameter

fun test_reduceConcrete()
    @ok = List<Int>().reduceInt(|item1, item2| => item1 + item2)
    @fail = List<Float>().reduceInt(|item1, item2| => item1 + item2)

// ### Can't have type arguments

fun test_reduceConcrete2()
    @ok = List<Int>().reduceInt(|item1, item2| => item1 + item2)
    @fail = List<Int>().reduceInt<Float>(|item1, item2| => item1 + item2)
    
// ### Ambiguous type inference on interface function

type interface AmbiguousInterface<T>
    fun .f(a T)
    
type AmbiguousTest()
fun .f(my AmbiguousTest, a Int) todo
fun .f(my AmbiguousTest, b Float) todo

fun takeAmbiguous<T>(i AmbiguousInterface<T>) todo

fun test_ambiguousInterface1()
    takeAmbiguous<Int>(AmbiguousTest())     // Ok
    takeAmbiguous<Float>(AmbiguousTest())   // Ok
    takeAmbiguous(AmbiguousTest())          // Type inference is ambiguous for this interface

    
// ### Type doesn't implement the interface

fun test_noImp7()
    takeAmbiguous<Int>(AmbiguousTest())     // Ok
    takeAmbiguous<Float>(AmbiguousTest())   // Ok
    takeAmbiguous<Byte>(AmbiguousTest())    // Type doesn't implement the interface

// ### Type doesn't implement the interface

fun test_noImp8()
    @a AmbiguousInterface<Int> = AmbiguousTest()    // Ok
    @b AmbiguousInterface<Float> = AmbiguousTest()  // Ok
    @c AmbiguousInterface<Byte> = AmbiguousTest()   // Type doesn't implement the interface

// ### Ambiguous type inference on interface function parameter

type interface AmbiguousInterfaceFunParam<T>
    fun .f(a T, b T)
type AmbiguousTestFunParam()
fun .f(my AmbiguousTestFunParam, a Int, b Int) todo
fun .f(my AmbiguousTestFunParam, b Float, c Int) todo

fun takeAmbiguousFunParam<T>(i AmbiguousInterfaceFunParam<T>) todo


fun test_ambiguousInterfaceParam()
    takeAmbiguousFunParam<Int>(AmbiguousTestFunParam())     // Ok: f(Int,Int) is implemented
    takeAmbiguousFunParam<Float>(AmbiguousTestFunParam())   // Fail: f(Float,Float) not implemented
    takeAmbiguousFunParam(AmbiguousTestFunParam())          // Ok: f(Float,Float) not implemented
    

// ### Ambiguous function call

fun .toStr(my U16) Str todo
fun test_ambiguousFunCall()
    U16().toStr






// ### END OF FILE