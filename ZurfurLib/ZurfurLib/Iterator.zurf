
mod Zurfur

[pub]
type interface GetIterator[T]
    fun getIterator() Iterator<T>

// Implement this on all iterators
[pub]
type interface Iterator[T]
    fun mut next() ?T


fun _for[S](s GetIterator<S>) Iterator<S>
    ret s.getIterator
fun _for[S](s Iterator<S>) Iterator<S>
    ret s


fun GetIterator.map[S,R](f fun(inoput S) R) MapIterator<S,R>
    ret my.getIterator.map(f)

fun Iterator.map[S, R](f fun(input S) R) MapIterator<S, R>
    ret MapIterator<S, R>(my, f)
    
type ref MapIterator[S, R]
    _iter Iterator<S>
    _f fun(input S) R

fun MapIterator.new[S, R](iter Iterator<S>, f fun(input S) R)
    my._iter = iter
    my._f = f

fun mut MapIterator.next[S, R]() ?R
    @a = my._iter.next()
    if (a @ item)
        ret my._f(a)
    ret nil

fun GetIterator.fold[S,R](acc R, f fun(acc R, value S) R) R
    ret my.getIterator.fold<S,R>(acc, f)

fun Iterator.fold[S,R](acc R, f fun(acc R, value S) R) R
    while my.next() @ item
        acc = f(acc, item)
    ret acc

fun GetIterator.reduce[S](f fun(item1 S, item2 S) S) ?S
    ret my.getIterator.reduce<S>(f)

fun Iterator.reduce[S](f fun(item1 S, item2 S) S) ?S
    if not (my.next()@acc)
        ret nil
    while my.next() @ item
        acc = f(acc, item)
    ret acc
    
[pub]
fun mut Iterator.toList[T GetIterator<T>]() List<T>
    @list = List<T>()
    while my.next()@item
        list.push(item)
    ret list
    
    
    