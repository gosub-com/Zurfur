
mod Zurfur

[pub] type interface Iterable<T>
    fun .asIterator() Iterator<T>

// Implement this on all iterators
[pub] type interface Iterator<T>
    fun mut .next() ?T


// This is never called.  It is implemented by the compiler to generate a for loop.
fun ._for<T>(my Iterator<T>) T extern


// *** MAP ***

fun .map<S, R>(my Iterator<S>, f fun(input S) R) Iterator<R>
    return MapIterator<S, R>(my, f)
    
type ref MapIterator<S, R>
    _iter Iterator<S>
    _f fun(input S) R

// TBD: Remove this when `init` is implemented
fun .new<S, R>(my MapIterator<S,R>, iter Iterator<S>, f fun(input S) R) MapIterator<S,R>
    my._iter = iter
    my._f = f

fun .next<S, R>(my mut MapIterator<S,R>) ?R
    let a = my._iter.next()
    if a @ item
        return my._f(a)
    return nil

// *** FILTER ***

fun .filter<S>(my Iterator<S>, f fun(input S) Bool) Iterator<S>
    return FilterIterator<S>(my, f)
    
type ref FilterIterator<S>
    _iter Iterator<S>
    _f fun(input S) Bool

// TBD: Remove this when `init` is implemented
fun .new<S>(my FilterIterator<S>, iter Iterator<S>, f fun(input S) Bool) FilterIterator<S>
    my._iter = iter
    my._f = f

fun .next<S>(my mut FilterIterator<S>) ?S
    while my._iter.next @ item
        if my._f(item)
            return item
    return nil

// *** OTHER ***


fun .reduce<S,R>(my Iterator<S>, acc R, f fun(acc R, value S) R) R
    while my.next() @ item
        acc = f(acc, item)
    return acc

fun .reduce<S>(my Iterator<S>, f fun(item1 S, item2 S) S) ?S
    if not (my.next()@acc)
        return nil
    while my.next() @ item
        acc = f(acc, item)
    return acc


[pub]
fun .toList<T>(my mut Iterator<T>) List<T>
where T Iterable<T>
    @list = List<T>()
    while my.next()@item
        list.push(item)
    return list
    
    
    