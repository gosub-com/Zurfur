
mod Zurfur

[pub]
type Iterable<T> interface
    fun get iterator() Iterator<T>


// Implement this on all iterators
[pub]
type Iterator<T> interface
    fun mut next() ?T

fun test_map()
    @i = Iterator<int>()
    @x = i.map<int,str>(@q => 0.0)  // TBD: Infer types
    @item = x.next<int,str>()       // TBD: Infer types

    // TBD: Fix this error (iterate on Iterable or Iterator)
    //for @s in x
    //    Log.info("")

// TBD: Still working on these
fun map<Source, Result>(my i Iterator<Source>, f fun(input Source) Result) MapIterator<Source, Result>
    ret MapIterator<Source, Result>(f, i)

fun map<Source, Result>(my i Iterable<Source>, f fun(input Source) Result) MapIterator<Source, Result>
    ret MapIterator<Source, Result>(f, i.iterator)

// TBD: Still working on this
type MapIterator<Source, Result> ref // TBD: Ownership rules for these will be tough
    _fun fun(input Source) Result
    _iter Iterator<Source>

fun new<Source, Result>(m MapIterator<Source,Result>, func fun(input Source) Result, iter Iterator<Source>)
    // TBD: my._fun = func
    m._iter = iter

fun next<Source, Result>(my m mut MapIterator<Source, Result>) ?Result
    @a = m._iter.next()
    // TBD: return func(a)

[pub]
fun toArray<T>(my i mut Iterator<T>) Array<T>
    ret i.toList().toArray()

[pub]
fun toList<T>(my i mut Iterator<T>) List<T>
    @list = List<T>()
    while i.next()@item
        list.push(item)
    ret list
    
    
    