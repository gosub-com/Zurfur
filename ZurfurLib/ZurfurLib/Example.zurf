//pragma ShowParse        // Show the parse tree (hover over a symbol)
//pragma NoParse
//pragma RequireBraces

// Press F4 to see header file report


// http://zurfur.com
mod TestExample

use Zurfur
use Zurfur[Decimal, Log, Number, GetIterator, Iterator]
use Zurfur.Math[cos,sin]
use Zurfur.ConvertBytes[bytesToHex]

// Simple types have public fields:
[pub] type SimpleType(firstName str, lastName str)
[pub] type ro SimpleImmutableType(firstName str, fastName str)

// Define a type
[pub]
type MyType
    text str                // Public
    _misc str               // Private
    _list List<int> pub ref // Private with pub ro

fun test_map()

    for @ir in 0..2
        Log.info("")

    @i = List<int>().getIterator()
    @m3 = i.map<int,str>(q => 0.0)
    @m3item = m3.next()
    @m4 = i.map<int,str>(q => 0.0).map<str,float>(q => "hello")
    @m4item = m4.next()
    @m5 = List<int>().map<int,str>(q => 0).map<str,float>(q => 0)
    @m5List = m5.toList<float>


    

    @myFold = List<int>()
        .fold<int, float>(0.0, |acc, item| => acc + item.toFloat)
    @myReduce = List<int>()
        .reduce<int>(|item1, item2| => item1 + item2)

    @myStringList = List<int>()
        .map<int, str>(s => s.toStr)
        .map<str,str>(s => s + " ")
        .fold<str,str>("", |acc, item| => acc + item)

      
    @testIter = (0..5).map<int,float>(fl => (2*fl).toFloat + 0.5)


// Declare a method to multiply and add three keys on Map<K,V>.
// Return Nan (or MinValue for integer types) if any key is missing.
fun Map.madd<K,V Number<V>>(mul1 K, mul2 K, add K) V
    if my[mul1]@mul1Val and my[mul2]@mul2Val and my[add]@addVal
        ret mul1Val * mul2Val + addVal
    ret V.NanOrMin        

// Method
[pub]
fun MyType.countToTen()
    Log.info("Hello world.  Let's count to 10.")
    for @i in 1..+10
        Log.info("Count={i}, text={m.text}")

fun MyType.getIterator() MyTypeIter todo

type MyTypeIter
    a int
fun MyTypeIter.next() ?int
    todo

// Setter for list, which is already public read-only
[pub]
fun set MyType.list(v own List<int>)
    my._list = v
    my.mapChangedEvent()
    for @x in MyType()
        nop
    MyType().map<int,str>(s => "")

fun MyType.mapChangedEvent() {}

fun test_HelloWorld()
    Log.info("Hello World.  Let's count from 1 to 10.")
    for @i in 1..11
        Log.info("Count={a}")

    @a = "Regular string literal"       // No interpolation
    @b = "Column 1{\t}Column 2{\n}"     // Containing a tab, ending with \n
    @c = tr"Translated string"          // Translated at runtime
    @d = "Hello world, a+b={a+b}{\n}"   // Interpolated with \n at the end
    @e = tr"Hello world, X={X}!{\n}"    // Translated, interpolated, \n at end
    @g = """{"X":1,"Y":2}"""            // Containing quote
    @h = """{"X":${x},"Y":2}"""         // Containing quote and interpolated

    @t1 = circle2(1, 2.0)
    @t1r1 = t1.x
    @t1r2 = t1.y

            
[pub]
fun circle(a float, r float)(x float, y float)
    @q = circle(1.0,2.0)
    @p = q.x
    ret (cos(a)*r, sin(a)*r)

fun circle2<T0, T1>(a T0, r T1)(x T0, y T1)
    ret (T0(), T1())

[pub]
type Example
    
    a1 str
    a2 str = "Hello"
    a3 List<str> = ["Hello", "World"]
    a4 List<int> = [1,2]
    a5 List<int> pub ref
    a6 List<int> pub mut
    a7 List<int> pub mut
    //pub a8 List<int>
    //pub a9 private set List<int>
    //pub private set a9 List<int>

    map1 ro Map<str,int> = ["A":1,"B":2]        // Immutable map
    map2 ro mut Map<str,int> = ["A":1,"B":2]    // Can't be assigned, can be mutated
    map3 ro Map<str,int> pub init               // Read only, init in constructor or allow public init
    
    a Zim<void>
    c Zim<i8>
    e Zim<byte>
    f Zim<i16>
    g Zim<u16>
    h Zim<i32>
    i Zim<u32>
    j Zim<int>
    m Zim<float>
    n Zim<f32>
    o Zim<str>
    p Zim<Decimal>

[pub]
type Zim<T>
    q T pub mut

// Type test for test_main
type Token(a int)
fun AcceptMatch(m str) ?Token
    ret nil

// This is a public documentation comment.  Do not use XML.
// Use `name` to refer to variables in the code.
[pub]
fun test_Main(args Array<str>, stream Zurfur.Io.Reader)

    // This is a regular private comment
    Log.info("Hello World, 2+2={2+2}")

    @v = ""
    //@myStrings = ["a", "b", "c"]
    @myStrings = Array<str>()

    if myStrings[1]@q == "x"
        v = "x"
    elif q == "y" or q=="z"
        v = "y or z"
    elif q >= "a" or q <= "z"
        v = "lower"
    elif q >= "A" or q <= "Z"
        v = "upper"
    else
        v = "none"
    
    @a = tr"Column 1{\t}Column 2{\rn}"
    @data = "Name:{name}{\t}Occupation:{lastName}{\rn}"
    @buffer = Buffer<byte>()
    
    while stream.read(buffer[0..4])!@size == 4
        @bytes = buffer[0..4].bytesToHex(false) // TBD: Scan use statements for extension methods

    // AcceptMatch returns ?Token = (bool, Token)
    // @Token captures the token, leaving the bool
    if AcceptMatch("(")@Token
        nop

    ret