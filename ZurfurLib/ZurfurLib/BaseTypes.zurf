// Define the simple types:
//     i8, byte, i16, u16, i32, u32, int, u64, f32, float, Decimal
//

mod Zurfur

pragma AllowUnderscoreDefinitions

// These implement throw and require reserved words
[pub] fun assert(condition bool) todo
[pub] fun assert(condition bool, message str) todo
[pub] fun require(condition bool) todo
[pub] fun require(condition bool, message str) todo

// Return type of functions that don't return anything
[pub]
type void ro { }

// Empty value for pointers and optionals
[pub]
type Nil ro { }

// Maybe<T> is the same as ?T.  Pointer and reference types are always
// optimized so that `?&T`, `?*T`, `?^T`, and `?Box<T>` are just one pointer.
[pub]
type Maybe<T>
    // TBD: Assigning to `Maybe<T>` can change the type of `value` to nil.
    //      If we allow returning a reference to `T`, it must be in a box.
    //      For reference types, we can optimize to remove one box.
    //      For non-reference types, the compiler can probably optimize.
    //      Will have the same problem for sum types.
    value Box<T>
    hasValue bool

[pub]
fun new<T>(m Maybe<T>, value own T)
    m.value = Box<T>(value)
    m.hasValue = true

type Box<T>
    const __size int = 1

fun new<T>(b Box<T>, value own T)
    nop

[pub]
type Error ro interface
    fun get code() ErrorCode
    fun get message() str


// Result<T> - Same as !T
[pub]
type Result<T> union
    ok T
    error ro Error

// This will probably be a specially recognized error code type
[pub]
type ErrorCode enum
    Success = 0 

    

// a UTF8 encoded character, same as i32
[pub]
type Rune = i32

// Base interface for all types
[pub]
type Object interface { }


// All types have a unique `id`, but other non-essential metadata is opt-in.
// This must always be 32 bits, even on 64 bit machines, so as not to change
// the `GcHeapObject` footprint.
[pub]
type Type ro
    id u32


// Swap two items
[pub]
fun swap<T>(a mut &T, b mut &T)
    todo

// bool (true or false)
[pub]
type bool ro
    const __size int = 1

[pub] fun getHash(my a bool) int extern
[pub] fun _opEq(my a bool, b bool) bool extern

// TBD: These operators must be restricted to bool
[pub] fun _opLogicalAnd(my a bool, b bool) bool extern
[pub] fun _opLogicalOr(my a bool, b bool) bool extern
[pub] fun _opLogicalNot(my a bool) bool extern

// i8 (-128..127)
[pub]
type i8 ro
    const __size int = 1
    const __align int = 1
    const Zero i8 = 0
    const One i8 = 1
    const MinValue i8 = -128
    const MaxValue i8 = 127
    const NanOrMin i8 = MinValue
    
[pub] fun get toStr(my n i8) str extern
[pub] fun get toByte(my n i8) ?byte extern
[pub] fun get toByteMask(my n i8) byte extern
[pub] fun get toI16(my n i8) i16 extern
[pub] fun get toI32(my n i8) i32 extern
[pub] fun get toInt(my n i8) int extern
[pub] fun get toF32(my n i8) f32 extern
[pub] fun get toFloat(my n i8) float extern
[pub] fun get toDecimal(my n i8) Decimal extern

[pub] fun getHash(my a i8) int extern
[pub] fun _opEq(my a i8, b i8) bool extern
[pub] fun _opCmp(my a i8, b i8) int extern


// byte (0..255)
[pub]
type byte ro
    const __size int = 1
    const __align int = 1    
    const Zero byte = 0
    const One byte = 1
    const MinValue byte = 0
    const MaxValue byte = 255
    const NanOrMin byte = MinValue
    
[pub] fun get toStr(my b byte) str extern
[pub] fun get toI8(my b byte) ?i8 extern
[pub] fun get toI8Mask(my b byte) i8 extern
[pub] fun get toI16(my b byte) i16 extern
[pub] fun get toU16(my b byte) u16 extern
[pub] fun get toI32(my b byte) i32 extern
[pub] fun get toU32(my b byte) u32 extern
[pub] fun get toInt(my b byte) int extern
[pub] fun get toU64(my b byte) u64 extern
[pub] fun get toF32(my b byte) f32 extern
[pub] fun get toFloat(my b byte) float extern
[pub] fun get toDecimal(my b byte) Decimal extern

[pub] fun getHash(my a byte) int extern
[pub] fun _opEq(my a byte, b byte) bool extern
[pub] fun _opCmp(my a byte, b byte) int extern


// i16 (-32768..32768)
[pub]
type i16 ro
    const __size int = 2
    const __align int = 2    
    const Zero i16 = 0
    const One i16 = 1
    const MinValue i16 = -32768
    const MaxValue i16 = 32767
    const NanOrMin i16 = MinValue

[pub] fun get toStr(my n i16) str extern
[pub] fun get toI8(my n i16) ?i8 extern
[pub] fun get toByte(my n i16) ?byte extern
[pub] fun get toU16(my n i16) ?u16 extern
[pub] fun get toI32(my n i16) i32 extern
[pub] fun get toInt(my n i16) int extern
[pub] fun get toF32(my n i16) f32 extern
[pub] fun get toFloat(my n i16) float extern
[pub] fun get toDecimal(my n i16) Decimal extern    
[pub] fun get toI8Mask(my n i16) i8 extern
[pub] fun get toByteMask(my n i16) byte extern
[pub] fun get toU16Mask(my n i16) u16 extern    

[pub] fun getHash(my a i16) int extern
[pub] fun _opEq(my a i16, b i16) bool extern
[pub] fun _opCmp(my a i16, b i16) int extern



// u16 (0..65535)
[pub]
type u16 ro
    const __size int = 2
    const __align int = 2    
    const Zero u16 = 0
    const One u16 = 1
    const MinValue u16 = 0
    const MaxValue u16 = 65535
    const NanOrMin u16 = MinValue
    

[pub] fun get toStr(my n u16) str extern
[pub] fun get toI8(my n u16) ?i8 extern
[pub] fun get toByte(my n u16) ?byte extern
[pub] fun get toI16(my n u16) ?i16 extern
[pub] fun get toI32(my n u16) i32 extern
[pub] fun get toU32(my n u16) u32 extern
[pub] fun get toInt(my n u16) int extern
[pub] fun get toU64(my n u16) u64 extern
[pub] fun get toF32(my n u16) f32 extern
[pub] fun get toFloat(my n u16) float extern
[pub] fun get toDecimal(my n u16) Decimal extern
[pub] fun get toI8Mask(my n u16) i8 extern
[pub] fun get toByteMask(my n u16) byte extern
[pub] fun get toI16Mask(my n u16) i16 extern

[pub] fun getHash(my a u16) int extern
[pub] fun _opEq(my a u16, b u16) bool extern
[pub] fun _opCmp(my a u16, b u16) int extern

// A 32 bit integer
[pub]
type i32 ro
    const __size int = 4
    const __align int = 4    
    const Zero i32 = 0
    const One i32 = 1
    const MinValue i32 = -2147483648
    const MaxValue i32 = 2147483647
    const NanOrMin i32 = MinValue
    

[pub] fun get toStr(my n i32) str extern
[pub] fun get toI8(my n i32) ?i8 extern
[pub] fun get toByte(my n i32) ?byte extern
[pub] fun get toI16(my n i32) ?i16 extern
[pub] fun get toU16(my n i32) ?u16 extern
[pub] fun get toU32(my n i32) ?u32 extern
[pub] fun get toInt(my n i32) int extern
[pub] fun get toF32(my n i32) f32 extern
[pub] fun get toFloat(my n i32) float extern
[pub] fun get toDecimal(my n i32) Decimal extern    
[pub] fun get toI8Mask(my n i32) i8 extern
[pub] fun get toByteMask(my n i32) byte extern
[pub] fun get toI16Mask(my n i32) i16 extern
[pub] fun get toU16Mask(my n i32) u16 extern
[pub] fun get toU32Mask(my n i32) u32 extern

[pub] fun getHash(my a i32) int extern
[pub] fun _opEq(my a i32, b i32) bool extern
[pub] fun _opCmp(my a i32, b i32) int extern
[pub] fun _opIn(my a i32, b Range<i32>) bool extern
[pub] fun _opRange(my a i32, b i32) Range<i32> extern // TBD: Generic function on range?
[pub] fun _opAdd(my a i32, b i32) i32 extern
[pub] fun _opSub(my a i32, b i32) i32 extern
[pub] fun _opNeg(my a i32) i32 extern
[pub] fun _opMul(my a i32, b i32) i32 extern
[pub] fun _opDiv(my a i32, b i32) i32 extern
[pub] fun _opRem(my a i32, b i32) i32 extern
[pub] fun _opBitNot(my a i32) i32 extern
[pub] fun _opBitAnd(my a i32, b i32) i32 extern
[pub] fun _opBitOr(my a i32, b i32) i32 extern
[pub] fun _opBitXor(my a i32, b i32) i32 extern
[pub] fun _opBitShl(my a i32, b int) i32 extern
[pub] fun _opBitShr(my a i32, b int) i32 extern

[pub]
fun get iterator(my n i32) RangeIterator<i32>
    ret RangeIterator<i32>(0 i32, n)


// 32 bit unsigned integer
[pub]
type u32 ro
    const __size int = 4
    const __align int = 4    
    const Zero u32 = 0
    const One u32 = 1
    const MinValue u32 = 0
    const MaxValue u32 = 4294967295
    const NanOrMin u32 = MinValue
    

[pub] fun get toStr(my n u32) str extern
[pub] fun get toI8(my n u32) ?i8 extern
[pub] fun get toByte(my n u32) ?byte extern
[pub] fun get toI16(my n u32) ?i16 extern
[pub] fun get toU16(my n u32) ?u16 extern
[pub] fun get toI32(my n u32) ?i32 extern        
[pub] fun get toInt(my n u32) int extern
[pub] fun get toU64(my n u32) u64 extern
[pub] fun get toF32(my n u32) f32 extern
[pub] fun get toFloat(my n u32) float extern
[pub] fun get toDecimal(my n u32) Decimal extern        
[pub] fun get toI8Mask(my n u32) i8 extern
[pub] fun get toByteMask(my n u32) byte extern
[pub] fun get toI16Mask(my n u32) i16 extern
[pub] fun get toU16Mask(my n u32) u16 extern
[pub] fun get toI32Mask(my n u32) i32 extern

[pub] fun getHash(my a u32) int extern
[pub] fun _opEq(my a u32, b u32) bool extern
[pub] fun _opCmp(my a u32, b u32) int extern
[pub] fun _opIn(my a u32, b Range<u32>) bool extern
[pub] fun _opRange(my a u32, b u32) Range<u32> extern // TBD: Generic function on range?
[pub] fun _opAdd(my a u32, b u32) u32 extern
[pub] fun _opSub(my a u32, b u32) u32 extern
[pub] fun _opNeg(my a u32) u32 extern
[pub] fun _opMul(my a u32, b u32) u32 extern
[pub] fun _opDiv(my a u32, b u32) u32 extern
[pub] fun _opRem(my a u32, b u32) u32 extern
[pub] fun _opBitNot(my a u32) u32 extern
[pub] fun _opBitAnd(my a u32, b u32) u32 extern
[pub] fun _opBitOr(my a u32, b u32) u32 extern
[pub] fun _opBitXor(my a u32, b u32) u32 extern
[pub] fun _opBitShl(my a u32, b int) u32 extern
[pub] fun _opBitShr(my a u32, b int) u32 extern

[pub] fun get iterator(my n u32) RangeIterator<u32>
    ret RangeIterator<u32>(0 u32, n)


// A 64 bit integer (same as int)
[pub]
type int ro
    const __size int = 8
    const __align int = 8    
    const Zero int = 0
    const One int = 1
    const MinValue int = -9223372036854775808
    const MaxValue int = 9223372036854775807
    const NanOrMin int = MinValue    

[pub] fun get toStr(my n int) str extern
[pub] fun get toI8(my n int) ?i8 extern
[pub] fun get toByte(my n int) ?byte extern
[pub] fun get toI16(my n int) ?i16 extern
[pub] fun get toU16(my n int) ?u16 extern
[pub] fun get toI32(my n int) ?i32 extern
[pub] fun get toU32(my n int) ?u32 extern
[pub] fun get toU64(my n int) ?u64 extern    
[pub] fun get toF32(my n int) f32 extern
[pub] fun get toFloat(my n int) float extern
[pub] fun get toDecimal(my n int) Decimal extern
[pub] fun get toI8Mask(my n int) i8 extern
[pub] fun get toByteMask(my n int) byte extern
[pub] fun get toI16Mask(my n int) i16 extern
[pub] fun get toU16Mask(my n int) u16 extern
[pub] fun get toI32Mask(my n int) i32 extern
[pub] fun get toU32Mask(my n int) u32 extern
[pub] fun get toU64Mask(my n int) u64 extern


[pub] fun getHash(my a int) int extern
[pub] fun _opEq(my a int, b int) bool extern
[pub] fun _opCmp(my a int, b int) int extern
[pub] fun _opIn(my a int, b Range<int>) bool extern
[pub] fun _opRange(my a int, b int) Range<int> extern // TBD: Generic function on range?
[pub] fun _opAdd(my a int, b int) int extern
[pub] fun _opSub(my a int, b int) int extern
[pub] fun _opNeg(my a int) int extern
[pub] fun _opMul(my a int, b int) int extern
[pub] fun _opDiv(my a int, b int) int extern
[pub] fun _opRem(my a int, b int) int extern
[pub] fun _opBitNot(my a int) int extern
[pub] fun _opBitAnd(my a int, b int) int extern
[pub] fun _opBitOr(my a int, b int) int extern
[pub] fun _opBitXor(my a int, b int) int extern
[pub] fun _opBitShl(my a int, b int) int extern
[pub] fun _opBitShr(my a int, b int) int extern


[pub]
fun get iterator(my n int) RangeIterator<int>
    ret RangeIterator<int>(0, n)

// 64 bit unsigned integer
[pub]
type u64 ro
    const __size int = 8
    const __align int = 8    
    const Zero u64 = 0
    const One u64 = 1
    const MinValue u64 = 0
    const MaxValue u64 = 18446744073709551615
    const NanOrMin u64 = MinValue

[pub] fun get toStr(my n u64) str extern
[pub] fun get toI8(my n u64) ?i8 extern
[pub] fun get toByte(my n u64) ?byte extern
[pub] fun get toI16(my n u64) ?i16 extern
[pub] fun get toU16(my n u64) ?u16 extern
[pub] fun get toI32(my n u64) ?i32 extern
[pub] fun get toU32(my n u64) ?u32 extern
[pub] fun get toInt(my n u64) ?int extern
[pub] fun get toF32(my n u64) f32 extern
[pub] fun get toFloat(my n u64) float extern
[pub] fun get toDecimal(my n u64) Decimal extern
[pub] fun get toI8Mask(my n u64) i8 extern
[pub] fun get toByteMask(my n u64) byte extern
[pub] fun get toI16Mask(my n u64) i16 extern
[pub] fun get toU16Mask(my n u64) u16 extern
[pub] fun get toI32Mask(my n u64) i32 extern
[pub] fun get toU32Mask(my n u64) u32 extern
[pub] fun get toIntMask(my n u64) int extern

[pub] fun getHash(my a u64) int extern
[pub] fun _opEq(my a u64, b u64) bool extern
[pub] fun _opCmp(my a u64, b u64) int extern
[pub] fun _opIn(my a u64, b Range<u64>) bool extern
[pub] fun _opRange(my a u64, b u64) Range<u64> extern // TBD: Generic function on range?
[pub] fun _opAdd(my a u64, b u64) u64 extern
[pub] fun _opSub(my a u64, b u64) u64 extern
[pub] fun _opNeg(my a u64) u64 extern
[pub] fun _opMul(my a u64, b u64) u64 extern
[pub] fun _opDiv(my a u64, b u64) u64 extern
[pub] fun _opRem(my a u64, b u64) u64 extern
[pub] fun _opBitNot(my a u64) u64 extern
[pub] fun _opBitAnd(my a u64, b u64) u64 extern
[pub] fun _opBitOr(my a u64, b u64) u64 extern
[pub] fun _opBitXor(my a u64, b u64) u64 extern
[pub] fun _opBitShl(my a u64, b int) u64 extern
[pub] fun _opBitShr(my a u64, b int) u64 extern
[pub] fun _opBitShr(my a u64, b u64) u64 extern
[pub] fun _opBitShl(my a u64, b u64) u64 extern



[pub]
fun get iterator(my n u64) RangeIterator<u64>
    ret RangeIterator<u64>(0 u64, n)

[pub]
type I128 ro
    const __size int = 16
    const __align int = 16

[pub]
type U128 ro
    const __size int = 16
    const __align int = 16


[pub]
type f32 ro
    const __size int = 4
    const __align int = 4    
    const Zero f32 = 0
    const One f32 = 1
    const MinValue f32 = -3.40282347E+38F
    const MaxValue f32 = 3.40282347E+38F
    const NanOrMin f32 = MinValue    
    const epsilon f32 = 1.401298E-45F
    const infinity f32 = 1F/0F
    const negativeInfinity f32 = -1F/0F
    const nan f32 = 0f32/0f32
    const PI f32 = 3.141592653589793238
    const E f32 = 2.718281828459045235

[pub] fun get isInfinity(my n f32) bool extern
[pub] fun get isNan(my n f32) bool extern
[pub] fun get isNegInfinity(my n f32) bool extern
[pub] fun get isPosInfinity(my n f32) bool extern        

[pub] fun get toStr(my n f32) str extern
[pub] fun get toByte(my n f32) ?byte extern
[pub] fun get toInt(my n f32) ?int extern
[pub] fun get toU64(my n f32) ?u64 extern
[pub] fun get toFloat(my n f32) float extern
[pub] fun get toDecimal(my n f32) Decimal extern    
[pub] fun get toByteMask(my n f32) byte extern
[pub] fun get toIntMask(my n f32) int extern
[pub] fun get toU64Mask(my n f32) u64 extern
        
[pub] fun getHash(my a f32) int extern
[pub] fun _opEq(my a f32, b f32) bool extern
[pub] fun _opCmp(my a f32, b f32) int extern
[pub] fun _opEqUnordered(my a f32, b f32) bool extern
[pub] fun _opGtUnordered(my a f32, b f32) bool extern
[pub] fun _opGeUnordered(my a f32, b f32) bool extern
[pub] fun _opLtUnordered(my a f32, b f32) bool extern
[pub] fun _opLeUnordered(my a f32, b f32) bool extern
[pub] fun _opIn(my a f32, b Range<f32>) bool extern
[pub] fun _opRange(my a f32, b f32) Range<i32> extern // TBD: Generic function on range?
[pub] fun _opAdd(my a f32, b f32) f32 extern
[pub] fun _opSub(my a f32, b f32) f32 extern
[pub] fun _opNeg(my a f32) f32 extern
[pub] fun _opMul(my a f32, b f32) f32 extern
[pub] fun _opDiv(my a f32, b f32) f32 extern
[pub] fun _opRem(my a f32, b f32) f32 extern


[pub]
type float ro
    const __size int = 8
    const __align int = 8    
    const Zero float = 0
    const One float = 1
    const MinValue float = -1.7976931348623157E+308
    const MaxValue float = 1.7976931348623157E+308
    const NanOrMin float = MinValue    
    const epsilon float = 4.94065645841247E-324
    const infinity float = 1.0/0.0
    const negativeInfinity float = -1.0/0.0
    const nan float = 0Float/0Float
    const PI float = 3.141592653589793238
    const E float = 2.718281828459045235

[pub] fun get isInfinity(my n float) bool extern
[pub] fun get isNan(my n float) bool extern
[pub] fun get isNegInfinity(my n float) bool extern
[pub] fun get isPosInfinity(my n float) bool extern        

[pub] fun get toStr(my n float) str extern
[pub] fun get toByte(my n float) ?byte extern
[pub] fun get toInt(my n float) ?int extern
[pub] fun get toU64(my n float) ?u64 extern
[pub] fun get toDecimal(my n float) Decimal extern
[pub] fun get toByteMask(my n float) byte extern
[pub] fun get toIntMask(my n float) int extern
[pub] fun get toU64Mask(my n float) u64 extern
[pub] fun get toF32Clamp(my n float) f32 extern

[pub] fun getHash(my a float) int extern
[pub] fun _opEq(my a float, b float) bool extern
[pub] fun _opCmp(my a float, b float) int extern
[pub] fun _opEqUnordered(my a float, b float) bool extern
[pub] fun _opGtUnordered(my a float, b float) bool extern
[pub] fun _opGeUnordered(my a float, b float) bool extern
[pub] fun _opLtUnordered(my a float, b float) bool extern
[pub] fun _opLeUnordered(my a float, b float) bool extern
[pub] fun _opIn(my a float, b Range<float>) bool extern
[pub] fun _opRange(my a float, b float) Range<float> extern // TBD: Generic function on range?
[pub] fun _opAdd(my a float, b float) float extern
[pub] fun _opSub(my a float, b float) float extern
[pub] fun _opNeg(my a float) float extern
[pub] fun _opMul(my a float, b float) float extern
[pub] fun _opDiv(my a float, b float) float extern
[pub] fun _opRem(my a float, b float) float extern


// 128 bit decimal integer.  This will support nan, infinity, and
// exponents covering the entire range of float with more precision.
[pub]
type Decimal ro
    const __size int = 16
    const __align int = 16
    const Zero Decimal = 0
    const One Decimal = 1
    const MinValue Decimal = -1E+1000M
    const MaxValue Decimal = 1E+1000M
    const NanOrMin Decimal = MinValue    
    const infinity Decimal = 1.0/0.0
    const negativeInfinity Decimal = -1.0/0.0
    const nan Decimal = 0.0/0.0
    
[pub] fun get isInfinity(my n Decimal) bool extern
[pub] fun get isNan(my n Decimal) bool extern
[pub] fun get isNegInfinity(my n Decimal) bool extern
[pub] fun get isPosInfinity(my n Decimal) bool extern

[pub] fun get toStr(my n Decimal) str extern
[pub] fun get toByte(my n Decimal) ?byte extern
[pub] fun get toInt(my n Decimal) ?int extern
[pub] fun get toU64(my n Decimal) ?u64 extern
[pub] fun get toByteMask(my n Decimal) byte extern
[pub] fun get toIntMask(my n Decimal) int extern
[pub] fun get toU64Mask(my n Decimal) u64 extern
[pub] fun get toIntClamp(my n Decimal) int extern
[pub] fun get toF32Clamp(my n Decimal) f32 extern
[pub] fun get toFloatClamp(my n Decimal) float extern

[pub] fun getHash(my a Decimal) int extern
[pub] fun _opEq(my a Decimal, b Decimal) bool extern
[pub] fun _opCmp(my a Decimal, b Decimal) int extern
[pub] fun _opEqUnordered(my a Decimal, b Decimal) bool extern
[pub] fun _opGtUnordered(my a Decimal, b Decimal) bool extern
[pub] fun _opGeUnordered(my a Decimal, b Decimal) bool extern
[pub] fun _opLtUnordered(my a Decimal, b Decimal) bool extern
[pub] fun _opLeUnordered(my a Decimal, b Decimal) bool extern
[pub] fun _opIn(my a Decimal, b Range<Decimal>) bool extern
[pub] fun _opRange(my a Decimal, b Decimal) Range<i32> extern // TBD: Generic function on range?
[pub] fun _opAdd(my a Decimal, b Decimal) Decimal extern
[pub] fun _opSub(my a Decimal, b Decimal) Decimal extern
[pub] fun _opNeg(my a Decimal) Decimal extern
[pub] fun _opMul(my a Decimal, b Decimal) Decimal extern
[pub] fun _opDiv(my a Decimal, b Decimal) Decimal extern
[pub] fun _opRem(my a Decimal, b Decimal) Decimal extern