// Define the simple types:
//     i8, byte, i16, u16, i32, u32, int, u64, f32, float, Decimal
//

mod Zurfur

pragma AllowUnderscoreDefinitions

// These implement throw and require reserved words
[pub] fun assert(condition bool) todo
[pub] fun assert(condition bool, message str) todo
[pub] fun require(condition bool) todo
[pub] fun require(condition bool, message str) todo

// Return type of functions that don't return anything
[pub]
type ro struct void()

// Empty value for pointers and optionals
[pub]
type ro struct Nil()

// Maybe<T> is the same as ?T.  Pointer and reference types are always
// optimized so that `?&T`, `?*T`, `?^T`, and `?Box<T>` are just one pointer.
[pub]
type Maybe<T>
    // TBD: Assigning to `Maybe<T>` can change the type of `value` to nil.
    //      If we allow returning a reference to `T`, it must be in a box.
    //      For reference types, we can optimize to remove one box.
    //      For non-reference types, the compiler can probably optimize.
    //      Will have the same problem for sum types.
    value Box<T>
    hasValue bool

[pub]
fun (my Maybe<T>) new<T>(value own T)
    my.value = Box<T>(value)
    my.hasValue = true

type Box<T>
    const __size int = 1

fun (my Box<T>) new<T>(value own T)
    nop

[pub]
type ro interface Error
    fun get self.code() ErrorCode    // Machine readable error code
    fun get self.message() str       // Human readable error code


// Result[T] - Same as !T
[pub]
type union Result<T>
    ok T
    error ro Error

// Machine readable (Zig style?) error code, possibly a str or u32
[pub]
type enum ErrorCode
    Success = 0 

    

// a UTF8 encoded character, same as i32
[pub]
type Rune = i32

// Base interface for all types
[pub]
type interface Object()


// All types have a unique `id`, but other non-essential metadata is opt-in.
// This must always be 32 bits, even on 64 bit machines, so as not to change
// the `GcHeapObject` footprint.
[pub]
type ro struct Type
    id u32


// Swap two items
[pub]
fun swap<T>(a mut &T, b mut &T)
    todo

// bool (true or false)
[pub]
type ro struct bool
    const __size int = 1

[pub] fun (my bool) getHash() int extern
[pub] fun _opEq(a bool, b bool) bool extern

// TBD: These operators must be restricted to bool
[pub] fun _opLogicalAnd(a bool, b bool) bool extern
[pub] fun _opLogicalOr(a bool, b bool) bool extern
[pub] fun _opLogicalNot(a bool) bool extern

// i8 (-128..127)
[pub]
type ro struct i8
    const __size int = 1
    const __align int = 1
    const Zero i8 = 0
    const One i8 = 1
    const MinValue i8 = -128
    const MaxValue i8 = 127
    const NanOrMin i8 = MinValue
    
[pub] fun (my i8) getHash() int extern
[pub] fun _opEq(a i8, b i8) bool extern
[pub] fun _opCmp(a i8, b i8) int extern

[pub] fun (my i8) toStr() str extern
[pub] fun (my i8) toByte() ?byte extern
[pub] fun (my i8) toByteMask() byte extern
[pub] fun (my i8) toI16() i16 extern
[pub] fun (my i8) toI32() i32 extern
[pub] fun (my i8) toInt() int extern
[pub] fun (my i8) toF32() f32 extern
[pub] fun (my i8) toFloat() float extern
[pub] fun (my i8) toDecimal() Decimal extern



// byte (0..255)
[pub]
type ro struct byte
    const __size int = 1
    const __align int = 1    
    const Zero byte = 0
    const One byte = 1
    const MinValue byte = 0
    const MaxValue byte = 255
    const NanOrMin byte = MinValue
    
[pub] fun (my byte) getHash() int extern
[pub] fun _opEq(a byte, b byte) bool extern
[pub] fun _opCmp(a byte, b byte) int extern

[pub] fun (my byte) toStr() str extern
[pub] fun (my byte) toI8() ?i8 extern
[pub] fun (my byte) toI8Mask() i8 extern
[pub] fun (my byte) toI16() i16 extern
[pub] fun (my byte) toU16() u16 extern
[pub] fun (my byte) toI32() i32 extern
[pub] fun (my byte) toU32() u32 extern
[pub] fun (my byte) toInt() int extern
[pub] fun (my byte) toU64() u64 extern
[pub] fun (my byte) toF32() f32 extern
[pub] fun (my byte) toFloat() float extern
[pub] fun (my byte) toDecimal() Decimal extern

// i16 (-32768..32768)
[pub]
type ro struct i16
    const __size int = 2
    const __align int = 2    
    const Zero i16 = 0
    const One i16 = 1
    const MinValue i16 = -32768
    const MaxValue i16 = 32767
    const NanOrMin i16 = MinValue

[pub] fun (my i16) getHash() int extern
[pub] fun _opEq(a i16, b i16) bool extern
[pub] fun _opCmp(a i16, b i16) int extern

[pub] fun (my i16) toStr() str extern
[pub] fun (my i16) toI8() ?i8 extern
[pub] fun (my i16) toByte() ?byte extern
[pub] fun (my i16) toU16() ?u16 extern
[pub] fun (my i16) toI32() i32 extern
[pub] fun (my i16) toInt() int extern
[pub] fun (my i16) toF32() f32 extern
[pub] fun (my i16) toFloat() float extern
[pub] fun (my i16) toDecimal() Decimal extern    
[pub] fun (my i16) toI8Mask() i8 extern
[pub] fun (my i16) toByteMask() byte extern
[pub] fun (my i16) toU16Mask() u16 extern    

// u16 (0..65535)
[pub]
type ro struct u16
    const __size int = 2
    const __align int = 2    
    const Zero u16 = 0
    const One u16 = 1
    const MinValue u16 = 0
    const MaxValue u16 = 65535
    const NanOrMin u16 = MinValue
    
[pub] fun (my u16) getHash() int extern
[pub] fun _opEq(a u16, b u16) bool extern
[pub] fun _opCmp(a u16, b u16) int extern

[pub] fun (my u16) toStr() str extern
[pub] fun (my u16) toI8() ?i8 extern
[pub] fun (my u16) toByte() ?byte extern
[pub] fun (my u16) toI16() ?i16 extern
[pub] fun (my u16) toI32() i32 extern
[pub] fun (my u16) toU32() u32 extern
[pub] fun (my u16) toInt() int extern
[pub] fun (my u16) toU64() u64 extern
[pub] fun (my u16) toF32() f32 extern
[pub] fun (my u16) toFloat() float extern
[pub] fun (my u16) toDecimal() Decimal extern
[pub] fun (my u16) toI8Mask() i8 extern
[pub] fun (my u16) toByteMask() byte extern
[pub] fun (my u16) toI16Mask() i16 extern

// A 32 bit integer
[pub]
type ro struct i32
    const __size int = 4
    const __align int = 4    
    const Zero i32 = 0
    const One i32 = 1
    const MinValue i32 = -2147483648
    const MaxValue i32 = 2147483647
    const NanOrMin i32 = MinValue
    
[pub] fun (my i32) getHash() int extern
[pub] fun _opEq(a i32, b i32) bool extern
[pub] fun _opCmp(a i32, b i32) int extern
[pub] fun _opIn(a i32, b Range<i32>) bool extern
[pub] fun _opRange(a i32, b i32) Range<i32> extern // TBD: Generic function on range?
[pub] fun _opAdd(a i32, b i32) i32 extern
[pub] fun _opSub(a i32, b i32) i32 extern
[pub] fun _opNeg(a i32) i32 extern
[pub] fun _opMul(a i32, b i32) i32 extern
[pub] fun _opDiv(a i32, b i32) i32 extern
[pub] fun _opRem(a i32, b i32) i32 extern
[pub] fun _opBitNot(a i32) i32 extern
[pub] fun _opBitAnd(a i32, b i32) i32 extern
[pub] fun _opBitOr(a i32, b i32) i32 extern
[pub] fun _opBitXor(a i32, b i32) i32 extern
[pub] fun _opBitShl(a i32, b int) i32 extern
[pub] fun _opBitShr(a i32, b int) i32 extern

[pub] fun (my i32) toStr() str extern
[pub] fun (my i32) toI8() ?i8 extern
[pub] fun (my i32) toByte() ?byte extern
[pub] fun (my i32) toI16() ?i16 extern
[pub] fun (my i32) toU16() ?u16 extern
[pub] fun (my i32) toU32() ?u32 extern
[pub] fun (my i32) toInt() int extern
[pub] fun (my i32) toF32() f32 extern
[pub] fun (my i32) toFloat() float extern
[pub] fun (my i32) toDecimal() Decimal extern    
[pub] fun (my i32) toI8Mask() i8 extern
[pub] fun (my i32) toByteMask() byte extern
[pub] fun (my i32) toI16Mask() i16 extern
[pub] fun (my i32) toU16Mask() u16 extern
[pub] fun (my i32) toU32Mask() u32 extern

// 32 bit unsigned integer
[pub]
type ro struct u32
    const __size int = 4
    const __align int = 4    
    const Zero u32 = 0
    const One u32 = 1
    const MinValue u32 = 0
    const MaxValue u32 = 4294967295
    const NanOrMin u32 = MinValue
    
[pub] fun (my u32) getHash() int extern
[pub] fun _opEq(a u32, b u32) bool extern
[pub] fun _opCmp(a u32, b u32) int extern
[pub] fun _opIn(a u32, b Range<u32>) bool extern
[pub] fun _opRange(a u32, b u32) Range<u32> extern // TBD: Generic function on range?
[pub] fun _opAdd(a u32, b u32) u32 extern
[pub] fun _opSub(a u32, b u32) u32 extern
[pub] fun _opNeg(a u32) u32 extern
[pub] fun _opMul(a u32, b u32) u32 extern
[pub] fun _opDiv(a u32, b u32) u32 extern
[pub] fun _opRem(a u32, b u32) u32 extern
[pub] fun _opBitNot(a u32) u32 extern
[pub] fun _opBitAnd(a u32, b u32) u32 extern
[pub] fun _opBitOr(a u32, b u32) u32 extern
[pub] fun _opBitXor(a u32, b u32) u32 extern
[pub] fun _opBitShl(a u32, b int) u32 extern
[pub] fun _opBitShr(a u32, b int) u32 extern

[pub] fun (my u32) toStr() str extern
[pub] fun (my u32) toI8() ?i8 extern
[pub] fun (my u32) toByte() ?byte extern
[pub] fun (my u32) toI16() ?i16 extern
[pub] fun (my u32) toU16() ?u16 extern
[pub] fun (my u32) toI32() ?i32 extern        
[pub] fun (my u32) toInt() int extern
[pub] fun (my u32) toU64() u64 extern
[pub] fun (my u32) toF32() f32 extern
[pub] fun (my u32) toFloat() float extern
[pub] fun (my u32) toDecimal() Decimal extern        
[pub] fun (my u32) toI8Mask() i8 extern
[pub] fun (my u32) toByteMask() byte extern
[pub] fun (my u32) toI16Mask() i16 extern
[pub] fun (my u32) toU16Mask() u16 extern
[pub] fun (my u32) toI32Mask() i32 extern

// 64 bit integer
[pub]
type ro struct int
    const __size int = 8
    const __align int = 8    
    const Zero int = 0
    const One int = 1
    const MinValue int = -9223372036854775808
    const MaxValue int = 9223372036854775807
    const NanOrMin int = MinValue    

[pub] fun (my int) getHash() int extern
[pub] fun _opEq(a int, b int) bool extern
[pub] fun _opCmp(a int, b int) int extern
[pub] fun _opIn(a int, b Range<int>) bool extern
[pub] fun _opRange(a int, b int) Range<int> extern // TBD: Generic function on range?
[pub] fun _opAdd(a int, b int) int extern
[pub] fun _opSub(a int, b int) int extern
[pub] fun _opNeg(a int) int extern
[pub] fun _opMul(a int, b int) int extern
[pub] fun _opDiv(a int, b int) int extern
[pub] fun _opRem(a int, b int) int extern
[pub] fun _opBitNot(a int) int extern
[pub] fun _opBitAnd(a int, b int) int extern
[pub] fun _opBitOr(a int, b int) int extern
[pub] fun _opBitXor(a int, b int) int extern
[pub] fun _opBitShl(a int, b int) int extern
[pub] fun _opBitShr(a int, b int) int extern

[pub] fun (my int) toStr() str extern
[pub] fun (my int) toI8() ?i8 extern
[pub] fun (my int) toByte() ?byte extern
[pub] fun (my int) toI16() ?i16 extern
[pub] fun (my int) toU16() ?u16 extern
[pub] fun (my int) toI32() ?i32 extern
[pub] fun (my int) toU32() ?u32 extern
[pub] fun (my int) toU64() ?u64 extern    
[pub] fun (my int) toF32() f32 extern
[pub] fun (my int) toFloat() float extern
[pub] fun (my int) toDecimal() Decimal extern
[pub] fun (my int) toI8Mask() i8 extern
[pub] fun (my int) toByteMask() byte extern
[pub] fun (my int) toI16Mask() i16 extern
[pub] fun (my int) toU16Mask() u16 extern
[pub] fun (my int) toI32Mask() i32 extern
[pub] fun (my int) toU32Mask() u32 extern
[pub] fun (my int) toU64Mask() u64 extern

// 64 bit unsigned integer
[pub]
type ro struct u64
    const __size int = 8
    const __align int = 8    
    const Zero u64 = 0
    const One u64 = 1
    const MinValue u64 = 0
    const MaxValue u64 = 18446744073709551615
    const NanOrMin u64 = MinValue

[pub] fun (my u64) getHash() int extern
[pub] fun _opEq(a u64, b u64) bool extern
[pub] fun _opCmp(a u64, b u64) int extern
[pub] fun _opIn(a u64, b Range<u64>) bool extern
[pub] fun _opRange(a u64, b u64) Range<u64> extern // TBD: Generic function on range?
[pub] fun _opAdd(a u64, b u64) u64 extern
[pub] fun _opSub(a u64, b u64) u64 extern
[pub] fun _opNeg(a u64) u64 extern
[pub] fun _opMul(a u64, b u64) u64 extern
[pub] fun _opDiv(a u64, b u64) u64 extern
[pub] fun _opRem(a u64, b u64) u64 extern
[pub] fun _opBitNot(a u64) u64 extern
[pub] fun _opBitAnd(a u64, b u64) u64 extern
[pub] fun _opBitOr(a u64, b u64) u64 extern
[pub] fun _opBitXor(a u64, b u64) u64 extern
[pub] fun _opBitShl(a u64, b int) u64 extern
[pub] fun _opBitShr(a u64, b int) u64 extern
[pub] fun _opBitShr(a u64, b u64) u64 extern
[pub] fun _opBitShl(a u64, b u64) u64 extern

[pub] fun (my u64) toStr() str extern
[pub] fun (my u64) toI8() ?i8 extern
[pub] fun (my u64) toByte() ?byte extern
[pub] fun (my u64) toI16() ?i16 extern
[pub] fun (my u64) toU16() ?u16 extern
[pub] fun (my u64) toI32() ?i32 extern
[pub] fun (my u64) toU32() ?u32 extern
[pub] fun (my u64) toInt() ?int extern
[pub] fun (my u64) toF32() f32 extern
[pub] fun (my u64) toFloat() float extern
[pub] fun (my u64) toDecimal() Decimal extern
[pub] fun (my u64) toI8Mask() i8 extern
[pub] fun (my u64) toByteMask() byte extern
[pub] fun (my u64) toI16Mask() i16 extern
[pub] fun (my u64) toU16Mask() u16 extern
[pub] fun (my u64) toI32Mask() i32 extern
[pub] fun (my u64) toU32Mask() u32 extern
[pub] fun (my u64) toIntMask() int extern

[pub]
type ro struct i128
    const __size int = 16
    const __align int = 16

[pub]
type ro struct u128
    const __size int = 16
    const __align int = 16

// 32 bit floating point value
[pub]
type ro struct f32
    const __size int = 4
    const __align int = 4    
    const Zero f32 = 0
    const One f32 = 1
    const MinValue f32 = -3.40282347E+38F
    const MaxValue f32 = 3.40282347E+38F
    const NanOrMin f32 = MinValue    
    const epsilon f32 = 1.401298E-45F
    const infinity f32 = 1F/0F
    const negativeInfinity f32 = -1F/0F
    const nan f32 = 0f32/0f32
    const PI f32 = 3.141592653589793238
    const E f32 = 2.718281828459045235

[pub] fun (my f32) getHash() int extern
[pub] fun _opEq(a f32, b f32) bool extern
[pub] fun _opCmp(a f32, b f32) int extern
[pub] fun _opEqUnordered(a f32, b f32) bool extern
[pub] fun _opGtUnordered(a f32, b f32) bool extern
[pub] fun _opGeUnordered(a f32, b f32) bool extern
[pub] fun _opLtUnordered(a f32, b f32) bool extern
[pub] fun _opLeUnordered(a f32, b f32) bool extern
[pub] fun _opIn(a f32, b Range<f32>) bool extern
[pub] fun _opRange(a f32, b f32) Range<i32> extern // TBD: Generic function on range?
[pub] fun _opAdd(a f32, b f32) f32 extern
[pub] fun _opSub(a f32, b f32) f32 extern
[pub] fun _opNeg(a f32) f32 extern
[pub] fun _opMul(a f32, b f32) f32 extern
[pub] fun _opDiv(a f32, b f32) f32 extern
[pub] fun _opRem(a f32, b f32) f32 extern

[pub] fun (my f32) isInfinity() bool extern
[pub] fun (my f32) isNan() bool extern
[pub] fun (my f32) isNegInfinity() bool extern
[pub] fun (my f32) isPosInfinity() bool extern        

[pub] fun (my f32) toStr() str extern
[pub] fun (my f32) toByte() ?byte extern
[pub] fun (my f32) toInt() ?int extern
[pub] fun (my f32) toU64() ?u64 extern
[pub] fun (my f32) toFloat() float extern
[pub] fun (my f32) toDecimal() Decimal extern    
[pub] fun (my f32) toByteMask() byte extern
[pub] fun (my f32) toIntMask() int extern
[pub] fun (my f32) toU64Mask() u64 extern

// 64 bit floating point value
[pub]
type ro struct float
    const __size int = 8
    const __align int = 8    
    const Zero float = 0
    const One float = 1
    const MinValue float = -1.7976931348623157E+308
    const MaxValue float = 1.7976931348623157E+308
    const NanOrMin float = MinValue    
    const epsilon float = 4.94065645841247E-324
    const infinity float = 1.0/0.0
    const negativeInfinity float = -1.0/0.0
    const nan float = 0Float/0Float
    const PI float = 3.141592653589793238
    const E float = 2.718281828459045235

[pub] fun (my float) getHash() int extern
[pub] fun _opEq(a float, b float) bool extern
[pub] fun _opCmp(a float, b float) int extern
[pub] fun _opEqUnordered(a float, b float) bool extern
[pub] fun _opGtUnordered(a float, b float) bool extern
[pub] fun _opGeUnordered(a float, b float) bool extern
[pub] fun _opLtUnordered(a float, b float) bool extern
[pub] fun _opLeUnordered(a float, b float) bool extern
[pub] fun _opIn(a float, b Range<float>) bool extern
[pub] fun _opRange(a float, b float) Range<float> extern // TBD: Generic function on range?
[pub] fun _opAdd(a float, b float) float extern
[pub] fun _opSub(a float, b float) float extern
[pub] fun _opNeg(a float) float extern
[pub] fun _opMul(a float, b float) float extern
[pub] fun _opDiv(a float, b float) float extern
[pub] fun _opRem(a float, b float) float extern

[pub] fun (my float) isInfinity() bool extern
[pub] fun (my float) isNan() bool extern
[pub] fun (my float) isNegInfinity() bool extern
[pub] fun (my float) isPosInfinity() bool extern        

[pub] fun (my float) toStr() str extern
[pub] fun (my float) toByte() ?byte extern
[pub] fun (my float) toInt() ?int extern
[pub] fun (my float) toU64() ?u64 extern
[pub] fun (my float) toDecimal() Decimal extern
[pub] fun (my float) toByteMask() byte extern
[pub] fun (my float) toIntMask() int extern
[pub] fun (my float) toU64Mask() u64 extern
[pub] fun (my float) toF32Clamp() f32 extern

// 128 bit decimal integer.  This will support nan, infinity, and
// exponents covering the entire range of float with more precision.
[pub]
type ro struct Decimal
    const __size int = 16
    const __align int = 16
    const Zero Decimal = 0
    const One Decimal = 1
    const MinValue Decimal = -1E+1000M
    const MaxValue Decimal = 1E+1000M
    const NanOrMin Decimal = MinValue    
    const infinity Decimal = 1.0/0.0
    const negativeInfinity Decimal = -1.0/0.0
    const nan Decimal = 0.0/0.0
    
[pub] fun (my Decimal) getHash() int extern
[pub] fun _opEq(a Decimal, b Decimal) bool extern
[pub] fun _opCmp(a Decimal, b Decimal) int extern
[pub] fun _opEqUnordered(a Decimal, b Decimal) bool extern
[pub] fun _opGtUnordered(a Decimal, b Decimal) bool extern
[pub] fun _opGeUnordered(a Decimal, b Decimal) bool extern
[pub] fun _opLtUnordered(a Decimal, b Decimal) bool extern
[pub] fun _opLeUnordered(a Decimal, b Decimal) bool extern
[pub] fun _opIn(a Decimal, b Range<Decimal>) bool extern
[pub] fun _opRange(a Decimal, b Decimal) Range<i32> extern // TBD: Generic function on range?
[pub] fun _opAdd(a Decimal, b Decimal) Decimal extern
[pub] fun _opSub(a Decimal, b Decimal) Decimal extern
[pub] fun _opNeg(a Decimal) Decimal extern
[pub] fun _opMul(a Decimal, b Decimal) Decimal extern
[pub] fun _opDiv(a Decimal, b Decimal) Decimal extern
[pub] fun _opRem(a Decimal, b Decimal) Decimal extern

[pub] fun (my Decimal) isInfinity() bool extern
[pub] fun (my Decimal) isNan() bool extern
[pub] fun (my Decimal) isNegInfinity() bool extern
[pub] fun (my Decimal) isPosInfinity() bool extern

[pub] fun (my Decimal) toStr() str extern
[pub] fun (my Decimal) toByte() ?byte extern
[pub] fun (my Decimal) toInt() ?int extern
[pub] fun (my Decimal) toU64() ?u64 extern
[pub] fun (my Decimal) toByteMask() byte extern
[pub] fun (my Decimal) toIntMask() int extern
[pub] fun (my Decimal) toU64Mask() u64 extern
[pub] fun (my Decimal) toIntClamp() int extern
[pub] fun (my Decimal) toF32Clamp() f32 extern
[pub] fun (my Decimal) toFloatClamp() float extern

// This will represent a time/date in UTC with timezone, wall clock,
// and monotonic clock, similar to Golang time https://pkg.go.dev/time
[pub] type ro struct Time
    _low u64
    _high u32
    _tz u32