
mod Unfinished

use Zurfur[Log, Iterator]
use Zurfur.Draw2d[Point, Size]


type VariantMap
    notDone Int

fun test_Main(args Array<Str>)
        
    @sum = 0
    @list List<Int>
    list.forEach(@item => { sum += item })


// https://stackoverflow.com/questions/1825952/how-to-create-a-generic-extension-method
fun Iterator.alphaLengthWise<Item, L>(lengthProvider fun(t Item) L) Iterator<Item>
    return my.orderBy<Item, L>(@a => lengthProvider(a))
             .thenBy<Item, L>(@a => a)
fun Iterator.orderBy<Source,Key>(keySelector fun(i Source)Key) Iterator<Source>
    extern
fun Iterator.thenBy<Source,Key>(keySelector fun(i Source)Key) Iterator<Source>
    extern

fun mut Iterator.find<T>(f fun(item T) Bool) mut ?ref T
    while my.next()@item
        if f(item)
            return ref item
    return nil

fun test_Convert()
    @a = List<F64>()
    @b = List<Int>()
    @c = a.convert<F64,Int>(@i => i.toIntMask)

fun Span.sort<T>(lessThan fun(a T,b T)Bool)
    // Simple selection sort
    for @i in my.len-1
        @lowElem = my[i]
        @lowIndex = i
        for @j in i+1..my.len
            if lessThan(my[j], lowElem)
                lowElem = my[j]
                lowIndex = j
        if lowIndex != i
            my[lowIndex] = my[i]
            my[i] = lowElem

type Label
    text Str
    location Point<Int>
    size Size<Int>
    
type MyForm
    message1 Label
    message2 Label

//fun MakeGui()
//    @form = MyForm(
//        message1: Label(
//            text: "Message 1",
//            location: Point(4, 4),
//            size: Size(100, 24)),
//        message2: Label(
//            text: "Message 1",
//            location: Point(4, 4),
//            size: Size(100, 24))   
//        )
//                   
//    @x VariantMap = ["Hello":"a",
//                  "World":"b",
//                  "List":[1,2,3]]

// TBD: Still working out how to do this:
//
//[pub] fun mut Iterator.filter(f fun(item Item) Bool) FilterIterator<Iterator<Item>, Item>
//    return FilterIterator<This, Item>(this, f)
//        
//type ref FilterIterator<Iter, Item>
//        where Iter is Iterator<Item>
//    @iter ref Iter pub init
//    @f ref fun(item Item) Bool pub init
//
//fun test_Filter() Array<Int>
//    @listIn = [1,2,3,4,5]
//    return listIn.filter(@n => n in 2..5).toArray()
            