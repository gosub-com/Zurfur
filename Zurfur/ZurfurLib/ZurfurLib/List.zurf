use Zurfur.Unsafe
use Zurfur.Compiler.Internal

namespace Zurfur

/// This is the lowest level array type in Zurfur.
/// All dynamically sized objects should build from this.
/// Mutating the list count (or deleting it) while a
/// span exists causes a run-time error in debug mode
/// or a memory leak in release mode.  Always memory safe.
pub class List<T>
    implements Collection<T>
{
    pub const MaxItems uint = uint.Max/4/Math.Max(1,sizeof(t))

    // The GC will follow this pointer because it is special.
    // `items` is never referenced when count is zero, so
    // we can cast (unsafely) to follow without checking for null
    @items  *GcRefArray<T>
    @Count int pub get
    @Version int pub get  // Increment when Count changes
    
    pub fun new(capacity int)
    {
        SetCapacity(capacity)
    }

    fun drop mut()
    {
        if items == null
            return
        if items.Ref != 1
        {
            Count = 0
            items.Ref -= 1
            Log.PanicInDebugMode("Drop while span exists")
            return
        }
        Clear()
        unsafe dlMalloc.Free(items)
        items = null
    }

    pub fun IncVersion()
    {
        Version = Version + 1
    }
    
    /// Grow the capacity to be at least minCount size.
    /// If minCount is <= capacity nothing happens,
    /// otherwise the list is expanded exponentially.
    pub fun Grow(minCapacity int)
    {
        if minCapacity <= items.Count
            return
        @newCap = Math.Max(capacity*2, minCount)
        if sizeof(T) == 1
            newCap = Math.Max(newCap, 12)
        else if sizeof(T) <= 64
            newCap = Math.Max(newCap, 4)
        else
            newCap = Math.Max(newCap, 1)
        SetCapacity(newCap)
    }
    
    pub fun Trim(extra int = 0)
    {
        SetCapacity(Count + extra)
    }
    
    // Set the capacity, won't shrink below count.
    // Always makes a copy, even if capacity is the same.
    fun SetCapacity(capacity int)
    {
        IncVersion()
        @capacity = Math.Max(capacity, Count)
        Debug.PanicIf(uint(capacity) > MaxItems)
        
        // Move items into new array
        @oldItems = items
        if capacity != 0
        {
            items = unsafe cast(*T)DlMalloc.Calloc(sizeof(T)*capacity)
            *items = GcRefArray(Count:capacity, Ref:oldItems.Ref)
            unsafe MemCopy32(items.Data, oldItems.Data, sizeof(T)*Count)
        }
        else
        {
            items = null
        }

        // Delete old array if possible
        if oldItems != null
        {
            items.Ref -= 1
            if oldItems.Ref != 0
            {
                Log.PanicInDebugMode("Mutate list capacity while span exists")
                return
            }
            unsafe DlMalloc.Free(oldItems)
        }
        
    }


    pub fun new(items []T)
    {
    }
    
    pub fun new(items Collection<T>)
    {
    }


    
    pub fun Clear mut()
        return todo()
    pub fun Push mut(item T)
        return todo()
    pub fun Push mut(items Span<T>)
        return todo()
    pub fun Pop mut() ?T
        return todo()
    pub fun Insert mut(index int, item T)
        return todo()
    pub fun Insert mut(index int, items Span<T>)
        return todo()
    pub fun Insert mut(index int, items Collection<T>)
        return todo()
    pub fun Remove mut(index int)
        return todo()
    pub fun Remove mut(range Range<int>)
        return todo()
    pub fun Convert<Tout>(f fun(item T)Tout)
        return todo()
    pub fun Find(f fun(item T))
        return todo()
    pub fun Sort mut(compare fun(a T, b T)bool)
        return todo()
    pub fun Sort mut(compare fun(a T, b T)bool, range Range<int>)
        return todo()

    pub fun Remove(test fun(item T) bool exit) exit
    {
        @v = Version
        @si = 0
        @di = 0
        while si < Count
        {
            @remove = test(items[si])
            if v != Version
                throw InvalidIteratorException()
            if !remove
            {
                if si != di
                    { items[di] = itmes[si]}
                di += 1
            }
            si += 1
        }
        Remove(di:si)
        return
    error:
        if v != Version
            throw InvalidIteratorException()
        Remove(di:si)
    }

    // Usage: myList.For @item => DoStuffWithItem()
    pub fun For(f fun(item mut T) exit) exit
    {
        @v = Version
        for @i in Count
        {
            f(items[i])
            if v != Version
                throw InvalidIteratorException()
        }
    }

    pub fun operator[](index int) ref mut T
       return todo()

    pub fun operator[](range Range<int>) ref mut ListSpan<T>
       return todo()

    // TBD: Implement ListSpan
    pub struct ListSpan<T>
    {
        
    }

    // TBD: Verify that it's impossible to get a mutable
    //      ListIterator from an immutable list reference
    pub fun GetIterator ref() ListIterator<T>
    {
        return ListIterator<T>(this)
    }

    pub struct ref ListIterator<T>
        implements Iterator<T>
    {
        @list ref List<T>
        @version int
        @index int = -1
        
        pub fun new(list ref List<T>)
        {
            this.list = ref list
            version = list.Version
        }
            
        pub fun Next mut() ?ref T
        {
            if version != list.Version
                throw InvalidIteratorException()
            index += 1
            if index < list.Count
                return ref list[index]
            return null
        }

    }
               
}