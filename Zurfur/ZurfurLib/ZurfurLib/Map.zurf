
mod Zurfur

use Zurfur.Operators[OpEq]
use Zurfur.Collections[Iterator, Iterable]



// Entries in the bucket list
type MapEntry(index u32, hash u32)


// Key value pair
[pub]
type KvPair<K,V>
        where K has OpEq<K>
    key K pub ref
    value V pub mut

// A map is a hash table
[pub]
type Map<K,V>
        where K has OpEq<K>
    _items List<KvPair<K,V>>
    _buckets List<MapEntry>



// TBD: Need this: fun (kv Map<K,V>.Pair) ...
[pub]
fun KvPair<K,V>.new(key own K, value own V)
    my.key = key
    my.value = value


[pub]
fun Map<K,V>.new(capacity int)
    extern
    
[pub]
fun Map<K,V>.new(keyValues Iterator<KvPair<K,V>>)
    extern
    
[pub]
fun get Map<K,V>.len() int
    extern

// TBD: Figure out map["Hello"] += 1
[pub static]
fun Map<K,V>._opIndex(map Map<K,V>, key K) mut ?ref V
    extern

// TBD: An indexer with 3 inputs???
[pub static]
fun Map<K,V>._opIndex(map Map<K,V>, key K, item V)
    extern

[pub]
fun Map<K,V>.contains(key K) bool
    extern

// TBD: Return Iterable<(K, V)>???
[pub]
fun get Map<K,V>.iterator() mut Iterator<KvPair<K,V>>
    extern

[pub]
fun get Map<K,V>.keys() Iterator<K>
    extern

[pub]
fun get Map<K,V>.values() mut Iterator<V>
    extern

[pub]
fun mut Map<K,V>.clear()
    extern

[pub]
fun mut Map<K,V>.add(item KvPair<K,V>)
    extern

[pub]
fun mut Map<K,V>.add(items Iterator<KvPair<K,V>>)
    extern

[pub]
fun mut Map<K,V>.remove(key K) bool
    extern

    