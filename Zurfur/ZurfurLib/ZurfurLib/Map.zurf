use Zurfur

module Zurfur

type pub Map<TKey, TValue>
    where TKey is Equatable<TKey>
{
    fun pub new(capacity int)
        where TKey is Equatable<TKey>:
        return todo()
    fun pub new(keyValues Collection<Pair<TKey, TValue>>):
        return todo()
    get pub Count() int:
        return todo()
    fun pub operator in(a TKey) bool:
        return todo()

    // TBD: Figure out map["Hello"] += 1 
    get pub operator[](key TKey) ?ref mut TValue:
        return todo()
    set pub operator[](key TKey, value own TValue):
        return todo()


    fun pub Contains(key TKey) bool:
        return todo()
    fun pub Get(key TKey) TValue:
        return todo()
    fun pub Get(key TKey, defaultValue TValue) TValue:
        return todo()
    fun pub TryGet(key TKey) ?TValue:
        return todo()
    get pub Keys() Collection<TKey>:
        return todo()
    get pub Values() Collection<TValue>:
        return todo()
    fun pub mut Clear():
        return todo()
    fun pub mut Add(item Pair<TKey, TValue>):
        return todo()
    fun pub mut Add(items Collection<Pair<TKey, TValue>>):
        return todo()
    fun pub mut Remove(key TKey) bool:
        return todo()
}