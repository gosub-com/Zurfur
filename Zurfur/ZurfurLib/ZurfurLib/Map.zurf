
module Zurfur

use Zurfur.Operators[OpIn, OpEq, GetHash]
use Zurfur.Collections[Iterator, Iterable]



pub type Map<K,V>
    @items List<str> // TBD: Buffer of items in hash table

    // TBD: Allow this
    //type Pair
    //    @key K pub ref
    //    @value V pub ref mut

// TBD: This wants to be inside Map<K,V>
type KvPair<K,V>
    @key K pub ref
    @value V pub ref mut

// TBD: Need this: fun (kv Map<K,V>.Pair) ...
fun pub (kv KvPair<K,V>) new(key own K, value own V)
    kv.key = key
    kv.value = value


fun pub (m Map<K,V>) new(capacity int)
    return todo()
    
fun pub (m Map<K,V>) new(keyValues Iterator<KvPair<K,V>>)
    return todo()
    
get pub (m Map<K,V>) count() int
    return todo()

// TBD: Figure out map["Hello"] += 1
get pub (m Map<K,V>) op_index(key K) ?ref V
    return todo()

set pub mut (m Map<K,V>) op_index(key K) mut ref V
    todo()

fun pub (m Map<K,V>) contains(key K) bool
    return todo()

// TBD: Return Iterable<(K, V)>???
get pub (m Map<K,V>) iterator() ref mut Iterable<KvPair<K,V>>
    return todo

get pub (m Map<K,V>) keys() ref mut Iterator<K>
    return todo()

get pub (m Map<K,V>) values() ref mut Iterator<V>
    return todo()

fun pub mut (m Map<K,V>) clear()
    return todo()

fun pub mut (m Map<K,V>) add(item KvPair<K,V>)
    return todo()

fun pub mut (m Map<K,V>) add(items Iterator<KvPair<K,V>>)
    return todo()

fun pub mut (m Map<K,V>) remove(key K) bool
    return todo()

    