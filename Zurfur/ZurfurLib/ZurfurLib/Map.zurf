use Zurfur

namespace Zurfur

pub class Map<TKey, TValue>
    where TKey is IEquatable<TKey>
{
    pub fun new(capacity int)
        where TKey is IEquatable
        return todo()
    pub fun new(keyValues Collection<Pair<TKey, TValue>>)
        return todo()
    pub prop Count int
        return todo()
    pub fun operator in(a TKey) bool
        return todo()
    pub fun operator[](key TKey) ref TValue
        return todo()
    pub fun Contains(key TKey) bool
        return todo()
    pub fun Get(key TKey) TValue
        return todo()
    pub fun Get(key TKey, defaultValue TValue) TValue
        return todo()
    pub fun TryGet(key TKey) ?TValue
        return todo()
    pub prop Keys Collection<TKey>
        return todo()
    pub prop Values Collection<TValue>
        return todo()
    pub fun Clear mut()
        return todo()
    pub fun Add mut(item Pair<TKey, TValue>)
        return todo()
    pub fun Add mut(items Collection<Pair<TKey, TValue>>)
        return todo()
    pub fun Remove mut(key TKey) bool
        return todo()
}