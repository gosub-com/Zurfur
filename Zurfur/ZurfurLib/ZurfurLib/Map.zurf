use Zurfur
use Zurfur.Operators
use Zurfur.Collections

module Zurfur

type KvPair<TKey,TValue>
{
    @key TKey pub ref
    @value TValue pub ref mut

    fun pub new(key own TKey, value own TValue):
        this.key = key
        this.value = value
    
}

type pub Map<TKey, TValue>
    impl OpContains<TKey>, GetIterator<ref T>
    where TKey is OpEquals<TKey> + GetHash
{
    fun pub new(capacity int):
        return todo()
    fun pub new(keyValues Iterator<KvPair<TKey, TValue>>):
        return todo()
    get count() int:
        return todo()

    // TBD: Figure out map["Hello"] += 1
    get op_index(key TKey) ?ref TValue:
        return todo()
    get op_index(key TKey, d TValue = default(TValue)) ref TValue:
        return todo()
    set mut op_index(key TKey) mut ref TValue:
        todo()


    fun pub contains(key TKey) bool:
        return todo()
    get keys() Collection<TKey>:
        return todo()
    get values() Collection<TValue>:
        return todo()
    fun pub mut clear():
        return todo()
    fun pub mut add(item KvPair<TKey, TValue>):
        return todo()
    fun pub mut add(items Iterator<KvPair<TKey, TValue>>):
        return todo()
    fun pub mut remove(key TKey) bool:
        return todo()
}