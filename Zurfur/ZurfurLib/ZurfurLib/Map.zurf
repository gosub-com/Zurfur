namespace Zurfur

pub class Map<TKey, TValue> 
    implements IMutMap<TKey, TValue>
{
    ro @compareFunc fun<TKey, TKey, bool>
    ro @hashFunc fun<TKey, bool>
    

    pub fun new()
        where TKey is IEquatable<TKey>
    {
        compareFunc = (a, b) -> TKey.Compare(a, b)
        hashFunc = (a) -> TKey.GetHashCode(a)
    }
    
    pub fun new(compare fun<TKey, TKey, bool>, 
                hash fun<TKey, unit>)
    {
        compareFunc = compare;
        hashFunc = hash;
    }
    
    pub fun new(capacity int) 
        where TKey is IEquatable
        => todo()
        
    pub fun new(keyValues ICollection<KeyValuePair<TKey, TValue>>) => todo()
    
    pub prop Count int => todo()

    pub fun operator in(a TKey) bool => todo()
    pub fun operator[](key TKey) TValue { get => todo() set => todo() }
    
    pub fun Contains(key TKey) bool => todo()
    pub fun Get(key TKey) TValue => todo()
    pub fun Get(key TKey, defaultValue TValue) TValue => todo()
    pub fun TryGet(key TKey, value out ?TValue) bool => todo()
    pub prop Keys ICollection<TKey> { get => todo() }
    pub prop Values ICollection<TValue> { get => todo() }

    pub fun mut Clear() => todo()
    pub fun mut Add(item KeyValue<TKey, TValue>) => todo()    
    pub fun mut Add(items ICollection<KeyValue<TKey, TValue>>) => todo()    
    pub fun mut Remove(TKey key) bool => todo()
}