use Zurfur

namespace Zurfur

pub type Map<TKey, TValue>
    where TKey is IEquatable<TKey>
{
    pub fun new(capacity int) void
        where TKey is IEquatable
        return todo()
    pub fun new(keyValues Collection<Pair<TKey, TValue>>) void
        return todo()
    pub prop Count int
        return todo()
    pub fun operator in(a TKey) bool
        return todo()
    pub fun operator[](key TKey) ref TValue
        return todo()
    pub fun Contains(key TKey) bool
        return todo()
    pub fun Get(key TKey) TValue
        return todo()
    pub fun Get(key TKey, defaultValue TValue) TValue
        return todo()
    pub fun TryGet(key TKey) ?TValue
        return todo()
    pub prop Keys Collection<TKey>
        return todo()
    pub prop Values Collection<TValue>
        return todo()
    pub fun mut Clear() void
        return todo()
    pub fun mut Add(item Pair<TKey, TValue>) void
        return todo()
    pub fun mut Add(items Collection<Pair<TKey, TValue>>) void
        return todo()
    pub fun mut Remove(key TKey) bool
        return todo()
}