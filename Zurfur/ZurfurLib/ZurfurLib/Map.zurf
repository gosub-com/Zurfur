namespace Zurfur

pub class mut Map<TKey, TValue> 
    : IMutMap<TKey, TValue>
{
    compareFunc func(a TKey, b TKey) bool;
    hashFunc func(a TKey) bool;
    

    pub new() where TKey : IEquatable<TKey>
    {
        compareFunc = (a, b) -> TKey.Compare(a, b)
        hashFunc = (a) -> TKey.GetHashCode(a)
    }
    pub new(compare func(a TKey, b TKey) bool, 
        getHashCode func(a TKey) uint)
    {
        compareFunc = compare;
        hashFunc = getHashCode;
    }
    pub new(capacity int) where TKey : IEquatable
        => todo()
    pub new(keyValues ICollection<KeyValuePair<TKey, TValue>>) => todo()
    
    pub prop Count int => todo()
    pub operator in(a TKey) bool => todo()
    
    pub func Contains(key TKey) bool => todo()
    pub func Get(key TKey) TValue => todo()
    pub func Get(key TKey, defaultValue TValue) TValue => todo()
    pub func TryGet(key TKey, value out ?TValue) bool => todo()
    pub prop Keys ICollection<TKey> { get => todo() }
    pub prop Values ICollection<TValue> { get => todo() }

    pub operator[](key TKey) TValue { get => todo() set => todo() }
    pub func mut Clear() => todo()
    pub func mut Add(item KeyValue<TKey, TValue>) => todo()    
    pub func mut Add(items ICollection<KeyValue<TKey, TValue>>) => todo()    
    pub func mut Remove(TKey key) bool => todo()
}