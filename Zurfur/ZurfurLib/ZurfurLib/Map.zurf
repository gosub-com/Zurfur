namespace Zurfur

pub class Map<TKey, TValue>
{
    ro compareFunc fun(a TKey, b TKey)bool
    ro hashFunc fun(key TKey)uint
    

    pub fun new()
        where TKey is IEquatable<TKey>
    {
        compareFunc = @(a, b) => TKey.Compare(a, b)
        hashFunc = @a => TKey.GetHashCode(a)
    }
    
    pub fun new(compare fun(a TKey, b TKey)bool,
                hash fun(key TKey)uint)
    {
        compareFunc = compare
        hashFunc = hash
    }
    
    pub fun new(capacity int)
        where TKey is IEquatable
        => todo()
        
    pub fun new(keyValues ICollection<Pair<TKey, TValue>>) => todo()
    
    pub prop Count int => todo()

    pub fun operator in(a TKey) bool => todo()
    pub fun operator[](key TKey) ref TValue
        => todo()
    
    pub fun Contains(key TKey) bool => todo()
    pub fun Get(key TKey) TValue => todo()
    pub fun Get(key TKey, defaultValue TValue) TValue => todo()
    pub fun TryGet(key TKey) ?TValue => todo()
    pub prop Keys ICollection<TKey> => todo()
    pub prop Values ICollection<TValue> { get: todo() }

    pub fun Clear mut() => todo()
    pub fun Add mut(item KeyValue<TKey, TValue>) => todo()
    pub fun Add mut(items ICollection<KeyValue<TKey, TValue>>) => todo()
    pub fun Remove mut(TKey key) bool => todo()
}