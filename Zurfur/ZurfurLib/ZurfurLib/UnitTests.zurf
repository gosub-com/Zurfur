///
/// This is where we will keep working unit tests.
/// Nothing works yet.
///

namespace Zurfur.UnitTests

static fun test_HelloWorld()
{
    Console.Log("Hello World.  Let's count to 10.")
    for a in 1..11
    {
        Console.Log("Count=" + a) 
    }
}

pub class Example
{
    var info str                  // Private string initialized to ""
    var array Array<int> = [1,2,3]          // Private mutable array
    var list List<str> = ["Hello", "World"] // Private mutable list
    var ro m Map<str,int> = ["A":1, "B":2]  // Private immutable map
    pub var ro Header str = "Zurfur"        // Public immutable string
    pub fun F(a int) int => m["A"]+10   // Public function
    pub prop P str => Header + info     // Public property
}

static fun test_ForSimple()
{

    var count int
    for a in 0..10
    {
        if a == 2
        {
            count += 100
        }
        else if a == 3 || a == 4
        {
            count += 1000
        }
        else if a == 5
        {
            count += 10000
            count += 10000
        }
        else
        {
            count += 100000
        }
        count += a
    }
    Console.Log("For loop: " + count == 622145 ? "Pass" : "Fail")
}


pub static fun test_Convert()
{
    var a = List<float>()
    var b = List<int>()
    var c = a.Convert((i) -> cast int(i))
}


pub unsealed class TestGuiForm extends Form
{
    pub var Message1 Label
    pub var Message2 Label
    pub var Message3 Label


    fun new()
    {
        InitializeComponent()
    }
   
   
    [NewCallableAttribute()]
    fun InitializeComponent()
    {
    
        Message1 = Label(Text: "Message 1",
                        Location: Point(X:4, Y:4),
                        Size: Size(Width:100,Height:24))
        Message2 = Label(Text: "Message 2",
                        Location: Point(100, 4),
                        Size: Size(100,24))
        Message3 = Label(Text: "Message 3",
                        Location.X: 200,
                        Size: Size(100,24))
                       
        var x Json = ["Hello":"a",
                      "World":"b",
                      "List":[1,2,3]]
    }
    
    pub static fun Create(message1 str, message2 str) TestGuiForm
    {
        return TestGuiForm(Message1.Text: message1,
                           Message2.Text: message2)
    }
}