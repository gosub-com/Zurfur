
namespace Zurfur.Compiler

pub class ro Attribute { }

pub class ro AlignAttribute(Size int)
    extends Attribute


namespace Zurfur.Compiler.Internal

// TBD: This will contain compiler generated metadata for each type
pub struct GcType { }


// Header for all heap objects
#Align(8)
pub struct ro GcObject<T>
{
    @Type *GcType pub get
    @refCount int // Might not exist in GC implementations
}

// Header for all heap array objects
// NOTE: refCount may not exist in GC implementations.
#Align(8)
pub struct ro GcArray<T>
{
    const DEFAULT_HASH uint = 0xFFFFFFFF
    @Type *GcType pub get
    @refCount int // Might not exist in GC implementations
    @Count uint pub get
    @hashCode uint = DEFAULT_HASH // Immutable type, so cache the hash
}

// This is the underlying array used by List<T>.
// Separate it from all other types since there is a chance
// it would be reference counted even in a GC implementation.
#Align(8)
pub struct ro GcRefArray<T>
{
    @Type *GcType pub get
    @RefCount uint pub get set
    @Count uint pub get

    pub fun new()
    {
        Type = todo()
    }

    // TBD: Need access to 'this' pointer (use 'ref' on property?)
    pub unsafe prop Data *T
        return cast(*T)(cast(xuint)&this + sizeof(GcRefArray<T>))

    // TBD: Need access to 'this' pointer (use 'ref' on function?)
    /// No bounds checking
    pub unsafe fun operator[](index int) *T
        return unsafe cast(*T)(cast(xuint)&this
                                + sizeof(GcRefArray<T>)
                                + sizeof(T)*index)
}