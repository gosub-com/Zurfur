
// Internal stuff for compiler, heap, and GC
module Zurfur.Internal

pragma AllowUnderscoreDefinitions

// Internal definition of a reference.
pub type ro __ref<T>
{
    @r ro *T

    pub fun new(reference *T)
        require reference != null
        r = reference
        
    pub fun Get() T extern
    pub fun SetRef(value ref T) extern
    pub fun SetVal(value T) extern
    pub unsafe fun Index(offset int) mut ref T extern
    pub unsafe fun ByteOffset(offset int) *void extern
}


// Owned reference.  This is specific to reference counting
// and wouldn't exist for a different kind of GC.
pub type ro __oref<T>
{
    @r *T
    @owner ?*__heap<T>

    // Owner is null when on the stack
    pub fun new(reference *T, owner ?*__heap<T>)
        require reference != null
        r = reference
        this.owner = owner

    pub fun drop()
        if owner != null
            owner.Dec()
        
    pub fun Get() T extern
    pub fun SetRef(value ref T) extern
    pub fun SetVal(value T) extern
    pub unsafe fun Index(offset int) mut ref T extern
    pub unsafe fun ByteOffset(offset int) *void extern
}


// All objects on the heap start with this header.
// This is specific to reference counted GC.
pub type __heap<T>
{
    @vtable *void // TBD: Type info for GC and metadata
    @refCount xint

    pub fun Inc()
        refCount += 1
        if refCount < 0
            todo() // TBD: Queue to call drop and reclaim memory
}