
namespace Zurfur.Compiler

pub type ro Attribute { }

pub type ro AlignAttribute
    extends Attribute
{
    pub ro Size int
}


namespace Zurfur.Compiler.Internal

// TBD: This will contain compiler generated metadata for each type
pub type GcType { }

// Header for all heap objects
pub type ro GcObject<T>
{
    pub ro Type *GcType
}

// Header for all heap arrays
[Align(8)]
pub type ro GcArray<T>
{
    pub ro Type  *GcType
    pub ro Count  uint
}

// Header for all reference counted heap arrays.
// This is the underlying array used by List<T>
[Align(8)]
pub type ro GcRefArray<T>
{
    pub ro      Type  *GcType
    pub ro init Count  uint
    pub         Ref    uint

    pub fun new()
    {
        Type = todo()
    }

    // TBD: Need access to 'this' pointer (use 'ref' on property?)
    pub unsafe prop Data *T
        => cast(*T)(cast(xuint)&this + sizeof(GcRefArray<T>))

    // TBD: Need access to 'this' pointer (use 'ref' on function?)
    /// No bounds checking
    pub unsafe fun operator[](index int) *T
    {
        return unsafe cast(*T)(cast(xuint)&this
                                + sizeof(GcRefArray<T>)
                                + sizeof(T)*index)
    }
}