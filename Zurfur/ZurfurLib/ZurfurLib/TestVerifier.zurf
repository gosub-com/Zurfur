// Misc compiler testing
module TestVerifier

use Zurfur
use Zurfur.Operators

// Comment out the next line to see verification errors
pragma NoParse
pragma ShowParse

// Disable compiler type checking so we can see verifier errors
pragma NoCompilerChecks

type OneGeneric<T> { } // No error expected here

type VerifyErrors<T>
    // Undefined/unresolved
    @field1 hello
    @field2 List<List<hello>>
    
    // Wrong number of type parameters
    @a List
    @b List<int,int>

// Duplicate
fun (v VerifyErrors<T>) VerifyErrors() void {} // TBD: Don't allow same name
fun (v VerifyErrors<T>) Y(Y int) void {}
fun (v VerifyErrors<T>) X(T int) void {} // TBD: Verifier should catch this
fun (v VerifyErrors<T>) IllegalGenericOverload<X>(a int) void { }
fun (v VerifyErrors<T>) IllegalGenericOverload(a byte) void { }

fun (v VerifyErrors<T>) BadOverload(a int) {  } // Dummy
fun (v VerifyErrors<T>) BadOverload(a int) int{  } // TBD: This overload should fail 

// Undefined/unresolved
fun pub (v VerifyErrors<T>) F4(a List<int,hello>) void { }
fun pub (v VerifyErrors<T>) F5(a List<List<x>>) void { }

// Wrong number of type parameters
fun pub (v VerifyErrors<T>) F1(a List) void { }
fun pub (v VerifyErrors<T>) F3(a List<int,int>) void { }

fun pub (v VerifyErrors<T>) fun1(a List<List<x>>) void { } // Undefined generic symbol
fun pub (v VerifyErrors<T>) fun2(a List) void { } // Wrong number of generic parameters
fun pub (v VerifyErrors<T>) fun3(a List<int,int>) void { } // Wrong number of generic parameters
fun pub (v VerifyErrors<T>) fun4(a List<List>) void { } // Wrong number of generic parameters
fun pub (v VerifyErrors<T>) fun5(a List<List<int,int>>) void { } // Wrong number of generic parameters
fun pub (v VerifyErrors<T>) fun6(a Zurfur) void {} // Symbol is a module
fun pub (v VerifyErrors<T>) fun7(a field1) void {} // Symbol is a field
fun pub (v VerifyErrors<T>) fun8(a fun1) void {} // Symbol is a method
fun pub (v VerifyErrors<T>) fun9(a *?OneGeneric) void { }    


