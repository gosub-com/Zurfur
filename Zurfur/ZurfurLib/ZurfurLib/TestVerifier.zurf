// Misc compiler testing
pragma ShowParse
use Zurfur

namespace TestVerifier

// Comment out the next line to see verification errors
pragma NoParse

type aStruct(a int)

pub type AGenericTest<T, QQQ>
    where QQQ is x//: new() where T : new()
{
    pub fun new() void
        nop()

    pub fun new(a int) void
        nop()
   
    pub fun P1() void { return 0; }
    pub fun P2<Quack>(a Quack, b QQQ) void { return (a.ToStr() + b.ToStr()).Length; }
    pub fun P3<Z>() void { return 0; }
    pub fun P4<Quack, Quack1>() void { return 0; }

    pub fun GenericTest<Q1, Q2>(a Q1, b Q2) void
        return a.ToStr().Length + b.ToStr().Length

    pub fun F1(a List) void { } // TBD: Need error here
    pub fun F2(a List<int>) void { }
    pub fun F3(a List<int,int>) void { } // TBD: Need error here
    pub fun F4(a List<int,hello>) void { } // TBD: need better error message
    pub fun F5(a List<List<x>>) void { } // TBD: need better error message


    @a List<int>
    @b List<int,int>
    @c List // TBD: Fix
    @XField0 int = 0
    @Xfield1 Inner1<str, aStruct>
    @Xfield2 Inner1<str, T>
    @Xfield3 Inner1<QQQ,T>
    @Xfield3a AGenericTest<T>.Inner1<QQQ, T>.Inner2<int, int> // TBD: Requires two type parameters
    @Xfield4 Inner1<str, T>.Inner2<int, int>
    @Xfield4a AATest.AGenericTest<T>.Inner1<QQQ, T>.T<int, int> // TBD: Bug (undefined T)
    @Xfield4b AATest.AGenericTest<T>.Inner1<QQQ, T>.Inner2<int> // TBD: Bug (wrong num of params for Inner2)
    @Xfield4c AATest.AGenericTest<T>.Inner1<QQQ, T>.Inner1<int, int> // TBD: Bug (Inner1 not acceptable)
    @Xfield4d AATest.AGenericTest<T>.Inner1<QQQ, T>.Inner2<int, int>
        = AATest.AGenericTest[T].Inner1[QQQ, T].Inner2[int, int]
    @Xfield5 Inner1<int, int>.Inner2<int, int>
    @Xfield6 Zurfur.int
    @Xfield7 AATest.AGenericTest<T>.Inner1<QQQ, T>.Inner2<int, int> // TBD: Follow the dot

    // TBD: Error because Inner1 requires 2 type parameters
    @Xfield8 Inner1<int>
    @Xfield9 XField0
    @Xfield10 Zurfur

    // TBD: Follow the dot
    pub fun UseIt(x Zurfur.int, y List<Inner1>, z List<str<int>>) void
    {
        XField0.ToStr()
        // Xfield2<str, T>.P3<T>(); - Xfield2 can't use type parameters
        // Xfield2.P3(); - Can't infer P3<type>
        Xfield2.P3<T>()
        @a = List<str, Outer<int, int>>()

        Inner1<str, byte>.Inner2<short, ushort>.Hello = 1
        Outer<T, QQQ>.Inner1<str, byte>.Inner2<short, ushort>.Hello = 2
        Outer<QQQ, T>.Inner1<str, byte>.Inner2<short, ushort>.Hello = 3
        Outer<long, ulong>.Inner1<T, decimal>.Inner2<QQQ, byte>.Hello = 4

        @p = AGenericTest<long, ulong>.Inner1<T, decimal>.Inner2<QQQ, byte>()
        p.P5<short, QQQ, ushort>(3, QQQ(), 0)
    }
    
    pub type Inner1<Ta, Qa>
    {
        pub fun P1() void { return 0; }
        pub fun P2<Quack>() void { return 0; }
        pub fun P3<Z>() void { return 0; }
        pub fun P4<Z, Quack>() void { return 0; }
        pub fun P5<Quack, Quack1, Quack3>() void{ return 0; }

        pub type Inner2<Tb, Qb>
        {
            pub fun P1() void { return 0; }
            pub fun P2<Quack>() void { return 0; }
            pub fun P3<Z>() void { return 0; }
            pub fun P4<Z, Quack>() void { return 0; }
            pub fun P5<Quack, Quack1, Quack3>(a int, b Quack1, c u16) void
            {
                return InnerP5() + InnerP5() + a + b.ToStr().Length + c

                fun InnerP5() void
                    return ToStr().Length
            }

            @X Inner1<byte, uint>
            @Y Inner2<int, str>
            @Hello int // TBD: Allow this to be static?

            pub type Inner3<A, B>
            {
                pub fun P1() void { return 0; }
                pub fun P2<Quack>() void { return 0; }
                pub fun P3<Z>() void { return 0; }
                pub fun P4<Z, Quack>() void { return 0; }
                pub fun AAA<Quack, Quack1, Quack3>
                    (a Quack, b Quack1, c Quack3, d A)
                        ->(x T, y QQQ, z List<QQQ>, w List<int>)
                {
                    return InnerP5() + InnerP5() + a + b.ToStr().Length + c
                    
                    fun InnerP5() int
                        return ToStr().Length
                }

                @X Inner1<byte, uint>
                @Y Inner2<int, str>
                @Hello int // TBD: Allow static?
            }

        }

    }
}