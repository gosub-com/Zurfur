

module Zurfur.Io

use Zurfur.Io[FileStream]

type Reader interface
    afun mut read(data mut Span<byte>) int throws

type Writer interface
    afun mut write(data Span<byte>) int throws
    afun mut flush() throws

type SeekOrigin enum
    Begin; Current; End

type Seeker interface
    fun mut seek(offset int, origin SeekOrigin) int throws
    
[pub] fun get Seeker.length() int throws { }
[pub] fun get Seeker.position() int throws { }
[pub] fun set Seeker.position(value int) throws { }

// Interface or concrete type?
type FileStream interface { }

module Zurfur.Io.File

[pub] afun open(fileName str, mode str="r") FileStream throws { }
[pub] afun readAllText(fileName str) List<str> throws { }
[pub] afun readAllBytes(fileName str) List<byte> throws { }
[pub] afun writeAllText(fileName str, data List<str>) throws { }
[pub] afun writeAllBytes(fileName str, data List<byte>) throws{ }

// TBD: It's probably better to have cancellation built
//      into the async system.  Maybe progress too.
type Progress(bytesTotal int, bytesTransferred int)
afun readAllText(
    fileName str,
    progress ?fun (p Progress) = null) throws { }