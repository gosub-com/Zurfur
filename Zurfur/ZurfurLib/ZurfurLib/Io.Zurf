

module Zurfur.Io


interface Reader
{
    afun mut read(data mut []byte) int err impl
}

interface Writer
{
    afun mut write(data []byte) int err impl
    afun mut flush() err impl
}

enum SeekOrigin { Begin; Current; End }

interface Seeker
{
    afun mut seek(offset int, origin SeekOrigin) int err impl
    aget length() int err { todo() }
    aget position() int err { todo() }
    aset position(value int) err { todo() }
}


interface FileStream
{
}

// TBD: Make this a module?
type File
{
    pub fun static open(file str) FileStream err
        return todo()
}