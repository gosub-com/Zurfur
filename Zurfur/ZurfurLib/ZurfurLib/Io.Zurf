

mod Zurfur.Io

use Zurfur.Io[FileStream]

type Reader interface
    afun mut read(data mut Span<byte>) !int

type Writer interface
    afun mut write(data Span<byte>) !int
    afun mut flush() !void

type SeekOrigin enum
    Begin; Current; End

type Seeker interface
    fun mut seek(offset int, origin SeekOrigin) !int
    
[pub] fun get Seeker.length() !int { }
[pub] fun get Seeker.position() !int { }
[pub] fun set Seeker.position(value int) !void { }

// Interface or concrete type?
type FileStream interface { }

mod Zurfur.Io.File

[pub] afun open(fileName str, mode str="r") !FileStream { }
[pub] afun readAllText(fileName str) !List<str> { }
[pub] afun readAllBytes(fileName str) !List<byte> { }
[pub] afun writeAllText(fileName str, data List<str>) !void { }
[pub] afun writeAllBytes(fileName str, data List<byte>) !void { }

// TBD: It's probably better to have cancellation built
//      into the async system.  Maybe progress too.
type Progress(bytesTotal int, bytesTransferred int)
afun readAllText(
    fileName str,
    progress ?fun (p Progress) = null) !void { }