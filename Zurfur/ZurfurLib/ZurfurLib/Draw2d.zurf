
// Basic shapes for use with 2d drawing library
// TBD: Still working on getting this fixed
module Zurfur.Draw2d

use Zurfur.Operators[NumOps]

fun test_Shape()
    @rect = Rect<int>(1,2,3,4)
    rect.Location.Y = 30 // This should work
    

[pub] type copy Point<T>
        where T is NumOps<T>
    x T pub init
    y T pub init


[pub] fun Point<T>.toSize() Size<T>
    return Size(my.x, my.y)


[pub] fun _opAdd<T>(a Point<T>, b Point<T>) Point<T>
    return Point<T>(a.x+b.x, a.y+b.y)

[pub] fun _opNeg<T>(a Point<T>) Point<T>
    return Point<T>(-a.x, -a.y)

[pub] fun _opSub<T>(a Point<T>, b Point<T>) Point<T>
    return Point<T>(a.x-b.x, a.y-b.y)

[pub] fun _opMul<T>(a T, b Point<T>) Point<T>
    return Point<T>(a*b.x, a*b.y)

[pub] fun _opMul<T>(a Point<T>, b T) Point<T>
    return Point<T>(a.x*b, a.y*b)

[pub] fun _opDiv<T>(a T, b Point<T>) Point<T>
    return Point<T>(a/b.x, a/b.y)

[pub] fun _opDiv<T>(a Point<T>, b T) Point<T>
    return Point<T>(a.x/b, a.y/b)


[pub] type copy Size<T>
        where T is NumOps<T>
    width T pub init
    height T pub init
    
    // TBD: Same as Point<T>
[pub] fun Size<T>.point() Point<T>
    return Point(my.width, my.height)

[pub] type copy Rect<T>
        where T is NumOps<T>
    x T pub init
    y T pub init
    width T pub init
    height T pub init

// TBD: Shortcut syntax for this:
[pub] fun Rect<T>.new(x T, y T, width T, height T)
    my.x = x
    my.y = y
    my.width = width
    my.height = height
    
[pub] fun Rect<T>.new(location Point<T>, size Size<T>)
    my.location = location
    my.size = size


// TBD: Operators (add, multiply, divide, sizes, etc.)

[pub] fun get Rect<T>.left() T
    return my.x
    
[pub] fun get Rect<T>.right() T
    return my.x + my.width

[pub] fun get Rect<T>.top() T
    return my.y
    
[pub] fun get Rect<T>.bottom() T
    return my.y + my.height
    
[pub] fun get Rect<T>.location() Point<T>
    return Point<T>(my.x, my.y)
    
[pub] fun set Rect<T>.location(value Point<T>)
    my.x = value.x
    my.y = value.y
    
[pub] fun get Rect<T>.size() Size<T>
    return Size<T>(my.width, my.height)
    
[pub] fun set Rect<T>.size(value Size<T>)
    my.width = value.width
    my.height = value.height