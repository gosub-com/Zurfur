
module Zurfur

use Zurfur.Operators[OpAdd, OpSub, OpIn, OpCmp, OpNext]
use Zurfur.Collections[GetIter, Iter]


pub type ro copy Range<T>
    where This is GetIter<T> + OpIn<Range<T>>
    where T is OpAdd<T,T> + OpSub<T,T> + OpCmp<T> + OpNext

    @start T pub init get
    @end T pub init get

    get count() T
        return end-start
        
    // TBD: These becomes an impl
    //pub static fun opIn(a T, b Range<T>) bool
    //    return a >= b.start && a < b.end
    //pub fun getIter() RangeIter<T>
    //    return RangeIter<T>(start, end)


pub type RangeIter<T>
    where This is Iter<T>
    where T is OpAdd<T,T> + OpSub<T,T> + OpCmp<T> + OpNext

    @current T pub init
    @end T pub init
    
    get countHint() T
        return end-current
        
    get next() ?T
        if current < end
            return move(ref current, current.opNext())
        return null
        