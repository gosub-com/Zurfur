namespace Zurfur


struct Range<T>
    implements IEquatable<T>, IEnumerable<T>
    where T is IArithmetic<T>        
{
    pub var Low T
    pub var High T
    
    pub func Equals(a T, b T) bool
        => a.Low == b.Low && a.High == b.High
    pub func GetHashCode(a T) uint
        => HashMix(a.Low.GetHashCode(), a.High.GetHashCode())
    pub func GetEnumerator(this) RangeEnumerator<T>
        => RangeEnumerator<T>(Low, High)
    
}

struct RangeEnumerator<T>
    implements IFastEnumerator<T>
{
    var index T
    ro high T
    
    pub func new(low T, high T) { index = low;  this.high = high}
                   
    func HasNext(this) bool => index < high
    func Advance(this mut) => index += T.Identiry
    prop Current T => index
}

    