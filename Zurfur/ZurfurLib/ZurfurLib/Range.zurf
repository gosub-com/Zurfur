use Zurfur
use Zurfur.Operators
use Zurfur.Collections

module Zurfur


pub type ro passcopy Range<T>
    where This is GetIterator<T> + OpIn<Range<T>>
    where T is AddOps
{
    @start T pub init get
    @end T pub init get

    pub static fun op_in(a T, b Range<T>) bool:
        return a >= b.start && a < b.end

    get count() T:
        return end-start
        
    pub fun getIterator() RangeIterator<T>:
        return RangeIter<T>(start, end)

}

pub type RangeIterator<T>
    where This is Iterator<T>
    where T is AddOps
{
    @start T pub init
    @end T pub init
    
    get countHint() T:
        return end-start
        
    get next() ?T:
        if start < end:
            return move(ref start, start+T.One)
        return null
        
}