namespace Zurfur


pub struct Range<T>
    implements Iterable<Range<T>, T>
    where T is IArithmetic<T>
{
    pub Low T
    pub High T
    
    pub fun GetIterator() Iterator<Range<T>, T>
        => RangeIterator<Range<T>, T>(Low)

    // Usage: myRange.For @index => DoStuffWithItem()
    pub fun For(f fun(item T) Breakable)
    {
        @i = Low
        while @i < High && f(i)
            i += 1
    }
    
}

pub struct RangeIterator<T>
    implements Iterator<Range<T>, T>
    where T is IArithmetic<T>
{
    index T
    
    pub fun new(low T)
    {
        index = low-1
    }

    pub fun Next mut(range Range<T>) ?ref T
    {
        index += 1
        if index < range.High
            return ref index
        return null
    }

    pub fun Current(range Range<T>) ref T
    {
        if index < range.Low || index >= range.High
            throw InvalidIteratorException()
        return ref index
    }
}

    