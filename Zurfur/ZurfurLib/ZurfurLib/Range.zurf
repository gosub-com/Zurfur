
module Zurfur

use Zurfur.Operators[OpAdd, OpSub, OpIn, OpCmp, OpNext]
use Zurfur.Collections[GetIter, Iter]


type pub ro copy Range<T>
    where This is GetIter<T> + OpIn<Range<T>>
    where T is OpAdd<T,T> + OpSub<T,T> + OpCmp<T> + OpNext

    @start T pub init get
    @end T pub init get

get pub Range<T>.count() T
    return end-start
        

type pub RangeIter<T>
    where This is Iter<T>
    where T is OpAdd<T,T> + OpSub<T,T> + OpCmp<T> + OpNext

    @current T pub init
    @end T pub init
    
get pub RangeIter<T>.countHint() T
    return end-current
    
get pub RangeIter<T>.next() ?T
    if current < end
        return move(ref current, current.opNext())
    return null
        