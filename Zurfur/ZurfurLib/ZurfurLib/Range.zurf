
module Zurfur

use Zurfur[Copy]
use Zurfur.Operators[OpAdd, OpSub, OpCmp, OpOne]
use Zurfur.Collections[Iterator]


[pub] type ro copy Range<T>
        where T is Copy<T> + OpSub<T> + OpCmp<T> + OpOne<T>
    @begin T pub init get
    @end T pub init get

[pub] get Range<T>.count() T
    return my.end-my.begin

[pub] get Range<T>.iterator() RangeIterator<T>
    if my.begin >= my.end
        return  RangeIterator<T>(my.begin, my.begin)
    return RangeIterator<T>(my.begin, my.end)
        

[pub] type RangeIterator<T>
        where T is Copy<T> + OpSub<T> + OpCmp<T> + OpOne<T>
    @current T pub init
    @end T pub init
    
    
[pub] get RangeIterator<T>.next() ?T
    if my.current == my.end
        return null
    @r = my.current
    my.current += T.ONE
    return r
        