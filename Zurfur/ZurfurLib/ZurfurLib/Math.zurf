

// Intrinsics for all the base types

module Zurfur.Math

use Zurfur[Decimal]

// --------------------------
// Math intrinsics for i32
// --------------------------
fun pub abs(n i32) i32 extern
fun pub i32.clamp(min i32, max i32) i32
    require(min <= max) extern
fun pub max(n1 i32, n2 i32) i32 extern
fun pub min(n1 i32, n2 i32) i32 extern
fun pub sign(n i32) i32 extern
fun pub sq(n i32) i32 extern

// --------------------------
// Math intrinsics for u32
// --------------------------
fun pub u32.clamp(min u32, max u32) u32
    require(min <= max) extern
fun pub max(n1 u32, n2 u32) u32 extern
fun pub min(n1 u32, n2 u32) u32 extern
fun pub sq(n u32) u32 extern

// --------------------------
// Math intrinsics for int
// --------------------------
fun pub abs(n int) int extern
fun pub int.clamp(min int, max int) int
    require(min <= max) extern
fun pub max(n1 int, n2 int) int extern
fun pub min(n1 int, n2 int) int extern
fun pub sign(n int) int extern
fun pub sq(n int) int extern

// --------------------------
// Math intrinsics for u64
// --------------------------
fun pub u64.clamp(min u64, max u64) u64
    require(min <= max) extern
fun pub max(n1 u64, n2 u64) u64 extern
fun pub min(n1 u64, n2 u64) u64 extern
fun pub sq(n u64) u64 extern

// --------------------------
// Math intrinsics for f32
// --------------------------
fun pub abs(n f32) f32 extern
fun pub acos(n f32) f32 extern
fun pub asin(n f32) f32 extern
fun pub atan(n f32) f32 extern
fun pub atan2(x f32, y f32) f32 extern
fun pub ceil(n f32) f32 extern
fun pub f32.clamp(min f32, max f32) f32
    require(min<=max) extern
fun pub cos(n f32) f32 extern
fun pub cosh(n f32) f32 extern
fun pub exp(n f32) f32 extern
fun pub floor(n f32) f32 extern
fun pub log(n f32) f32 extern
fun pub log2(n f32) f32 extern
fun pub log10(n f32) f32 extern
fun pub log(n f32, base f32) f32 extern
fun pub max(n1 f32, n2 f32) f32 extern
fun pub min(n1 f32, n2 f32) f32 extern
fun pub pow(x f32, y f32) f32 extern
fun pub round(n f32, digits int = 0) f32 extern
fun pub sign(n f32) int extern
fun pub sin(n f32) f32 extern
fun pub sinh(n f32) f32 extern
fun pub sqrt(n f32) f32 extern
fun pub sq(n f32) f32 extern
fun pub tan(n f32) f32 extern
fun pub tanh(n f32) f32 extern
fun pub trunc(n f32) f32 extern


// --------------------------
// Math intrinsics for f64
// --------------------------
fun pub abs(n f64) f64 extern
fun pub acos(n f64) f64 extern
fun pub asin(n f64) f64 extern
fun pub atan(n f64) f64 extern
fun pub atan2(x f64, y f64) f64 extern
fun pub ceil(n f64) f64 extern
fun pub f64.clamp(min f64, max f64) f64
    require(min<=max) extern
fun pub cos(n f64) f64 extern
fun pub cosh(n f64) f64 extern
fun pub exp(n f64) f64 extern
fun pub floor(n f64) f64 extern
fun pub log(n f64) f64 extern
fun pub log2(n f64) f64 extern
fun pub log10(n f64) f64 extern
fun pub log(n f64, base f64) f64 extern
fun pub max(n1 f64, n2 f64) f64 extern
fun pub min(n1 f64, n2 f64) f64 extern
fun pub pow(x f64, y f64) f64 extern
fun pub round(n f64, digits int = 0) f64 extern
fun pub sign(n f64) int extern
fun pub sin(n f64) f64 extern
fun pub sinh(n f64) f64 extern
fun pub sqrt(n f64) f64 extern
fun pub sq(n f64) f64 extern
fun pub tan(n f64) f64 extern
fun pub tanh(n f64) f64 extern
fun pub trunc(n f64) f64 extern


// --------------------------
// Math intrinsics for Decimal
// --------------------------
fun pub abs(n Decimal) Decimal extern
fun pub Decimal.clamp(min Decimal, max Decimal) Decimal
    require(min <= max) extern
fun pub max(n1 Decimal, n2 Decimal) Decimal extern
fun pub min(n1 Decimal, n2 Decimal) Decimal extern
fun pub sign(n Decimal) int extern