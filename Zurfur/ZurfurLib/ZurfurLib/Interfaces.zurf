
module Zurfur

/// Implement IEquatable on any object that can be stored in a Map.
/// This is different than implementing just Equals
/// in that NAN must compare to itself as true.
interface pub static Equatable<T>
{
    fun static GetHashCode(a T) uint impl
    fun static Equals(a T, b T) bool impl
}

/// Implement IComparable on any object that can be sorted.
/// This is different than implementing just Compare
/// in that NAN must have a valid sort order.
interface pub static Comparable<T>
    implements Equatable<T>
{
    fun static Compare(a T, b T) int impl
}

interface pub static IArithmetic<T>
    implements Comparable<T>
{
    fun operator-(a T) T impl
    fun operator-(a T, b T) T impl
    fun operator+(a T, b T) T impl
    fun operator*(a T, b T) T impl
    fun operator/(a T, b T) T impl
    fun operator%(a T, b T) T impl
    get static Identity() T impl
    get static Origin() T impl
}



interface pub Iterator<T>
{
    /// Get the next item from a collection.
    /// Returns null if there are no more items.
    /// Panic if collection is mutated while iterating.
    fun mut Next() ?ref T impl
}

interface pub Iterable<T>
{
    fun GetIterator() Iterator<T> impl
}


interface pub Collection<T>
    implements Iterable<T>
{
    get Count() int impl
    fun GetIterator() Iterator<T> impl
}


interface pub IArray<T>
    implements Collection<T>
{
    get operator[](index int) T impl
}

interface pub IList<T>
    implements Collection<T>
{
    get operator[](index int) T impl
    set operator[](index int, item own T) impl
}


type pub Pair<TKey, TValue>(Key TKey, Value TValue)


/// This is a test
interface pub IGeneric<Q>
{
    fun A<T>(m Q) int:
        return 0
}


/// Compiler implemented interface created for all structs that are blittable.
/// A blittable struct does not contain references, but may contain pointers.
interface pub IBlittableStruct { }