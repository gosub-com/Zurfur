
namespace Zurfur.Collections;

/// Implement IEquatable on any object that can be stored in a Map.
/// This is different than implementing just Equals
/// in that NAN must compare to itself as true.
pub static interface IEquatable<T>
{
    func GetHashCode(a T) uint => impl
    func Equals(a T, b T) bool => impl
}

/// Implement IComparable on any object that can be sorted.
/// This is different than implementing just Compare
/// in that NAN must have a valid sort order.
pub static interface IComparable<T>
    implements IEquatable<T>
{
    func Compare(a T, b T) int  => impl
}

pub static interface IArithmetic<T>
    implements IComparable<T>
{
    func operator-(a T) T => impl
    func operator-(a T, b T) T => impl
    func operator+(a T, b T) T => impl
    func operator*(a T, b T) T => impl
    func operator/(a T, b T) T => impl
    func operator%(a T, b T) T => impl
    prop Identity T => impl get
    prop Origin T => impl get
}

pub interface IEnumerable<out T>
{
    func GetEnumerator(this) IEnumerator<T> => impl
}

/// This is the only function needed for standard iterators
pub interface IEnumerator<T>
{
    func GetNext(this mut, item ref T) bool => impl
}

/// This should only be defined for simple types
/// that get inlined, such as int, Range, etc..
/// Otherwise, only define IEnumerator
pub interface IFastEnumerator<T>
    implements IEnumerator<T>
{
    func HasNext(this) bool => impl
    func Advance(this mut) => impl
    prop Current T => impl get
    
    func GetNext(this mut, item ref T) bool
    {
        if HasNext()
        {
            item = Current;
            Advance()
            return true
        }
        return false
    }
}


/// Base class for all collections.
/// Collections are immutable until proven otherwise.
pub interface ICollection<T>
    implements IEnumerable<T>
{
    prop Count int => impl get
}

/// Base class for all mutable collections.
pub interface IMutCollection<T>
    implements ICollection<T>
{
    func Clear(this mut) => impl
    func Add(this mut, item T) => impl
    func Add(this mut, items ICollection<T>) => impl
    // NOTE: 'Remove' and 'Contains' are not included because
    //      each collection may have a different idea about
    //      how to compare and find objects.  
    //      TBD: Consider adding them back in.  With constraint?
    //      func RemoveObject(item T) where T : IEquatable
}

pub interface IArray<T> 
    implements ICollection<T>
{
    func operator[](this, index int) T => impl get
}


pub interface IMutArray<T> 
    implements ICollection<T>
{
    func operator[](this, index int) T => impl get set
    func operator[](this, range Range) IArray => todo()
}

pub interface IList<T>
    implements IMutCollection<T>, IArray<T>, IMutArray<T>
{
    func Insert(this mut, index int, item T) => impl
    func Insert(this mut, index int, collection ICollection<T>) => impl
    func Remove(this mut, index int) => impl
    func Remove(this mut, range Range) => impl

    func Add(this mut, item T) { Insert(Count, item) }
    func Add(this mut, items ICollection<T>) { Insert(Count, items) }
}

pub struct KeyValuePair<TKey, TValue>
{
    pub Key TKey
    pub Value TValue

    pub func new(key TKey, value TValue) { Key = key; Value = value }
}

pub interface IMap<TKey, TValue>
    implements ICollection<KeyValuePair<TKey, TValue>>
{
    func operator in(this, a TKey) bool => impl
    func operator[](this, key TKey) TValue => impl get
    func Contains(this, key TKey) bool => impl
    func Get(this, key TKey, defaultValue TValue) TValue => impl
    func TryGet(this, key TKey, value out TValue) bool => impl
    prop Keys ICollection<TKey> => impl get
    prop Values ICollection<TValue> => impl get
}

pub interface IMutMap<TKey, TValue> 
    implements IMap<KeyValuePair<TKey, TValue>>,
      IMutCollection<KeyValuePair<TKey, TValue>>
            
{
    func operator[](this, key TKey) TValue => impl get set
    func Remove(this mut, TKey key) bool => impl
}

/// This is a test
pub interface IGeneric<Q>
{
    func A<T>(this, Q m) int => test()
}

// Test generic class
pub class MyGeneric<QQ>
    implements IGeneric<QQ>
{
    pub func IGeneric<QQ>::A<T>(this, QQ a) int { }
}

/// Compiler implemented interface created for all structs that are blittable.
/// A blittable struct does not contain references, but may contain pointers.
pub interface IBlittableStruct { }