
module Zurfur

/// Implement IEquatable on any object that can be stored in a Map.
/// This is different than implementing just Equals
/// in that NAN must compare to itself as true.
pub static interface Equatable<T>
{
    static fun GetHashCode(a T) uint youdo
    static fun Equals(a T, b T) bool youdo
}

/// Implement IComparable on any object that can be sorted.
/// This is different than implementing just Compare
/// in that NAN must have a valid sort order.
pub static interface Comparable<T>
    implements Equatable<T>
{
    static fun Compare(a T, b T) int youdo
}

pub static interface IArithmetic<T>
    implements Comparable<T>
{
    fun operator-(a T) T youdo
    fun operator-(a T, b T) T youdo
    fun operator+(a T, b T) T youdo
    fun operator*(a T, b T) T youdo
    fun operator/(a T, b T) T youdo
    fun operator%(a T, b T) T youdo
    static get Identity() T youdo
    static get Origin() T youdo
}

pub interface Collection<T>
    implements Iterable<T>
{
    get Count() int youdo
    fun GetIterator() Iterator<T> youdo
}


pub interface Iterable<T>
{
    fun GetIterator() Iterator<T> youdo
}

pub interface Iterator<T>
{
    /// Get the next item from a collection.
    /// Returns null if there are no more items.
    /// Panic if collection is mutated while iterating.
    fun mut Next() ?ref T youdo
}


pub type Pair<TKey, TValue>(Key TKey, Value TValue)


/// This is a test
pub interface IGeneric<Q>
{
    fun A<T>(m Q) int:
        return 0
}


/// Compiler implemented interface created for all structs that are blittable.
/// A blittable struct does not contain references, but may contain pointers.
pub interface IBlittableStruct { }