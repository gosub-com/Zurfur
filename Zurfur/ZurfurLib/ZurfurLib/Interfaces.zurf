
namespace Zurfur

/// Implement IEquatable on any object that can be stored in a Map.
/// This is different than implementing just Equals
/// in that NAN must compare to itself as true.
pub static interface Equatable<T>
{
    static fun GetHashCode(a T) uint imp
    static fun Equals(a T, b T) bool imp
}

/// Implement IComparable on any object that can be sorted.
/// This is different than implementing just Compare
/// in that NAN must have a valid sort order.
pub static interface Comparable<T>
    implements Equatable<T>
{
    static fun Compare(a T, b T) int imp
}

pub static interface IArithmetic<T>
    implements Comparable<T>
{
    fun operator-(a T) T imp
    fun operator-(a T, b T) T imp
    fun operator+(a T, b T) T imp
    fun operator*(a T, b T) T imp
    fun operator/(a T, b T) T imp
    fun operator%(a T, b T) T imp
    static prop Identity T imp get
    static prop Origin T imp get
}

pub interface Collection<T>
    implements Iterable<T>
{
    prop Count int imp get
    fun GetIterator() Iterator<T> imp
}


pub interface Iterable<T>
{
    fun GetIterator() imp
}

pub interface Iterator<T>
{
    /// Get the next item from a collection.
    /// Returns null if there are no more items.
    /// Panic if collection is mutated while iterating.
    fun Next mut() ?ref T imp
}


pub struct Pair<TKey, TValue>(Key TKey, Value TValue)


/// This is a test
pub interface IGeneric<Q>
{
    fun A<T>(m Q) int
        return 0
}

// Test generic type
pub class MyGeneric<QQ>
    implements IGeneric<QQ>
{
    pub fun IGeneric<QQ>.A<T>(a QQ) int { }
}

/// Compiler implemented interface created for all structs that are blittable.
/// A blittable struct does not contain references, but may contain pointers.
pub interface IBlittableStruct { }