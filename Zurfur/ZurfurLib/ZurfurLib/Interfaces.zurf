
namespace Zurfur.Collections

/// Implement IEquatable on any object that can be stored in a Map.
/// This is different than implementing just Equals
/// in that NAN must compare to itself as true.
pub static interface Equatable<T>
{
    static fun GetHashCode(a T) uint => impl
    static fun Equals(a T, b T) bool => impl
}

/// Implement IComparable on any object that can be sorted.
/// This is different than implementing just Compare
/// in that NAN must have a valid sort order.
pub static interface Comparable<T>
    implements Equatable<T>
{
    static fun Compare(a T, b T) int  => impl
}

pub static interface IArithmetic<T>
    implements Comparable<T>
{
    fun operator-(a T) T => impl
    fun operator-(a T, b T) T => impl
    fun operator+(a T, b T) T => impl
    fun operator*(a T, b T) T => impl
    fun operator/(a T, b T) T => impl
    fun operator%(a T, b T) T => impl
    static prop Identity T => impl get
    static prop Origin T => impl get
}

pub interface Iterable<TCollection, T>
{
    fun GetIterator() Iterator<TCollection, T> => impl
}

/// This is the only function needed for standard iterators
pub interface Iterator<TCollection, T>
{
    /// Get the next item from a collection.
    /// Returns null if there are no more items.
    /// Panic if collection is mutated while iterating.
    fun Next mut(collection TCollection<T>) ?mut ref T => impl

    /// Return the item previously returned by Next.
    /// Panic if Next was never called, or if Next returned null.
    fun Current(collection TCollection<T>) mut ref T => impl
}

pub interface Collection<T>
    implements Iterable<T>
{
    prop Count int => impl get
}


pub struct Pair<TKey, TValue>
{
    pub Key TKey
    pub Value TValue

    pub fun new(key TKey, value TValue) { Key = key; Value = value }
}


/// This is a test
pub interface IGeneric<Q>
{
    fun A<T>(Q m) int => test()
}

// Test generic type
pub class MyGeneric<QQ>
    implements IGeneric<QQ>
{
    pub fun IGeneric<QQ>::A<T>(QQ a) int { }
}

/// Compiler implemented interface created for all structs that are blittable.
/// A blittable struct does not contain references, but may contain pointers.
pub interface IBlittableStruct { }