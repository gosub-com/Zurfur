
namespace Zurfur.Collections;

/// Implement IEquatable on any object that can be stored in a Map.
/// This is different than implementing just Equals
/// in that NAN must compare to itself as true.
pub static interface IEquatable<T>
{
    // TBD: These functions are `ro` including all in the base class
    static fun GetHashCode(a T) uint => imp
    static fun Equals(a T, b T) bool => imp
}

/// Implement IComparable on any object that can be sorted.
/// This is different than implementing just Compare
/// in that NAN must have a valid sort order.
pub static interface IComparable<T>
    : IEquatable<T>
{
    static fun Compare(a T, b T) int  => imp
}

pub static interface IArithmetic<T>
    : IComparable<T>
{
    operator-(a T) T => imp
    operator-(a T, b T) T => imp
    operator+(a T, b T) T => imp
    operator*(a T, b T) T => imp
    operator/(a T, b T) T => imp
    operator%(a T, b T) T => imp
    static prop Identity T => imp get
    static prop Origin T => imp get
}

pub interface IEnumerator<out T>
{
    fun HasNext() bool => imp
    fun mut GetNext(item ref T) bool => imp
}

pub interface IEnumerable<out T>
{
    fun GetEnumerator() IEnumerator<T> => imp
}

/// Base class for all collections.
/// Collections are immutable until proven otherwise.
pub interface ICollection<T>
    : IEnumerable<T>
{
    prop Count int => imp get
}

/// Base class for all mutable collections.
pub interface IMutCollection<T>
    : ICollection<T>
{
    fun mut Clear() => imp
    fun mut Add(item T) => imp
    fun mut Add(items ICollection<T>) => imp
    // NOTE: 'Remove' and 'Contains' are not included because
    //      each collection may have a different idea about
    //      how to compare and find objects.  
    //      TBD: Consider adding them back in.  With constraint?
    //      fun RemoveObject(item T) where T : IEquatable
}

pub interface IArray<T> 
    : ICollection<T>
{
    operator[](index int) T => imp get
}


pub interface IMutArray<T> 
    : ICollection<T>
{
    operator[](index int) T => imp get set
    operator[](range Range) IArray => todo()
}

pub interface IList<T>
    : IMutCollection<T>, IArray<T>, IMutArray<T>
{
    fun mut Insert(index int, item T) => imp
    fun mut Insert(index int, collection ICollection<T>) => imp
    fun mut Remove(index int) => imp
    fun mut Remove(range Range) => imp

    pub fun mut Add(item T) { Insert(Count, item) }
    pub fun mut Add(items ICollection<T>) { Insert(Count, items) }
}

pub struct KeyValuePair<TKey, TValue>
{
    pub @Key TKey
    pub @Value TValue

    pub new(key TKey, value TValue) { Key = key; Value = value }
}

pub interface IMap<TKey, TValue>
    : ICollection<KeyValuePair<TKey, TValue>>
{
    operator in(a TKey) bool => imp
    operator[](key TKey) TValue => imp get
    pub fun Contains(key TKey) bool => imp
    fun Get(key TKey, defaultValue TValue) TValue => imp
    fun TryGet(key TKey, value out TValue) bool => imp
    prop Keys ICollection<TKey> => imp get
    prop Values ICollection<TValue> => imp get
}

pub interface IMutMap<TKey, TValue> 
    : IMap<KeyValuePair<TKey, TValue>>,
      IMutCollection<KeyValuePair<TKey, TValue>>
            
{
    operator[](key TKey) TValue => imp get set
    fun mut Remove(TKey key) bool => imp
}

/// This is a test
pub interface IGeneric<Q>
{
    fun A<T>(Q m) int => test()
}

// Test generic class
pub class MyGeneric<QQ> : IGeneric<QQ>
{
    pub fun IGeneric<QQ>::A<T>(QQ a) int { }
}

/// Compiler implemented interface created for all structs that are blittable.
/// A blittable struct does not contain references, but may contain pointers.
pub interface IBlittableStruct { }