
namespace Zurfur

/// Implement IEquatable on any object that can be stored in a Map.
/// This is different than implementing just Equals
/// in that NAN must compare to itself as true.
pub static interface Equatable<T>
{
    imp static fun GetHashCode(a T) uint
    imp static fun Equals(a T, b T) bool
}

/// Implement IComparable on any object that can be sorted.
/// This is different than implementing just Compare
/// in that NAN must have a valid sort order.
pub static interface Comparable<T>
    implements Equatable<T>
{
    imp static fun Compare(a T, b T) int
}

pub static interface IArithmetic<T>
    implements Comparable<T>
{
    imp fun operator-(a T) T
    imp fun operator-(a T, b T) T
    imp fun operator+(a T, b T) T
    imp fun operator*(a T, b T) T
    imp fun operator/(a T, b T) T
    imp fun operator%(a T, b T) T
    imp static prop Identity T get
    imp static prop Origin T get
}

pub interface Collection<T>
    implements Iterable<T>
{
    imp prop Count int get
    imp fun GetIterator() Iterator<T>
}


pub interface Iterable<T>
{
    imp fun GetIterator()
}

pub interface Iterator<T>
{
    /// Get the next item from a collection.
    /// Returns null if there are no more items.
    /// Panic if collection is mutated while iterating.
    imp fun Next mut() ?ref T
}


pub struct Pair<TKey, TValue>
{
    pub Key TKey
    pub Value TValue

    pub fun new(key TKey, value TValue) { Key = key; Value = value }
}


/// This is a test
pub interface IGeneric<Q>
{
    fun A<T>(m Q) int
        test()
}

// Test generic type
pub class MyGeneric<QQ>
    implements IGeneric<QQ>
{
    pub fun IGeneric<QQ>.A<T>(a QQ) int { }
}

/// Compiler implemented interface created for all structs that are blittable.
/// A blittable struct does not contain references, but may contain pointers.
pub interface IBlittableStruct { }