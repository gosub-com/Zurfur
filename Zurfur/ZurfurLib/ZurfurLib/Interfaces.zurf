
// This defines interfaces for:
//      Zurfur.Markers
//      Zurfur.Operators

module Zurfur

interface Clone<T> {}
interface Copy<T> {}

module Zurfur.Operators

// Common math operators
interface NumOps<T>
    [static] fun _opEq(a T, b T) bool impl
    [static] fun _opCmp(a T, b T) int impl
    [static] fun _opAdd(a T, b T) T impl
    [static] fun _opSub(a T, b T) T impl
    [static] fun _opNeg(a T) T impl
    [static] fun _opMul(a T, b T) T impl
    [static] fun _opDiv(a T, b T) T impl
    [static] get ZERO() T impl
    [static] get ONE() T impl
    

// Equality for containers and sorting (NaN == NaN, Nan < -Inf)
interface OpEq<T>
    [static] fun _opEq(a T, b T) bool impl

// Comparison for containers and sorting (NaN == Nan, Nan < -Inf)
interface OpCmp<T>
    [static] fun _opEq(a T, b T) bool impl
    [static] fun _opCmp(a T, b T) int impl

// Logical equality (e.g. -0 == +0, NaN == NaN even if bit pattern is different)
// TBD: Implemented by compiler
interface GetHash
    fun getHash() int impl

// Equality for floating point numbers (NaN != NaN)
// Not implemented for most other types (e.g. int and str)
interface OpEqPartial<T>
    [static] fun _opEqPartial(a T, b T) bool impl

// Comparison for floating point numbers (NaN is unordered)
// Not implemented for most other types (e.g. int, str)
interface OpCmpPartial<T>
    [static] fun _opEqPartial(a T, b T) bool impl
    [static] fun _opCmpPartial(a T, b T) ?int impl

interface OpIn<T>
    [static] fun _opEq(a T, b T) bool impl
    [static] fun _opCmp(a T, b T) int impl
    [static] fun _opIn(a T, b T) bool impl
    
interface OpAdd<T>
    [static] fun _opAdd(a T, b T) T impl
    
interface OpSub<T>
    [static] fun _opSub(a T, b T) T impl
    
interface OpNeg<T>
    [static] fun _opNeg(a T) T impl
    
interface OpMul<T>
    [static] fun _opMul(a T, b T) T impl
    
interface OpDiv<T>
    [static] fun _opDiv(a T, b T) T impl
    
interface OpRem<T>
    [static] fun _opRem(a T, b T) T impl

interface OpZero<T>
    [static] get ZERO() T impl

interface OpOne<T>
    [static] get ONE() T impl

    