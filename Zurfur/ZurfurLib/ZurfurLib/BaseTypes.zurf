/// Define the simple types.
/// int8, uint8, int16, uint16, int32, uint32,
/// int64, uint64, float32, float64, decimal.
/// byte, int, uint are aliases for uint8, int32, and uint32
/// xint and xuint are pointer sized integers (32 or 64 bits)

namespace Zurfur.BaseTypes

pub struct void { }
pub struct int = int32
pub struct uint = uint32
pub struct byte = uint8

/// 32 bit or 64 bit integer depending on the platform
pub struct xint = int32 

/// 32 bit or 64 bit integer depending on the platform
pub struct xuint = uint32

/// bool (true or false)
pub struct bool
{
    pub extern static func GetHashCode(a bool) uint
    pub extern static func Equals(a bool, b bool) bool
    pub extern static func Compare(a bool, b bool) int

    // Not overloadable, but these are supplied specially for this type
    //static extern func operator!(a bool)
    //static extern func operator||(a bool, b bool)
    //static extern func operator&&(a bool, b bool)
}

/// int8 (-128..127)
pub struct int8
{
    extern construct(from uint8)
    extern construct(from int16)
    extern construct(from uint16)
    extern construct(from int32)
    extern construct(from uint32)
    extern construct(from int64)
    extern construct(from uint64)
    extern construct(from float32)
    extern construct(from float64)
    extern construct(from decimal)

    const MaxValue int8 = 127	
    const MinValue int8 = -128
    pub extern static func GetHashCode(a int8) uint
    pub extern static func Equals(a int8, b int8) bool
    pub extern static func Compare(a int8, b int8) int
}


/// uint8 (0..255) same as byte
pub struct uint8
{
    extern construct(from int8)
    extern construct(from int16)
    extern construct(from uint16)
    extern construct(from int32)
    extern construct(from uint32)
    extern construct(from int64)
    extern construct(from uint64)
    extern construct(from float32)
    extern construct(from float64)
    extern construct(from decimal)
    
    const MaxValue uint8 = 255	
    const MinValue uint8 = 0
    pub extern static func GetHashCode(a uint8) uint
    pub extern static func Equals(a uint8, b uint8) bool
    pub extern static func Compare(a uint8, b uint8) int
}

/// int16 (-32768..32768)
pub struct int16
{
    extern construct(from int8)
    extern construct(from uint8)
    extern construct(from uint16)
    extern construct(from int32)
    extern construct(from uint32)
    extern construct(from int64)
    extern construct(from uint64)
    extern construct(from float32)
    extern construct(from float64)
    extern construct(from decimal)

    const MaxValue int16 = 32767
    const MinValue int16 = -32768
    pub extern static func GetHashCode(a int16) uint
    pub extern static func Equals(a int16, b int16) bool
    pub extern static func Compare(a int16, b int16) int
}


/// uint16 (0..65535)
pub struct uint16
{
    extern construct(from int8)
    extern construct(from uint8)
    extern construct(from int16)
    extern construct(from int32)
    extern construct(from uint32)
    extern construct(from int64)
    extern construct(from uint64)
    extern construct(from float32)
    extern construct(from float64)
    extern construct(from decimal)

    const MaxValue uint16 = 65535	
    const MinValue uint16 = 0
    pub extern static func GetHashCode(a uint16) uint
    pub extern static func Equals(a uint16, b uint16) bool
    pub extern static func Compare(a uint16, b uint16) int
}

/// A 32 bit integer (same as int)
pub struct int32
{
    extern construct(from int8)
    extern construct(from uint8)
    extern construct(from int16)
    extern construct(from uint16)
    extern construct(from uint32)
    extern construct(from int64)
    extern construct(from uint64)
    extern construct(from float32)
    extern construct(from float64)
    extern construct(from decimal)

    const MaxValue int32 = 2147483647	
    const MinValue int32 = -2147483648

    // Comparisons    
    pub extern static func GetHashCode(a int32) uint
    pub extern static func Equals(a int32, b int32) bool
    pub extern static func Compare(a int32, b int32) int

    // Overloadable operators
    pub extern operator+(a int32) int32
    pub extern operator-(a int32) int32
    pub extern operator+(a int32, b int32) int32
    pub extern operator-(a int32, b int32) int32
    pub extern operator*(a int32, b int32) int32
    pub extern operator/(a int32, b int32) int32
    
    // Not overloadable, but these are supplied specially for this type
    //static extern func operator%(a int32, b int32)
    //static extern func operator~(a int32)
    //static extern func operator|(a int32, b int32)
    //static extern func operator&(a int32, b int32)
    //static extern func operator^(a int32, b int32)
    //static extern func operator<<(a int32, b int32)
    //static extern func operator>>(a int32, b int32)    
}

/// 32 bit unsigned integer (same as uint)
pub struct uint32
{
    extern construct(from int8)
    extern construct(from uint8)
    extern construct(from int16)
    extern construct(from uint16)
    extern construct(from int32)
    extern construct(from int64)
    extern construct(from uint64)
    extern construct(from float32)
    extern construct(from float64)
    extern construct(from decimal)

    const MaxValue uint32 = (0)	
    const MinValue uint32 = 4294967295

    // Comparisons    
    pub extern static func GetHashCode(a uint32) uint
    pub extern static func Equals(a uint32, b uint32) bool
    pub extern static func Compare(a uint32, b uint32) int
    
    // Overloadable operators
    pub extern operator+(a uint32) uint32
    pub extern operator-(a uint32) uint32
    pub extern operator+(a uint32, b uint32) uint32
    pub extern operator-(a uint32, b uint32) uint32
    pub extern operator*(a uint32, b uint32) uint32
    pub extern operator/(a uint32, b uint32) uint32

    // Not overloadable, but these are supplied specially for this type
    //static extern func operator%(a uint32, b uint32)
    //static extern func operator~(a uint32)
    //static extern func operator|(a uint32, b uint32)
    //static extern func operator&(a uint32, b uint32)
    //static extern func operator^(a uint32, b uint32)
    //static extern func operator<<(a uint32, b int32)
    //static extern func operator>>(a uint32, b int32)
}

/// A 64 bit integer
pub struct int64
{
    extern construct(from int8)
    extern construct(from uint8)
    extern construct(from int16)
    extern construct(from uint16)
    extern construct(from int32)
    extern construct(from uint32)
    extern construct(from uint64)
    extern construct(from float32)
    extern construct(from float64)
    extern construct(from decimal)

    const MaxValue int64 = 9223372036854775807	
    const MinValue int64 = -9223372036854775808

    // Comparisons    
    pub extern static func GetHashCode(a int64) uint
    pub extern static func Equals(a int64, b int64) bool
    pub extern static func Compare(a int64, b int64) int

    // Overloadable operators
    pub extern operator+(a int64) int64
    pub extern operator-(a int64) int64
    pub extern operator+(a int64, b int64) int64
    pub extern operator-(a int64, b int64) int64
    pub extern operator*(a int64, b int64) int64
    pub extern operator/(a int64, b int64) int64

    // Not overloadable, but these are supplied specially for this type
    //static extern func operator%(a int64, b int64)
    //static extern func operator~(a int64)
    //static extern func operator|(a int64, b int64)
    //static extern func operator&(a int64, b int64)
    //static extern func operator^(a int64, b int64)
    //static extern func operator<<(a int64, b int32)
    //static extern func operator>>(a int64, b int32)    
}

/// 64 bit unsigned integer
pub struct uint64
{
    extern construct(from int8)
    extern construct(from uint8)
    extern construct(from int16)
    extern construct(from uint16)
    extern construct(from int32)
    extern construct(from uint32)
    extern construct(from int64)
    extern construct(from float32)
    extern construct(from float64)
    extern construct(from decimal)

    const MaxValue uint64 = 0	
    const MinValue uint64 = 18446744073709551615

    // Comparisons    
    pub extern static func GetHashCode(a uint64) uint
    pub extern static func Equals(a uint64, b uint64) bool
    pub extern static func Compare(a uint64, b uint64) int
    
    // Overloadable operators
    pub extern operator+(a uint64) uint64
    pub extern operator-(a uint64) uint64
    pub extern operator+(a uint64, b uint64) uint64
    pub extern operator-(a uint64, b uint64) uint64
    pub extern operator*(a uint64, b uint64) uint64
    pub extern operator/(a uint64, b uint64) uint64

    // Not overloadable, but these are supplied specially for this type
    //static extern func operator%(a uint64, b uint64)
    //static extern func operator~(a uint64)
    //static extern func operator|(a uint64, b uint64)
    //static extern func operator&(a uint64, b uint64)
    //static extern func operator^(a uint64, b uint64)
    //static extern func operator<<(a uint64, b int32)
    //static extern func operator>>(a uint64, b int32)
}

pub struct float32
{
    extern construct(from int8)
    extern construct(from uint8)
    extern construct(from int16)
    extern construct(from uint16)
    extern construct(from int32)
    extern construct(from uint32)
    extern construct(from int64)
    extern construct(from uint64)
    extern construct(from float64)
    extern construct(from decimal)

    // Normal float32 comparisons (NAN==NAN is false)
    // TBD: Maybe we don't need funny NAN comparisons since we're starting fresh?
    pub extern static func Equals(a float32, b float32) bool
    pub extern static func Compare(a float32, b float32) int
    
    // Comparisons for sorting (NAN>infinity and NAN==NAN are both true)
    pub extern static func GetHashCode(a float32) uint
    pub extern static func IHashable<float32>::Equals(a float32, b float32) bool
    pub extern static func ISortable<float32>::Compare(a float32, b float32) int

    const MinValue float32 = -3.40282347E+38F
    const MaxValue float32 = 3.40282347E+38F
    const Epsilon float32 = 1.401298E-45F
    const PositiveInfinity float32 = 1F/0F
    const NegativeInfinity float32 = -1F/0F
    const NaN float32 = 0F/0F
    pub prop IsInfinity bool => todo()
    pub prop IsNaN bool => todo()
    pub prop IsNegativeInfinity bool => todo()
    pub prop IsPositiveInfinity bool => todo()

    
    // Overloadable operators
    pub extern operator+(a float32) float32
    pub extern operator-(a float32) float32
    pub extern operator+(a float32, b float32) float32
    pub extern operator-(a float32, b float32) float32
    pub extern operator*(a float32, b float32) float32
    pub extern operator/(a float32, b float32) float32
    
    // Not overloadable, but these are supplied specially for this type
    //static extern func operator%(a float32, b float32)	
    //static extern func operator**(a float32, b float32)
}

pub struct float64
{
    extern construct(from int8)
    extern construct(from uint8)
    extern construct(from int16)
    extern construct(from uint16)
    extern construct(from int32)
    extern construct(from uint32)
    extern construct(from int64)
    extern construct(from uint64)
    extern construct(from float32)
    extern construct(from decimal)

    // Normal float64 comparisons (NAN==NAN is false)
    // TBD: Maybe we don't need funny NAN comparisons since we're starting fresh?
    pub extern static func Equals(a float64, b float64) bool
    pub extern static func Compare(a float64, b float64) int
    
    // Comparisons for sorting (NAN>infinity and NAN==NAN are both true)
    pub extern static func GetHashCode(a float64) uint
    pub extern static func IHashable<float32>::Equals(a float64, b float64) bool
    pub extern static func ISortable<float32>::Compare(a float64, b float64) int

    const MinValue float64 = -1.7976931348623157E+308
    const MaxValue float64 = 1.7976931348623157E+308
    const Epsilon float64 = 4.94065645841247E-324
    const PositiveInfinity float64 = 1.0/0.0
    const NegativeInfinity float64 = -1.0/0.0
    const NaN float64 = 0.0/0.0
    pub prop IsInfinity bool => todo()
    pub prop IsNaN bool => todo()
    pub prop IsNegativeInfinity bool => todo()
    pub prop IsPositiveInfinity bool => todo()
    
    // Overloadable operators
    pub extern operator+(a float64) float64
    pub extern operator-(a float64) float64
    pub extern operator+(a float64, b float64) float64
    pub extern operator-(a float64, b float64) float64
    pub extern operator*(a float64, b float64) float64
    pub extern operator/(a float64, b float64) float64
    
    // Not overloadable, but these are supplied specially for this type
    //static extern func operator%(a float64, b float64)	
    //static extern func operator**(a float64, b float64)
}

/// 128 bit decimal integer.  This will support NAN, infinity, and
/// exponents covering the range of double.
pub struct decimal
{
    extern construct(from int8)
    extern construct(from uint8)
    extern construct(from int16)
    extern construct(from uint16)
    extern construct(from int32)
    extern construct(from uint32)
    extern construct(from int64)
    extern construct(from uint64)
    extern construct(from float32)
    extern construct(from float64)

    const MaxValue decimal = 1E+1000M	
    const MinValue decimal = -1E+1000M
    const PositiveInfinity decimal = 1.0/0.0
    const NegativeInfinity decimal = -1.0/0.0
    const NaN decimal = 0.0/0.0
    pub prop IsInfinity bool => todo()
    pub prop IsNaN bool => todo()
    pub prop IsNegativeInfinity bool => todo()
    pub prop IsPositiveInfinity bool => todo()

    // Comparisons.  NOTE: NaN > infinity, and NaN==NaN is true
    pub extern static func GetHashCode(a decimal) uint
    pub extern static func Equals(a decimal, b decimal) bool
    pub extern static func Compare(a decimal, b decimal) int
    
    // Overloadable operators
    pub extern operator+(a decimal) decimal
    pub extern operator-(a decimal) decimal
    pub extern operator+(a decimal, b decimal) decimal
    pub extern operator-(a decimal, b decimal) decimal
    pub extern operator*(a decimal, b decimal) decimal
    pub extern operator/(a decimal, b decimal) decimal
    
    // Not overloadable, but these are supplied specially for this type    
    //static extern func operator%(a decimal, b decimal)
}