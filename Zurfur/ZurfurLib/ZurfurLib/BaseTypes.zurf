/// Define the simple types.
/// int8, uint8, int16, uint16, int32, uint32,
/// int64, uint64, float32, float64, decimal.
/// byte, int, uint are aliases for uint8, int32, and uint32
/// xint and xuint are pointer sized integers (32 or 64 bits)

namespace Zurfur

pub struct void { }
pub struct int = int32
pub struct uint = uint32
pub struct byte = uint8

// TBD: Needs to be an actual struct to enforce proper typing and casting rules
/// 32 bit or 64 bit integer depending on the platform
pub struct xint = int32 

// TBD: Needs to be an actual struct to enforce proper typing and casting rules
/// 32 bit or 64 bit integer depending on the platform
pub struct xuint = uint32

/// bool (true or false)
pub ro struct bool
    : IEquatable<bool>
{
    pub static func GetHashCode(a bool) uint => extern
    pub static func Equals(a bool, b bool) bool => extern

    // Not overloadable, but these are supplied specially for this type
    //static func operator!(a bool)
    //static func operator||(a bool, b bool)
    //static func operator&&(a bool, b bool)
}

/// int8 (-128..127)
pub ro struct int8
    : IComparable<int8>
{
    operator explicit(from uint8) int8 => extern
    operator explicit(from int16) int8 => extern
    operator explicit(from uint16) int8 => extern
    operator explicit(from int32) int8 => extern
    operator explicit(from uint32) int8 => extern
    operator explicit(from int64) int8 => extern
    operator explicit(from uint64) int8 => extern
    operator explicit(from float32) int8 => extern
    operator explicit(from float64) int8 => extern
    operator explicit(from decimal) int8 => extern
    
    operator implicit(from int8) int16 => extern
    operator implicit(from int8) int32 => extern
    

    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue int8 = 127	
    const MinValue int8 = -128
    pub static func GetHashCode(a int8) uint => extern
    pub static func Equals(a int8, b int8) bool => extern
    pub static func Compare(a int8, b int8) int => extern
}


/// uint8 (0..255) same as byte
pub ro struct uint8
    : IComparable<uint8>
{
    operator explicit(from int8) uint8 => extern
    operator explicit(from int16) uint8 => extern
    operator explicit(from uint16) uint8 => extern
    operator explicit(from int32) uint8 => extern
    operator explicit(from uint32) uint8 => extern
    operator explicit(from int64) uint8 => extern
    operator explicit(from uint64) uint8 => extern
    operator explicit(from float32) uint8 => extern
    operator explicit(from float64) uint8 => extern
    operator explicit(from decimal) uint8 => extern

    operator implicit(from uint8) int16 => extern
    operator implicit(from uint8) uint16 => extern
    operator implicit(from uint8) int32 => extern
    
    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue uint8 = 255	
    const MinValue uint8 = 0
    pub static func GetHashCode(a uint8) uint => extern
    pub static func Equals(a uint8, b uint8) bool => extern
    pub static func Compare(a uint8, b uint8) int => extern
}

/// int16 (-32768..32768)
pub ro struct int16
    : IComparable<int16>
{
    operator explicit(from uint16) int16 => extern
    operator explicit(from int32) int16 => extern
    operator explicit(from uint32) int16 => extern
    operator explicit(from int64) int16 => extern
    operator explicit(from uint64) int16 => extern
    operator explicit(from float32) int16 => extern
    operator explicit(from float64) int16 => extern
    operator explicit(from decimal) int16 => extern

    operator implicit(from int16) int32 => extern

    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue int16 = 32767
    const MinValue int16 = -32768
    pub static func GetHashCode(a int16) uint => extern
    pub static func Equals(a int16, b int16) bool => extern
    pub static func Compare(a int16, b int16) int => extern
}


/// uint16 (0..65535)
pub ro struct uint16
    : IComparable<uint16>
{
    operator explicit(from int8) uint16 => extern
    operator explicit(from int16) uint16 => extern
    operator explicit(from int32) uint16 => extern
    operator explicit(from uint32) uint16 => extern
    operator explicit(from int64) uint16 => extern
    operator explicit(from uint64) uint16 => extern
    operator explicit(from float32) uint16 => extern
    operator explicit(from float64) uint16 => extern
    operator explicit(from decimal) uint16 => extern

    operator implicit(from uint16) int32 => extern
    operator implicit(from uint16) uint32_x => extern

    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue uint16 = 65535	
    const MinValue uint16 = 0
    pub static func GetHashCode(a uint16) uint => extern
    pub static func Equals(a uint16, b uint16) bool => extern
    pub static func Compare(a uint16, b uint16) int => extern
}

/// Prefer int32 over uint32 (uint16+uint16 is int32, not uint32)
pub ro struct uint32_x
{
    operator implicit(from unit32_x) uint32 => extern
}

/// Prefer float64 over float32
pub ro struct float32_x
{
    operator implicit(from float32_x) float32 => extern
}


/// A 32 bit integer (same as int)
pub ro struct int32
    : IArithmetic<int32>
{
    operator explicit(from uint32) int32 => extern
    operator explicit(from int64) int32 => extern
    operator explicit(from uint64) int32 => extern
    operator explicit(from float32) int32 => extern
    operator explicit(from float64) int32 => extern
    operator explicit(from decimal) int32 => extern
    
    operator implicit(from int32) int64 => extern
    operator implicit(from int32) decimal => extern
    operator implicit(from int32) float64 => extern
    operator implicit(from int32) float32_x => extern

    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue int32 = 2147483647	
    const MinValue int32 = -2147483648

    // Comparisons    
    pub static func GetHashCode(a int32) uint => extern
    pub static func Equals(a int32, b int32) bool => extern
    pub static func Compare(a int32, b int32) int => extern

    // Overloadable operators
    pub operator+(a int32) int32 => extern
    pub operator-(a int32) int32 => extern
    pub operator+(a int32, b int32) int32 => extern
    pub operator-(a int32, b int32) int32 => extern
    pub operator*(a int32, b int32) int32 => extern
    pub operator/(a int32, b int32) int32 => extern
    pub operator%(a int32, b int32) int32 => extern
    
    // Not overloadable, but these are supplied specially for this type
    //static func operator~(a int32) int32
    //static func operator~(a int32, b int32) int32
    //static func operator|(a int32, b int32) int32
    //static func operator&(a int32, b int32) int32
    //static func operator<<(a int32, b int32) int32
    //static func operator>>(a int32, b int32) int32
    //static func operator..(a int32, b int32) Range
    //static func operator::(a int32, b int32) Range
}

/// 32 bit unsigned integer (same as uint)
pub ro struct uint32
    : IArithmetic<uint32>
{
    operator explicit(from int8) uint32 => extern
    operator explicit(from int16) uint32 => extern
    operator explicit(from int32) uint32 => extern
    operator explicit(from int64) uint32 => extern
    operator explicit(from uint64) uint32 => extern
    operator explicit(from float32) uint32 => extern
    operator explicit(from float64) uint32 => extern
    operator explicit(from decimal) uint32 => extern
    
    operator implicit(from uint32) int64 => extern
    operator implicit(from uint32) uint64 => extern
    operator implicit(from uint32) decimal => extern
    operator implicit(from uint32) float64 => extern
    operator implicit(from uint32) float32_x => extern
    

    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue uint32 = 4294967295	
    const MinValue uint32 = 0

    // Comparisons    
    pub static func GetHashCode(a uint32) uint => extern
    pub static func Equals(a uint32, b uint32) bool => extern
    pub static func Compare(a uint32, b uint32) int => extern
    
    // Overloadable operators
    pub operator+(a uint32) uint32 => extern
    pub operator-(a uint32) uint32 => extern
    pub operator+(a uint32, b uint32) uint32 => extern
    pub operator-(a uint32, b uint32) uint32 => extern
    pub operator*(a uint32, b uint32) uint32 => extern
    pub operator/(a uint32, b uint32) uint32 => extern
    pub operator%(a uint32, b uint32) uint32 => extern

    // Not overloadable, but these are supplied specially for this type
    //static func operator~(a uint32) uint32
    //static func operator~(a uint32, b uint32) uint32
    //static func operator|(a uint32, b uint32) uint32
    //static func operator&(a uint32, b uint32) uint32
    //static func operator<<(a uint32, b int32) uint32
    //static func operator>>(a uint32, b int32) uint32
}

/// A 64 bit integer
pub ro struct int64
    : IArithmetic<int64>
{
    operator explicit(from uint64) int64 => extern
    operator explicit(from float32) int64 => extern
    operator explicit(from float64) int64 => extern
    operator explicit(from decimal) int64 => extern
    
    operator implicit(from int64) decimal => extern
    operator implicit(from int64) float64 => extern

    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue int64 = 9223372036854775807	
    const MinValue int64 = -9223372036854775808

    // Comparisons    
    pub static func GetHashCode(a int64) uint => extern
    pub static func Equals(a int64, b int64) bool => extern
    pub static func Compare(a int64, b int64) int => extern

    // Overloadable operators
    pub operator+(a int64) int64 => extern
    pub operator-(a int64) int64 => extern
    pub operator+(a int64, b int64) int64 => extern
    pub operator-(a int64, b int64) int64 => extern
    pub operator*(a int64, b int64) int64 => extern
    pub operator/(a int64, b int64) int64 => extern
    pub operator%(a int64, b int64) int64 => extern

    // Not overloadable, but these are supplied specially for this type
    //static func operator~(a int64) int64
    //static func operator~(a int64, b int64) int64
    //static func operator|(a int64, b int64) int64
    //static func operator&(a int64, b int64) int64
    //static func operator<<(a int64, b int32) int64
    //static func operator>>(a int64, b int32) int64
    //static func operator..(a int64, b int64) Range64
    //static func operator::(a int64, b int64) Range64    
}

/// 64 bit unsigned integer
pub ro struct uint64
    : IArithmetic<uint64>
{
    operator explicit(from int8) uint64 => extern
    operator explicit(from int16) uint64 => extern
    operator explicit(from int32) uint64 => extern
    operator explicit(from int64) uint64 => extern
    operator explicit(from float32) uint64 => extern
    operator explicit(from float64) uint64 => extern
    operator explicit(from decimal) uint64 => extern
    
    operator implicit(from uint64) decimal => extern
    operator implicit(from uint64) float64 => extern
    

    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue uint64 = 18446744073709551615	
    const MinValue uint64 = 0

    // Comparisons    
    pub static func GetHashCode(a uint64) uint => extern
    pub static func Equals(a uint64, b uint64) bool => extern
    pub static func Compare(a uint64, b uint64) int => extern
    
    // Overloadable operators
    pub operator+(a uint64) uint64 => extern
    pub operator-(a uint64) uint64 => extern
    pub operator+(a uint64, b uint64) uint64 => extern
    pub operator-(a uint64, b uint64) uint64 => extern
    pub operator*(a uint64, b uint64) uint64 => extern
    pub operator/(a uint64, b uint64) uint64 => extern
    pub operator%(a uint64, b uint64) uint64 => extern

    // Not overloadable, but these are supplied specially for this type
    //static func operator~(a uint64)
    //static func operator~(a uint64, b uint64)
    //static func operator|(a uint64, b uint64)
    //static func operator&(a uint64, b uint64)
    //static func operator<<(a uint64, b int32)
    //static func operator>>(a uint64, b int32)
}

pub ro struct float32
    : IArithmetic<float32>
{
    operator explicit(from float64) float32 => extern
    operator explicit(from decimal) float32 => extern
    
    operator implicit(from float32) float64 => extern
    operator implicit(from float32) decimal => extern

    // Normal float32 comparisons (NAN==NAN is false)
    // TBD: Maybe we don't need funny NAN comparisons since we're starting fresh?
    pub static func Equals(a float32, b float32) bool => extern
    pub static func Compare(a float32, b float32) int => extern
    
    // Comparisons for sorting (NAN>infinity and NAN==NAN are both true)
    pub static func GetHashCode(a float32) uint => extern
    pub static func IEquatable<float32>::Equals(a float32, b float32) bool => extern
    pub static func IComparable<float32>::Compare(a float32, b float32) int => extern

    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue float32 = 3.40282347E+38F
    const MinValue float32 = -3.40282347E+38F
    const Epsilon float32 = 1.401298E-45F
    const PositiveInfinity float32 = 1F/0F
    const NegativeInfinity float32 = -1F/0F
    const NaN float32 = 0F/0F
    pub prop IsInfinity bool => todo()
    pub prop IsNaN bool => todo()
    pub prop IsNegativeInfinity bool => todo()
    pub prop IsPositiveInfinity bool => todo()

    
    // Overloadable operators
    pub operator+(a float32) float32 => extern
    pub operator-(a float32) float32 => extern
    pub operator+(a float32, b float32) float32 => extern
    pub operator-(a float32, b float32) float32 => extern
    pub operator*(a float32, b float32) float32 => extern
    pub operator/(a float32, b float32) float32 => extern
    pub operator%(a float32, b float32) float32 => extern
    
    // Not overloadable, but these are supplied specially for this type
    //static func operator..(a float32, b float32) RangeF32
    //static func operator::(a float32, b float32) RangeF32   
      
}

pub ro struct float64
    : IArithmetic<float64>
{
    operator explicit(from decimal) float64 => extern
    
    operator implicit(from float64) decimal => extern

    // Normal float64 comparisons (NAN==NAN is false)
    // TBD: Maybe we don't need funny NAN comparisons since we're starting fresh?
    pub static func Equals(a float64, b float64) bool => extern
    pub static func Compare(a float64, b float64) int => extern
    
    // Comparisons for sorting (NAN>infinity and NAN==NAN are both true)
    pub static func GetHashCode(a float64) uint => extern
    pub static func IEquatable<float32>::Equals(a float64, b float64) bool => extern
    pub static func IComparable<float32>::Compare(a float64, b float64) int => extern

    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue float64 = 1.7976931348623157E+308
    const MinValue float64 = -1.7976931348623157E+308
    const Epsilon float64 = 4.94065645841247E-324
    const PositiveInfinity float64 = 1.0/0.0
    const NegativeInfinity float64 = -1.0/0.0
    const NaN float64 = 0.0/0.0
    pub prop IsInfinity bool => todo()
    pub prop IsNaN bool => todo()
    pub prop IsNegativeInfinity bool => todo()
    pub prop IsPositiveInfinity bool => todo()
    
    // Overloadable operators
    pub operator+(a float64) float64 => extern
    pub operator-(a float64) float64 => extern
    pub operator+(a float64, b float64) float64 => extern
    pub operator-(a float64, b float64) float64 => extern
    pub operator*(a float64, b float64) float64 => extern
    pub operator/(a float64, b float64) float64 => extern
    pub operator%(a float64, b float64) float64 => extern
    
    // Not overloadable, but these are supplied specially for this type
    //static func operator..(a float64, b float64) RangeF64
    //static func operator::(a float64, b float64) RangeF64       
}

/// 128 bit decimal integer.  This will support NAN, infinity, and
/// exponents covering the entire range of float64 with more precision.
pub ro struct decimal
    : IArithmetic<decimal>
{
    const Origin int8 = 0;
    const Identity int8 = 1;
    const MaxValue decimal = 1E+1000M	
    const MinValue decimal = -1E+1000M
    const PositiveInfinity decimal = 1.0/0.0
    const NegativeInfinity decimal = -1.0/0.0
    const NaN decimal = 0.0/0.0
    pub prop IsInfinity bool => todo()
    pub prop IsNaN bool => todo()
    pub prop IsNegativeInfinity bool => todo()
    pub prop IsPositiveInfinity bool => todo()

    // Comparisons.  NOTE: NaN > infinity, and NaN==NaN is true
    pub static func GetHashCode(a decimal) uint => extern
    pub static func Equals(a decimal, b decimal) bool => extern
    pub static func Compare(a decimal, b decimal) int => extern
    
    // Overloadable operators
    pub operator+(a decimal) decimal => extern
    pub operator-(a decimal) decimal => extern
    pub operator+(a decimal, b decimal) decimal => extern
    pub operator-(a decimal, b decimal) decimal => extern
    pub operator*(a decimal, b decimal) decimal => extern
    pub operator/(a decimal, b decimal) decimal => extern
    pub operator%(a decimal, b decimal) decimal => extern
    
    // Not overloadable, but these are supplied specially for this type
    //static func operator..(a decimal, b decimal) RangeDecimal
    //static func operator::(a decimal, b decimal) RangeDecimal
    
}