// Define the simple types:
//     i8, byte, i16, u16, i32, u32, i64, u64, f32, f64, (Decimal) 
//
// int and uint are 64 bits
// xint and xuint are pointer sized integers (32 or 64 bits)

module Zurfur

pragma AllowUnderscoreDefinitions

// Blank function
get pub nop() {}

// TBD: Probably need to remove this
get todo() require(false) { }


// Return type of functions that don't return anything
type pub void { }

// 64 bit integer, same as i64
type pub int = i64

// 64 bit unsigned integer, same as u64
type pub uint = u64

// TBD: Needs to be an actual type to enforce proper typing and casting rules
// 32 bit or 64 bit integer depending on the platform
type pub xint = i32

// TBD: Needs to be an actual type to enforce proper typing and casting rules
// 32 bit or 64 bit integer depending on the platform
type pub xuint = u32

// a UTF8 encoded character, same as i32
type pub rune = i32



// Base interface for all types
interface pub object { }

// All types have a unique `id`, but other
// non-essential metadata is opt-in
type pub ro copy Type
    @id i32 pub get


// Swap two items
fun pub swap<T>(a mut ref T, b mut ref T)
    extern

// bool (true or false)
type pub ro copy bool
    const __size int = 1


fun pub (bool) getHash() i64 extern
fun pub (bool) opEq(a bool) bool extern

// i8 (-128..127)
type pub ro copy i8
    const __size int = 1
    const pub MAX i8 = 127
    const pub MIN i8 = -128
    const pub ZERO i8 = 0
    const pub ONE i8 = 1
    
fun pub (i8) toI16() i16 extern
fun pub (i8) toI32() i32 extern
fun pub (i8) toI64() i64 extern
fun pub (i8) toF32() f32 extern
fun pub (i8) toF64() f64 extern
fun pub (i8) toDecimal() Decimal extern
fun pub (i8) toStr() str extern
fun pub (i8) toByteMask() byte extern
fun pub (i8) toByteFail() byte require this >= 0 extern
fun pub (i8) getHash() i64 extern
fun pub (i8) opEq(a i8) bool extern
fun pub (i8) opCmp(a i8) int extern


// byte (0..255)
type pub ro copy byte
    const __size int = 1
    const pub MAX byte = 255
    const pub MIN byte = 0
    const pub ZERO byte = 0
    const pub ONE byte = 1
    
fun pub (byte) toI16() i16 extern
fun pub (byte) toU16() u16 extern
fun pub (byte) toI32() i32 extern
fun pub (byte) toU32() u32 extern
fun pub (byte) toI64() i64 extern
fun pub (byte) toU64() u64 extern
fun pub (byte) toF32() f32 extern
fun pub (byte) toF64() f64 extern
fun pub (byte) toDecimal() Decimal extern
fun pub (byte) toStr() str extern
fun pub (byte) toI8Mask() i8 extern
fun pub (byte) toI8Fail() i8 require this <= i8.MAX extern
fun pub (byte) getHash() i64 extern
fun pub (byte) opEq(a byte) bool extern
fun pub (byte) opCmp(a byte) int extern


// i16 (-32768..32768)
type pub ro copy i16
    const __size int = 2
    const pub MAX i16 = 32767
    const pub MIN i16 = -32768
    const pub ZERO i8 = 0
    const pub ONE i8 = 1

fun pub (i16) toI32() i32 extern
fun pub (i16) toI64() i64 extern
fun pub (i16) toF32() f32 extern
fun pub (i16) toF64() f64 extern
fun pub (i16) toDecimal() Decimal extern    
fun pub (i16) toStr() str extern
fun pub (i16) toI8Mask() i8 extern
fun pub (i16) toByteMask() byte extern
fun pub (i16) toU16Mask() u16 extern

// TBD: Add requires    
fun pub (i16) toI8Fail() i8 extern
fun pub (i16) toByteFail() byte extern
fun pub (i16) toU16Fail() u16 extern

fun pub (i16) getHash() i64 extern
fun pub (i16) opEq(a i16) bool extern
fun pub (i16) opCmp(a i16) i64 extern



// u16 (0..65535)
type pub ro copy u16
    const __size int = 2
    const pub MAX u16 = 65535
    const pub MIN u16 = 0
    const pub ZERO i8 = 0
    const pub ONE i8 = 1

fun pub (u16) toI32() i32 extern
fun pub (u16) toU32() u32 extern
fun pub (u16) toI64() i64 extern
fun pub (u16) toU64() u64 extern
fun pub (u16) toF32() f32 extern
fun pub (u16) toF64() f64 extern
fun pub (u16) toDecimal() Decimal extern
fun pub (u16) toStr() str extern
 
fun pub (u16) toI8Mask() i8 extern
fun pub (u16) toByteMask() byte extern
fun pub (u16) toI16Mask() i16 extern

// TBD: Add requires
fun pub (u16) toI8Fail() i8 extern
fun pub (u16) toByteFail() byte extern
fun pub (u16) toI16Fail() i16 extern

fun pub (u16) getHash() i64 extern
fun pub (u16) opEq(a u16) bool extern
fun pub (u16) opCmp(a u16) i64 extern

// A 32 bit integer
type pub ro copy i32
    const __size int = 4
    const pub MAX i32 = 2147483647
    const pub MIN i32 = -2147483648
    const pub ZERO i8 = 0
    const pub ONE i8 = 1

fun pub (i32) toI64() i64 extern
fun pub (i32) toF32() f32 extern
fun pub (i32) toF64() f64 extern
fun pub (i32) toDecimal() Decimal extern    
fun pub (i32) toStr() str extern

fun pub (i32) toI8Mask() i8 extern
fun pub (i32) toByteMask() byte extern
fun pub (i32) toI16Mask() i16 extern
fun pub (i32) toU16Mask() u16 extern
fun pub (i32) toU32Mask() u32 extern

// TBD: Add requires
fun pub (i32) toI8Fail() i8 extern
fun pub (i32) toByteFail() byte extern
fun pub (i32) toI16Fail() i16 extern
fun pub (i32) toU16Fail() u16 extern
fun pub (i32) toU32Fail() u32 extern

fun pub (i32) getHash() int extern
fun pub (i32) opEq(a i32) bool extern
fun pub (i32) opCmp(a i32) int extern
fun pub (i32) opAdd(n i32) i32 extern
fun pub (i32) opSub(n i32) i32 extern
fun pub (i32) opNeg() i32 extern
fun pub (i32) opMul(n i32) i32 extern
fun pub (i32) opDiv(n i32) i32 extern
fun pub (i32) opRem(n i32) i32 extern

fun pub (i32) getIterator() RangeIterator<i32>
    return RangeIterator<i32>(0, my)


// 32 bit unsigned integer
type pub ro copy u32
    const __size int = 4
    const pub MAX u32 = 4294967295
    const pub MIN u32 = 0
    const pub ZERO i8 = 0
    const pub ONE i8 = 1

fun pub (u32) toI64() i64 extern
fun pub (u32) toU64() u64 extern
fun pub (u32) toF32() f32 extern
fun pub (u32) toF64() f64 extern
fun pub (u32) toDecimal() Decimal extern        
fun pub (u32) toStr() str extern

fun pub (u32) toI8Mask() i8 extern
fun pub (u32) toByteMask() byte extern
fun pub (u32) toI16Mask() i16 extern
fun pub (u32) toU16Mask() u16 extern
fun pub (u32) toU32Mask() i32 extern

// TBD: Add requires
fun pub (u32) toI8Fail() i8 extern
fun pub (u32) toByteFail() byte extern
fun pub (u32) toI16Fail() i16 extern
fun pub (u32) toU16Fail() u16 extern
fun pub (u32) toI32Fail() i32 extern        

fun pub (u32) getHash() int extern
fun pub (u32) opEq(a u32) bool extern
fun pub (u32) opCmp(a u32) int extern
fun pub (u32) opAdd(n u32) u32 extern
fun pub (u32) opSub(n u32) u32 extern
fun pub (u32) opNeg() u32 extern
fun pub (u32) opMul(n u32) u32 extern
fun pub (u32) opDiv(n u32) u32 extern
fun pub (u32) opRem(n u32) u32 extern

fun pub (u32) getIterator() RangeIterator<u32>
    return RangeIterator<u32>(0, my)


// A 64 bit integer (same as int)
type pub ro copy i64
    const __size int = 8
    const pub MAX i64 = 9223372036854775807
    const pub MIN i64 = -9223372036854775808
    const pub ZERO i8 = 0
    const pub ONE i8 = 1

fun pub (i64) toF32() f32 extern
fun pub (i64) toF64() f64 extern
fun pub (i64) toDecimal() Decimal extern
fun pub (i64) toStr() str extern

fun pub (i64) toI8Mask() i8 extern
fun pub (i64) toByteMask() byte extern
fun pub (i64) toI16Mask() i16 extern
fun pub (i64) toU16Mask() u16 extern
fun pub (i64) toI32Mask() i32 extern
fun pub (i64) toU32Mask() u32 extern
fun pub (i64) toU64Mask() u64 extern

// TBD: Add requires
fun pub (i64) toI8Fail() i8 extern
fun pub (i64) toByteFail() byte extern
fun pub (i64) toI16Fail() i16 extern
fun pub (i64) toU16Fail() u16 extern
fun pub (i64) toI32Fail() i32 extern
fun pub (i64) toU32Fail() u32 extern
fun pub (i64) toU64Fail() u64 extern    

fun pub (i64) getHash() int extern
fun pub (i64) opEq(a i64) bool extern
fun pub (i64) opCmp(a i64) int extern
fun pub (i64) opAdd(n i64) i64 extern
fun pub (i64) opSub(n i64) i64 extern
fun pub (i64) opNeg() i64 extern
fun pub (i64) opMul(n i64) i64 extern
fun pub (i64) opDiv(n i64) i64 extern
fun pub (i64) opRem(n i64) i64 extern

fun pub (i64) getIterator() RangeIterator<i64>
    return RangeIterator<i64>(0, my)


// 64 bit unsigned integer
type pub ro copy u64
    const __size int = 8
    const pub MAX u64 = 18446744073709551615
    const pub MIN u64 = 0
    const pub ZERO u64 = 0
    const pub ONE u64 = 1

fun pub (u64) toF32() f32 extern
fun pub (u64) toF64() f64 extern
fun pub (u64) toDecimal() Decimal extern
fun pub (u64) toStr() str extern

fun pub (u64) toI8Mask() i8 extern
fun pub (u64) toByteMask() byte extern
fun pub (u64) toI16Mask() i16 extern
fun pub (u64) toU16Mask() u16 extern
fun pub (u64) toI32Mask() i32 extern
fun pub (u64) toU32Mask() u32 extern
fun pub (u64) toI64Mask() i64 extern

// TBD: Add requires
fun pub (u64) toI8Fail() i8 extern
fun pub (u64) toByteFail() byte extern
fun pub (u64) toI16Fail() i16 extern
fun pub (u64) toU16Fail() u16 extern
fun pub (u64) toI32Fail() i32 extern
fun pub (u64) toU32Fail() u32 extern
fun pub (u64) toI64Fail() i64 extern

fun pub (u64) getHash() int extern
fun pub (u64) opEq(a u64) bool extern
fun pub (u64) opCmp(a u64) int extern
fun pub (u64) opAdd(n u64) u64 extern
fun pub (u64) opSub(n u64) u64 extern
fun pub (u64) opNeg() u64 extern
fun pub (u64) opMul(n u64) u64 extern
fun pub (u64) opDiv(n u64) u64 extern
fun pub (u64) opRem(n u64) u64 extern

fun pub (u64) getIterator() RangeIterator<u64>
    return RangeIterator<u64>(0, my)


type pub ro copy f32
    const __size int = 4
    const pub MAX f32 = 3.40282347E+38F
    const pub MIN f32 = -3.40282347E+38F
    const pub ZERO f32 = 0
    const pub ONE f32 = 1
    const pub EPSILON f32 = 1.401298E-45F
    const pub INF f32 = 1F/0F
    const pub NEG_INF f32 = -1F/0F
    const pub NAN f32 = 0_f32/0_f32
    const pub PI f32 = 3.141592653589793238
    const pub E f32 = 2.718281828459045235

get pub (f32) isInfinity() bool extern
get pub (f32) isNan() bool extern
get pub (f32) isNegativeInfinity() bool extern
get pub (f32) isPositiveInfinity() bool extern        

fun pub (f32) toF64() f64 extern
fun pub (f32) toDecimal() Decimal extern    
fun pub (f32) toStr() str extern

fun pub (f32) toI8Mask() i8 extern
fun pub (f32) toByteMask() byte extern
fun pub (f32) toI16Mask() i16 extern
fun pub (f32) toU16Mask() u16 extern
fun pub (f32) toI32Mask() i32 extern
fun pub (f32) toU32Mask() u32 extern
fun pub (f32) toI64Mask() i64 extern
fun pub (f32) toU64Mask() u64 extern

// TBD: Add requires
fun pub (f32) toI8Fail() i8 extern
fun pub (f32) toByteFail() byte extern
fun pub (f32) toI16Fail() i16 extern
fun pub (f32) toU16Fail() u16 extern
fun pub (f32) toI32Fail() i32 extern
fun pub (f32) toU32Fail() u32 extern
fun pub (f32) toI64Fail() i64 extern
fun pub (f32) toU64Fail() u64 extern
        
fun pub (f32) getHash() int extern
fun pub (f32) opEq(a f32) bool extern
fun pub (f32) opCmp(a f32) int extern
fun pub (f32) opEqPartial(a f32) bool extern
fun pub (f32) opCmpPartial(a f32) int extern
fun pub (f32) opAdd(n f32) f32 extern
fun pub (f32) opSub(n f32) f32 extern
fun pub (f32) opNeg() f32 extern
fun pub (f32) opMul(n f32) f32 extern
fun pub (f32) opDiv(n f32) f32 extern
fun pub (f32) opRem(n f32) f32 extern

fun pub (f32) getIterator() RangeIterator<f32>
    return RangeIterator<f32>(0, my)

type pub ro copy f64
    const __size int = 8
    const pub MAX f64 = 1.7976931348623157E+308
    const pub MIN f64 = -1.7976931348623157E+308
    const pub ZERO f64 = 0
    const pub ONE f64 = 1
    const pub EPSILON f64 = 4.94065645841247E-324
    const pub INF f64 = 1.0/0.0
    const pub NEG_INF f64 = -1.0/0.0
    const pub NAN f64 = 0_f64/0_f64
    const PI f64 = 3.141592653589793238
    const E f64 = 2.718281828459045235

get pub (f64) isInfinity() bool extern
get pub (f64) isNan() bool extern
get pub (f64) isNegativeInfinity() bool extern
get pub (f64) isPositiveInfinity() bool extern        

fun pub (f64) toDecimal() Decimal extern
fun pub (f64) toStr() str extern

fun pub (f64) toI8Mask() i8 extern
fun pub (f64) toByteMask() byte extern
fun pub (f64) toI16Mask() i16 extern
fun pub (f64) toU16Mask() u16 extern
fun pub (f64) toI32Mask() i32 extern
fun pub (f64) toU32Mask() u32 extern
fun pub (f64) toI64Mask() i64 extern
fun pub (f64) toU64Mask() u64 extern
fun pub (f64) toF32Clamp() f32 extern
fun pub (f64) toI8Fail() i8 extern
fun pub (f64) toByteFail() byte extern
fun pub (f64) toI16Fail() i16 extern
fun pub (f64) toU16Fail() u16 extern
fun pub (f64) toI32Fail() i32 extern
fun pub (f64) toU32Fail() u32 extern
fun pub (f64) toI64Fail() i64 extern
fun pub (f64) toU64Fail() u64 extern
fun pub (f64) toF32Fail() f32 extern

fun pub (f64) getHash() int extern
fun pub (f64) opEq(a f64) bool extern
fun pub (f64) opCmp(a f64) int extern
fun pub (f64) opEqPartial(a f64) bool extern
fun pub (f64) opCmpPartial(a f64) int extern
fun pub (f64) opAdd(n f64) f64 extern
fun pub (f64) opSub(n f64) f64 extern
fun pub (f64) opNeg() f64 extern
fun pub (f64) opMul(n f64) f64 extern
fun pub (f64) opDiv(n f64) f64 extern
fun pub (f64) opRem(n f64) f64 extern

fun pub (f64) getIterator() RangeIterator<f64>
    return RangeIterator<f64>(0, my)


// 128 bit decimal integer.  This will support NAN, infinity, and
// exponents covering the entire range of f64 with more precision.
type pub ro copy Decimal
    const __size int = 16
    const pub MAX Decimal = 1E+1000M
    const pub MIN Decimal = -1E+1000M
    const pub ZERO Decimal = 0
    const pub ONE Decimal = 1
    const pub INF Decimal = 1.0/0.0
    const pub NEG_INF Decimal = -1.0/0.0
    const pub NAN Decimal = 0.0/0.0
    
get pub (Decimal) isInfinity() bool extern
get pub (Decimal) isNan() bool extern
get pub (Decimal) isNegativeInfinity() bool extern
get pub (Decimal) isPositiveInfinity() bool extern

fun pub (Decimal) toI8Mask() i8 extern
fun pub (Decimal) toByteMask() byte extern
fun pub (Decimal) toI16Mask() i16 extern
fun pub (Decimal) toU16Mask() u16 extern
fun pub (Decimal) toI32Mask() i32 extern
fun pub (Decimal) toU32Mask() u32 extern
fun pub (Decimal) toI64Mask() i64 extern
fun pub (Decimal) toU64Mask() u64 extern
fun pub (Decimal) toF32Clamp() f32 extern
fun pub (Decimal) toF64Clamp() f64 extern
fun pub (Decimal) toI8Fail() i8 extern
fun pub (Decimal) toByteFail() byte extern
fun pub (Decimal) toI16Fail() i16 extern
fun pub (Decimal) toU16Fail() u16 extern
fun pub (Decimal) toI32Fail() i32 extern
fun pub (Decimal) toU32Fail() u32 extern
fun pub (Decimal) toI64Fail() i64 extern
fun pub (Decimal) toU64Fail() u64 extern

fun pub (Decimal) getHash() int extern
fun pub (Decimal) opEq(a Decimal) bool extern
fun pub (Decimal) opCmp(a Decimal) int extern
fun pub (Decimal) opEqPartial(a Decimal) bool extern
fun pub (Decimal) opCmpPartial(a Decimal) int extern
fun pub (Decimal) opAdd(n Decimal) Decimal extern
fun pub (Decimal) opSub(n Decimal) Decimal extern
fun pub (Decimal) opNeg() Decimal extern
fun pub (Decimal) opMul(n Decimal) Decimal extern
fun pub (Decimal) opDiv(n Decimal) Decimal extern
fun pub (Decimal) opRem(n Decimal) Decimal extern

fun pub (Decimal) getIterator() RangeIterator<Decimal>
    return RangeIterator<Decimal>(0, my)

    