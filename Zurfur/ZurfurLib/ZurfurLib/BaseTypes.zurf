/// Define the simple types:
///     i8, u8, i16, u16, i32, u32, i64, u64, f32, f64, decimal.
///
/// int and uint are 64 bits
/// xint and xuint are pointer sized integers (32 or 64 bits)

namespace Zurfur

pub type void { }
pub type object { }
pub type byte = u8
pub type int = i64
pub type uint = u64


// TBD: Needs to be an actual type to enforce proper typing and casting rules
/// 32 bit or 64 bit integer depending on the platform
pub type xint = i32
pub type xuint = u32

pub fun nop() {}

/// bool (true or false)
pub type ro bool
    implements Equatable<bool>
{
    pub static fun GetHashCode(a bool) i64 extern
    pub static fun Equals(a bool, b bool) bool extern

    // Not overloadable, but these are supplied specially for this type
    // fun static operator!(a bool)
    // fun static operator||(a bool, b bool)
    // fun static operator&&(a bool, b bool)
}

/// i8 (-128..127)
pub type ro i8
    implements Comparable<i8>
{
    pub const MaxValue i8 = 127
    pub const MinValue i8 = -128
    pub const Origin i8 = 0
    pub const Identity i8 = 1
    pub static fun GetHashCode(a i8) i64 extern
    pub static fun Equals(a i8, b i8) bool extern
    pub static fun Compare(a i8, b i8) i64 extern
    pub get u8Mask() u8 extern
    pub get u8Fail() u8 extern
}
pub get i8::i16() i16 extern
pub get i8::i32() i32 extern
pub get i8::i64() i64 extern
pub get i8::f32() f32 extern
pub get i8::f64() f64 extern
pub get i8::decimal() decimal extern

/// u8 (0..255) same as byte
pub type ro u8
    implements Comparable<u8>
{
    pub const MaxValue u8 = 255
    pub const MinValue u8 = 0
    pub const Origin u8 = 0
    pub const Identity u8 = 1
    pub static fun GetHashCode(a u8) i64 extern
    pub static fun Equals(a u8, b u8) bool extern
    pub static fun Compare(a u8, b u8) i64 extern
    pub get i8Mask() i8 extern
    pub get i8Fail() i8 extern
}
pub get u8::i16() i16 extern
pub get u8::u16() u16 extern
pub get u8::i32() i32 extern
pub get u8::u32() u32 extern
pub get u8::i64() i64 extern
pub get u8::u64() u64 extern
pub get u8::f32() f32 extern
pub get u8::f64() f64 extern
pub get u8::decimal() decimal extern


/// i16 (-32768..32768)
pub type ro i16
    implements Comparable<i16>
{
    pub const MaxValue i16 = 32767
    pub const MinValue i16 = -32768
    pub const Origin i8 = 0
    pub const Identity i8 = 1
    pub static fun GetHashCode(a i16) i64 extern
    pub static fun Equals(a i16, b i16) bool extern
    pub static fun Compare(a i16, b i16) i64 extern
    pub get i8Mask() i8 extern
    pub get u8Mask() u8 extern
    pub get u16Mask() u16 extern
    pub get i8Fail() i8 extern
    pub get u8Fail() u8 extern
    pub get u16Fail() u16 extern
}
pub get i16::i32() i32 extern
pub get i16::i64() i64 extern
pub get i16::f32() f32 extern
pub get i16::f64() f64 extern
pub get i16::decimal() decimal extern


/// u16 (0..65535)
pub type ro u16
    implements Comparable<u16>
{
    pub const MaxValue u16 = 65535
    pub const MinValue u16 = 0
    pub const Origin i8 = 0
    pub const Identity i8 = 1
    pub static fun GetHashCode(a u16) i64 extern
    pub static fun Equals(a u16, b u16) bool extern
    pub static fun Compare(a u16, b u16) i64 extern
    pub get i8Mask() i8 extern
    pub get u8Mask() u8 extern
    pub get i16Mask() i16 extern
    pub get i8Fail() i8 extern
    pub get u8Fail() u8 extern
    pub get i16Fail() i16 extern
}
pub get u16::i32() i32 extern
pub get u16::u32() u32 extern
pub get u16::i64() i64 extern
pub get u16::u64() u64 extern
pub get u16::f32() f32 extern
pub get u16::f64() f64 extern
pub get u16::decimal() decimal extern

/// A 32 bit integer
pub type ro i32
    implements IArithmetic<i32>
{
    pub const MaxValue i32 = 2147483647
    pub const MinValue i32 = -2147483648
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    // Comparisons
    pub static fun GetHashCode(a i32) i64 extern
    pub static fun Equals(a i32, b i32) bool extern
    pub static fun Compare(a i32, b i32) i64 extern

    // Overloadable operators
    pub fun operator-(a i32) i32 extern
    pub fun operator+(a i32, b i32) i32 extern
    pub fun operator-(a i32, b i32) i32 extern
    pub fun operator*(a i32, b i32) i32 extern
    pub fun operator/(a i32, b i32) i32 extern
    pub fun operator%(a i32, b i32) i32 extern
    
    pub fun GetIterator() RangeIterator<i32>:
        return RangeIterator<i32>(0, this)
    
    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a i32) i32
    // fun operator~(a i32, b i32) i32
    // fun operator|(a i32, b i32) i32
    // fun operator&(a i32, b i32) i32
    // fun operator<<(a i32, b i32) i32
    // fun operator>>(a i32, b i32) i32
    pub get i8Mask() i8 extern
    pub get u8Mask() u8 extern
    pub get i16Mask() i16 extern
    pub get u16Mask() u16 extern
    pub get u32Mask() u32 extern
    pub get i8Fail() i8 extern
    pub get u8Fail() u8 extern
    pub get i16Fail() i16 extern
    pub get u16Fail() u16 extern
    pub get u32Fail() u32 extern
    
    pub get Abs() i32 extern
    pub fun Clamp(min i32, max i32) i32 extern
    pub fun Max(n2 i32) i32 extern
    pub fun Min(n2 i32) i32 extern
    pub get Sign() i32 extern
    pub get Sq() i32 extern
}
pub get i32::i64() i64 extern
pub get i32::f32() f32 extern
pub get i32::f64() f64 extern
pub get i32::decimal() decimal extern

/// 32 bit unsigned integer
pub type ro u32
    implements IArithmetic<u32>
{
    pub const MaxValue u32 = 4294967295
    pub const MinValue u32 = 0
    pub const Origin i8 = 0
    pub const Identity i8 = 1
    
    // Comparisons
    pub static fun GetHashCode(a u32) i64 extern
    pub static fun Equals(a u32, b u32) bool extern
    pub static fun Compare(a u32, b u32) i64 extern
    
    // Overloadable operators
    pub fun operator-(a u32) u32 extern
    pub fun operator+(a u32, b u32) u32 extern
    pub fun operator-(a u32, b u32) u32 extern
    pub fun operator*(a u32, b u32) u32 extern
    pub fun operator/(a u32, b u32) u32 extern
    pub fun operator%(a u32, b u32) u32 extern
    
    pub fun GetIterator() RangeIterator<u32>:
        return RangeIterator<u32>(0, this)
    

    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a u32) u32
    // fun operator~(a u32, b u32) u32
    // fun operator|(a u32, b u32) u32
    // fun operator&(a u32, b u32) u32
    // fun operator<<(a u32, b i32) u32
    // fun operator>>(a u32, b i32) u32

    pub get i8Mask() i8 extern
    pub get u8Mask() u8 extern
    pub get i16Mask() i16 extern
    pub get u16Mask() u16 extern
    pub get i32Mask() i32 extern
    pub get i8Fail() i8 extern
    pub get u8Fail() u8 extern
    pub get i16Fail() i16 extern
    pub get u16Fail() u16 extern
    pub get i32Fail() i32 extern
    
    pub fun Clamp(min u32, max u32) u32 extern
    pub fun Max(n2 u32) u32 extern
    pub fun Min(n2 u32) u32 extern
    pub get Sq() u32 extern
}
pub get u32::i64() i64 extern
pub get u32::u64() u64 extern
pub get u32::f32() f32 extern
pub get u32::f64() f64 extern
pub get u32::decimal() decimal extern

/// A 64 bit integer (same as int)
pub type ro i64
    implements IArithmetic<i64>
{
    pub const MaxValue i64 = 9223372036854775807
    pub const MinValue i64 = -9223372036854775808
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    // Comparisons
    pub static fun GetHashCode(a i64) i64 extern
    pub static fun Equals(a i64, b i64) bool extern
    pub static fun Compare(a i64, b i64) i64 extern

    // Overloadable operators
    pub fun operator-(a i64) i64 extern
    pub fun operator+(a i64, b i64) i64 extern
    pub fun operator-(a i64, b i64) i64 extern
    pub fun operator*(a i64, b i64) i64 extern
    pub fun operator/(a i64, b i64) i64 extern
    pub fun operator%(a i64, b i64) i64 extern
    
    pub fun GetIterator() RangeIterator<i64>:
        return RangeIterator<i64>(0, this)

    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a i64) i64
    // fun operator~(a i64, b i64) i64
    // fun operator|(a i64, b i64) i64
    // fun operator&(a i64, b i64) i64
    // fun operator<<(a i64, b i64) i64
    // fun operator>>(a i64, b i64) i64

    pub get i8Mask() i8 extern
    pub get u8Mask() u8 extern
    pub get i16Mask() i16 extern
    pub get u16Mask() u16 extern
    pub get i32Mask() i32 extern
    pub get u32Mask() u32 extern
    pub get u64Mask() u64 extern
    pub get i8Fail() i8 extern
    pub get u8Fail() u8 extern
    pub get i16Fail() i16 extern
    pub get u16Fail() u16 extern
    pub get i32Fail() i32 extern
    pub get u32Fail() u32 extern
    pub get u64Fail() u64 extern
    
    pub get Abs() i64 extern
    pub fun Clamp(min i64, max i64) i64 extern
    pub fun Max(n2 i64) i64 extern
    pub fun Min(n2 i64) i64 extern
    pub get Sign() i64 extern
    pub get Sq() i64 extern
}
pub get i64::f32() f32 extern
pub get i64::f64() f64 extern
pub get i64::decimal() decimal extern
    

/// 64 bit unsigned integer
pub type ro u64
    implements IArithmetic<u64>
{
    pub const MaxValue u64 = 18446744073709551615
    pub const MinValue u64 = 0
    pub const Origin u64 = 0
    pub const Identity u64 = 1

    // Comparisons
    pub static fun GetHashCode(a u64) i64 extern
    pub static fun Equals(a u64, b u64) bool extern
    pub static fun Compare(a u64, b u64) i64 extern
    
    // Overloadable operators
    pub fun operator-(a u64) u64 extern
    pub fun operator+(a u64, b u64) u64 extern
    pub fun operator-(a u64, b u64) u64 extern
    pub fun operator*(a u64, b u64) u64 extern
    pub fun operator/(a u64, b u64) u64 extern
    pub fun operator%(a u64, b u64) u64 extern

    pub fun GetIterator() RangeIterator<u64>:
        return RangeIterator<u64>(0, this)

    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a u64)
    // fun operator~(a u64, b u64)
    // fun operator|(a u64, b u64)
    // fun operator&(a u64, b u64)
    // fun operator<<(a u64, b i32)
    // fun operator>>(a u64, b i32)

    pub get i8Mask() i8 extern
    pub get u8Mask() u8 extern
    pub get i16Mask() i16 extern
    pub get u16Mask() u16 extern
    pub get i32Mask() i32 extern
    pub get u32Mask() u32 extern
    pub get i64Mask() i64 extern
    pub get i8Fail() i8 extern
    pub get u8Fail() u8 extern
    pub get i16Fail() i16 extern
    pub get u16Fail() u16 extern
    pub get i32Fail() i32 extern
    pub get u32Fail() u32 extern
    pub get i64Fail() i64 extern
    
    pub fun Clamp(min u64, max u64) u64 extern
    pub fun Max(n2 u64) u64 extern
    pub fun Min(n2 u64) u64 extern
    pub get Sq() u64 extern
    
}
pub get u64::f32() f32 extern
pub get u64::f64() f64 extern
pub get u64::decimal() decimal extern

pub type ro f32
    implements IArithmetic<f32>
{
    pub const MaxValue f32 = 3.40282347E+38F
    pub const MinValue f32 = -3.40282347E+38F
    pub const Epsilon f32 = 1.401298E-45F
    pub const PositiveInfinity f32 = 1F/0F
    pub const NegativeInfinity f32 = -1F/0F
    pub const NaN f32 = 0_f32/0_f32
    pub const Origin f32 = 0
    pub const Identity f32 = 1
    pub const PI f32 = 3.141592653589793238
    pub const E f32 = 2.718281828459045235

    pub get IsInfinity() bool extern
    pub get IsNaN() bool extern
    pub get IsNegativeInfinity() bool extern
    pub get IsPositiveInfinity() bool extern    

    pub get i8Mask() i8 extern
    pub get u8Mask() u8 extern
    pub get i16Mask() i16 extern
    pub get u16Mask() u16 extern
    pub get i32Mask() i32 extern
    pub get u32Mask() u32 extern
    pub get i64Mask() i64 extern
    pub get u64Mask() u64 extern
    pub get i8Fail() i8 extern
    pub get u8Fail() u8 extern
    pub get i16Fail() i16 extern
    pub get u16Fail() u16 extern
    pub get i32Fail() i32 extern
    pub get u32Fail() u32 extern
    pub get i64Fail() i64 extern
    pub get u64Fail() u64 extern
    
    // Normal f32 comparisons (nan != nan, etc.)
    pub static fun GetHashCode(a u64) i64 extern
    pub static fun Equals(a f32, b f32) bool extern
    pub static fun Compare(a f32, b f32) i64 extern
        
    // Overloadable operators
    pub fun operator-(a f32) f32 extern
    pub fun operator+(a f32, b f32) f32 extern
    pub fun operator-(a f32, b f32) f32 extern
    pub fun operator*(a f32, b f32) f32 extern
    pub fun operator/(a f32, b f32) f32 extern
    pub fun operator%(a f32, b f32) f32 extern

    pub get Abs() f32 extern
    pub get Acos() f32 extern
    pub get ASin() f32 extern
    pub get ATan() f32 extern
    pub fun ATan2(x f32) f32 extern
    pub get Ceil() f32 extern
    pub fun Clamp(min f32, max f32) f32 extern
    pub get Cos() f32 extern
    pub get Cosh() f32 extern
    pub get Exp() f32 extern
    pub fun Floor(n f32) f32 extern
    pub get Log() f32 extern
    pub get Log2() f32 extern
    pub get Log10() f32 extern
    pub fun Log(b f32) f32 extern
    pub fun Max(n2 f32) f32 extern
    pub fun Min(n2 f32) f32 extern
    pub fun Pow(y f32) f32 extern
    pub fun Round(d i64 = 0) f32 extern
    pub get Sign() i64 extern
    pub get Sin() f32 extern
    pub get Sinh() f32 extern
    pub get Sqrt() f32 extern
    pub get Sq() f32 extern
    pub get Tan() f32 extern
    pub get Tanh() f32 extern
    pub get Trunc() f32 extern
}
pub get f64::f64() f64 extern
pub get decimal::decimal() decimal extern

// Sort order (these are true): NAN>infinity, NAN==NAN, -0==+0
pub static fun Equatable<f32>::GetHashCode(a f32) i64 extern
pub static fun Equatable<f32>::Equals(a f32, b f32) bool extern
pub static fun Comparable<f32>::Compare(a f32, b f32) i64 extern


pub type ro f64
    implements IArithmetic<f64>
{
    pub const MaxValue f64 = 1.7976931348623157E+308
    pub const MinValue f64 = -1.7976931348623157E+308
    pub const Epsilon f64 = 4.94065645841247E-324
    pub const PositiveInfinity f64 = 1.0/0.0
    pub const NegativeInfinity f64 = -1.0/0.0
    pub const NaN f64 = 0_f64/0_f64
    pub const Origin f64 = 0
    pub const Identity f64 = 1
    const PI f64 = 3.141592653589793238
    const E f64 = 2.718281828459045235

    pub get IsInfinity() bool extern
    pub get IsNaN() bool extern
    pub get IsNegativeInfinity() bool extern
    pub get IsPositiveInfinity() bool extern    

    pub get i8Mask() i8 extern
    pub get u8Mask() u8 extern
    pub get i16Mask() i16 extern
    pub get u16Mask() u16 extern
    pub get i32Mask() i32 extern
    pub get u32Mask() u32 extern
    pub get i64Mask() i64 extern
    pub get u64Mask() u64 extern
    pub get f32Clamp() f32 extern
    pub get i8Fail() i8 extern
    pub get u8Fail() u8 extern
    pub get i16Fail() i16 extern
    pub get u16Fail() u16 extern
    pub get i32Fail() i32 extern
    pub get u32Fail() u32 extern
    pub get i64Fail() i64 extern
    pub get u64Fail() u64 extern
    pub get f32Fail() f32 extern

    // Normal f64 comparisons
    pub static fun GetHashCode(a f64) i64 extern
    pub static fun Equals(a f64, b f64) bool extern
    pub static fun Compare(a f64, b f64) i64 extern
            
    // Overloadable operators
    pub fun operator-(a f64) f64 extern
    pub fun operator+(a f64, b f64) f64 extern
    pub fun operator-(a f64, b f64) f64 extern
    pub fun operator*(a f64, b f64) f64 extern
    pub fun operator/(a f64, b f64) f64 extern
    pub fun operator%(a f64, b f64) f64 extern
    
    pub get Abs() f64 extern
    pub get Acos() f64 extern
    pub get ASin() f64 extern
    pub get ATan() f64 extern
    pub fun ATan2(x f64) f64 extern
    pub get Ceil() f64 extern
    pub fun Clamp(min f64, max f64) f64 extern
    pub get Cos() f64 extern
    pub get Cosh() f64 extern
    pub get Exp() f64 extern
    pub fun Floor(n f64) f64 extern
    pub get Log() f64 extern
    pub get Log2() f64 extern
    pub get Log10() f64 extern
    pub fun Log(b f64) f64 extern
    pub fun Max(n2 f64) f64 extern
    pub fun Min(n2 f64) f64 extern
    pub fun Pow(y f64) f64 extern
    pub fun Round(d i64 = 0) f64 extern
    pub get Sign() i64 extern
    pub get Sin() f64 extern
    pub get Sinh() f64 extern
    pub get Sqrt() f64 extern
    pub get Sq() f64 extern
    pub get Tan() f64 extern
    pub get Tanh() f64 extern
    pub get Trunc() f64 extern
}
pub get f64::decimal() decimal extern

// Sort order (these are true): NAN>infinity, NAN==NAN, -0==+0
pub static fun Equatable<f64>::GetHashCode(a f64) i64 extern
pub static fun Equatable<f64>::Equals(a f64, b f64) bool extern
pub static fun Comparable<f64>::Compare(a f64, b f64) i64 extern


/// 128 bit decimal integer.  This will support NAN, infinity, and
/// exponents covering the entire range of f64 with more precision.
pub type ro decimal
    implements IArithmetic<decimal>
{
    pub fun new(a decimal) extern

    pub const MaxValue decimal = 1E+1000M
    pub const MinValue decimal = -1E+1000M
    pub const PositiveInfinity decimal = 1.0/0.0
    pub const NegativeInfinity decimal = -1.0/0.0
    pub const NaN decimal = 0.0/0.0
    pub const Origin decimal = 0
    pub const Identity decimal = 1
    
    pub get IsInfinity() bool extern
    pub get IsNaN() bool extern
    pub get IsNegativeInfinity() bool extern
    pub get IsPositiveInfinity() bool extern

    pub get i8Mask() i8 extern
    pub get u8Mask() u8 extern
    pub get i16Mask() i16 extern
    pub get u16Mask() u16 extern
    pub get i32Mask() i32 extern
    pub get u32Mask() u32 extern
    pub get i64Mask() i64 extern
    pub get u64Mask() u64 extern
    pub get f32Clamp() f32 extern
    pub get f64Clamp() f64 extern
    pub get i8Fail() i8 extern
    pub get u8Fail() u8 extern
    pub get i16Fail() i16 extern
    pub get u16Fail() u16 extern
    pub get i32Fail() i32 extern
    pub get u32Fail() u32 extern
    pub get i64Fail() i64 extern
    pub get u64Fail() u64 extern

    // Normal comparisons
    pub static fun GetHashCode(a decimal) i64 extern
    pub static fun Equals(a decimal, b decimal) bool extern
    pub static fun Compare(a decimal, b decimal) i64 extern
        
    // Overloadable operators
    pub fun operator-(a decimal) decimal extern
    pub fun operator+(a decimal, b decimal) decimal extern
    pub fun operator-(a decimal, b decimal) decimal extern
    pub fun operator*(a decimal, b decimal) decimal extern
    pub fun operator/(a decimal, b decimal) decimal extern
    pub fun operator%(a decimal, b decimal) decimal extern

    pub get Abs() decimal extern
    pub fun Clamp(min decimal, max decimal) decimal extern
    pub fun Max(n2 decimal) decimal extern
    pub fun Min(n2 decimal) decimal extern
    pub get Sign() i64 extern
    pub get Sq() decimal extern
}

// Sort order (these are true): NAN>infinity, NAN==NAN, -0==+0
pub static fun Equatable<decimal>::GetHashCode(a decimal) i64 extern
pub static fun Equatable<decimal>::Equals(a decimal, b decimal) bool extern
pub static fun Comparable<decimal>::Compare(a decimal, b decimal) i64 extern
