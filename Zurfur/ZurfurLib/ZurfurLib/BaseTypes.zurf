// Define the simple types:
//     i8, byte, i16, u16, i32, u32, int, u64, f32, f64, Decimal
//
// xuint is pointer sized integer (u32 or u64)

module Zurfur

pragma AllowUnderscoreDefinitions

// Blank function
get pub nop() {}

// TBD: Probably need to remove this
get todo() require(false) { }

// Return type of functions that don't return anything
type pub void { }

// Empty value for pointers and optionals
type pub nil { }

// a UTF8 encoded character, same as i32
type pub rune = i32

// Base interface for all types
interface pub object { }

// All types have a unique `id`, but other
// non-essential metadata is opt-in
type pub ro copy Type
    @id i32 pub get


// Swap two items
fun pub swap<T>(a mut ref T, b mut ref T)
    extern

// bool (true or false)
type pub ro copy bool
    const __size int = 1


fun pub bool.getHash() int extern
fun pub bool._opEq(a bool) bool extern

// i8 (-128..127)
type pub ro copy i8
    const __size int = 1
    const pub MAX i8 = 127
    const pub MIN i8 = -128
    const pub ZERO i8 = 0
    const pub ONE i8 = 1
    
fun pub i8.toI16() i16 extern
fun pub i8.toI32() i32 extern
fun pub i8.toInt() int extern
fun pub i8.toF32() f32 extern
fun pub i8.toF64() f64 extern
fun pub i8.toDecimal() Decimal extern
fun pub i8.toStr() str extern
fun pub i8.toByteMask() byte extern
fun pub i8.toByteFail() byte require this >= 0 extern
fun pub i8.getHash() int extern
fun pub i8._opEq(a i8) bool extern
fun pub i8._opCmp(a i8) int extern


// byte (0..255)
type pub ro copy byte
    const __size int = 1
    const pub MAX byte = 255
    const pub MIN byte = 0
    const pub ZERO byte = 0
    const pub ONE byte = 1
    
fun pub byte.toI16() i16 extern
fun pub byte.toU16() u16 extern
fun pub byte.toI32() i32 extern
fun pub byte.toU32() u32 extern
fun pub byte.toInt() int extern
fun pub byte.toU64() u64 extern
fun pub byte.toF32() f32 extern
fun pub byte.toF64() f64 extern
fun pub byte.toDecimal() Decimal extern
fun pub byte.toStr() str extern
fun pub byte.toI8Mask() i8 extern
fun pub byte.toI8Fail() i8 require this <= i8.MAX extern
fun pub byte.getHash() int extern
fun pub _opEq(a byte, b byte) bool extern
fun pub _opCmp(a byte, b byte) int extern


// i16 (-32768..32768)
type pub ro copy i16
    const __size int = 2
    const pub MAX i16 = 32767
    const pub MIN i16 = -32768
    const pub ZERO i16 = 0
    const pub ONE i16 = 1

fun pub i16.toI32() i32 extern
fun pub i16.toInt() int extern
fun pub i16.toF32() f32 extern
fun pub i16.toF64() f64 extern
fun pub i16.toDecimal() Decimal extern    
fun pub i16.toStr() str extern
fun pub i16.toI8Mask() i8 extern
fun pub i16.toByteMask() byte extern
fun pub i16.toU16Mask() u16 extern

// TBD: Add requires    
fun pub i16.toI8Fail() i8 extern
fun pub i16.toByteFail() byte extern
fun pub i16.toU16Fail() u16 extern

fun pub i16.getHash() int extern
fun pub _opEq(a i16, b i16) bool extern
fun pub _opCmp(a i16, b i16) int extern



// u16 (0..65535)
type pub ro copy u16
    const __size int = 2
    const pub MAX u16 = 65535
    const pub MIN u16 = 0
    const pub ZERO u16 = 0
    const pub ONE u16 = 1

fun pub u16.toI32() i32 extern
fun pub u16.toU32() u32 extern
fun pub u16.toInt() int extern
fun pub u16.toU64() u64 extern
fun pub u16.toF32() f32 extern
fun pub u16.toF64() f64 extern
fun pub u16.toDecimal() Decimal extern
fun pub u16.toStr() str extern
 
fun pub u16.toI8Mask() i8 extern
fun pub u16.toByteMask() byte extern
fun pub u16.toI16Mask() i16 extern

// TBD: Add requires
fun pub u16.toI8Fail() i8 extern
fun pub u16.toByteFail() byte extern
fun pub u16.toI16Fail() i16 extern

fun pub u16.getHash() int extern
fun pub _opEq(a u16, b u16) bool extern
fun pub _opCmp(a u16, b u16) int extern

// A 32 bit integer
type pub ro copy i32
    const __size int = 4
    const pub MAX i32 = 2147483647
    const pub MIN i32 = -2147483648
    const pub ZERO i32 = 0
    const pub ONE i32 = 1

fun pub i32.toInt() int extern
fun pub i32.toF32() f32 extern
fun pub i32.toF64() f64 extern
fun pub i32.toDecimal() Decimal extern    
fun pub i32.toStr() str extern

fun pub i32.toI8Mask() i8 extern
fun pub i32.toByteMask() byte extern
fun pub i32.toI16Mask() i16 extern
fun pub i32.toU16Mask() u16 extern
fun pub i32.toU32Mask() u32 extern

// TBD: Add requires
fun pub i32.toI8Fail() i8 extern
fun pub i32.toByteFail() byte extern
fun pub i32.toI16Fail() i16 extern
fun pub i32.toU16Fail() u16 extern
fun pub i32.toU32Fail() u32 extern

fun pub i32.getHash() int extern
fun pub _opEq(a i32, b i32) bool extern
fun pub _opCmp(a i32, b i32) int extern
fun pub _opAdd(a i32, b i32) i32 extern
fun pub _opSub(a i32, b i32) i32 extern
fun pub _opNeg(a i32) i32 extern
fun pub _opMul(a i32, b i32) i32 extern
fun pub _opDiv(a i32, b i32) i32 extern
fun pub _opRem(a i32, b i32) i32 extern

fun pub i32.getIterator() RangeIterator<i32>
    return RangeIterator<i32>(0, my)


// 32 bit unsigned integer
type pub ro copy u32
    const __size int = 4
    const pub MAX u32 = 4294967295
    const pub MIN u32 = 0
    const pub ZERO u32 = 0
    const pub ONE u32 = 1

fun pub u32.toInt() int extern
fun pub u32.toU64() u64 extern
fun pub u32.toF32() f32 extern
fun pub u32.toF64() f64 extern
fun pub u32.toDecimal() Decimal extern        
fun pub u32.toStr() str extern

fun pub u32.toI8Mask() i8 extern
fun pub u32.toByteMask() byte extern
fun pub u32.toI16Mask() i16 extern
fun pub u32.toU16Mask() u16 extern
fun pub u32.toU32Mask() i32 extern

// TBD: Add requires
fun pub u32.toI8Fail() i8 extern
fun pub u32.toByteFail() byte extern
fun pub u32.toI16Fail() i16 extern
fun pub u32.toU16Fail() u16 extern
fun pub u32.toI32Fail() i32 extern        

fun pub u32.getHash() int extern
fun pub _opEq(a u32, b u32) bool extern
fun pub _opCmp(a u32, b u32) int extern
fun pub _opAdd(a u32, b u32) u32 extern
fun pub _opSub(a u32, b u32) u32 extern
fun pub _opNeg(a u32) u32 extern
fun pub _opMul(a u32, b u32) u32 extern
fun pub _opDiv(a u32, b u32) u32 extern
fun pub _opRem(a u32, b u32) u32 extern

fun pub u32.getIterator() RangeIterator<u32>
    return RangeIterator<u32>(0, my)


// A 64 bit integer (same as int)
type pub ro copy int
    const __size int = 8
    const pub MAX int = 9223372036854775807
    const pub MIN int = -9223372036854775808
    const pub ZERO int = 0
    const pub ONE int = 1

fun pub int.toF32() f32 extern
fun pub int.toF64() f64 extern
fun pub int.toDecimal() Decimal extern
fun pub int.toStr() str extern

fun pub int.toI8Mask() i8 extern
fun pub int.toByteMask() byte extern
fun pub int.toI16Mask() i16 extern
fun pub int.toU16Mask() u16 extern
fun pub int.toI32Mask() i32 extern
fun pub int.toU32Mask() u32 extern
fun pub int.toU64Mask() u64 extern

// TBD: Add requires
fun pub int.toI8Fail() i8 extern
fun pub int.toByteFail() byte extern
fun pub int.toI16Fail() i16 extern
fun pub int.toU16Fail() u16 extern
fun pub int.toI32Fail() i32 extern
fun pub int.toU32Fail() u32 extern
fun pub int.toU64Fail() u64 extern    

fun pub int.getHash() int extern
fun pub _opEq(a int, b int) bool extern
fun pub _opCmp(a int, b int) int extern
fun pub _opAdd(a int, b int) int extern
fun pub _opSub(a int, b int) int extern
fun pub _opNeg(a int) int extern
fun pub _opMul(a int, b int) int extern
fun pub _opDiv(a int, b int) int extern
fun pub _opRem(a int, b int) int extern

fun pub int.getIterator() RangeIterator<int>
    return RangeIterator<int>(0, my)

// 64 bit unsigned integer
type pub ro copy u64
    const __size int = 8
    const pub MAX u64 = 18446744073709551615
    const pub MIN u64 = 0
    const pub ZERO u64 = 0
    const pub ONE u64 = 1

fun pub u64.toF32() f32 extern
fun pub u64.toF64() f64 extern
fun pub u64.toDecimal() Decimal extern
fun pub u64.toStr() str extern

fun pub u64.toI8Mask() i8 extern
fun pub u64.toByteMask() byte extern
fun pub u64.toI16Mask() i16 extern
fun pub u64.toU16Mask() u16 extern
fun pub u64.toI32Mask() i32 extern
fun pub u64.toU32Mask() u32 extern
fun pub u64.toIntMask() int extern

// TBD: Add requires
fun pub u64.toI8Fail() i8 extern
fun pub u64.toByteFail() byte extern
fun pub u64.toI16Fail() i16 extern
fun pub u64.toU16Fail() u16 extern
fun pub u64.toI32Fail() i32 extern
fun pub u64.toU32Fail() u32 extern
fun pub u64.toIntFail() int extern

fun pub u64.getHash() int extern
fun pub _opEq(a u64, b u64) bool extern
fun pub _opCmp(a u64, b u64) int extern
fun pub _opAdd(a u64, b u64) u64 extern
fun pub _opSub(a u64, b u64) u64 extern
fun pub _opNeg(a u64) u64 extern
fun pub _opMul(a u64, b u64) u64 extern
fun pub _opDiv(a u64, b u64) u64 extern
fun pub _opRem(a u64, b u64) u64 extern

fun pub u64.getIterator() RangeIterator<u64>
    return RangeIterator<u64>(0, my)
    

// A 32 or 64 bit unsigned integer
type pub ro copy xuint
    //const __size int = 8
    const pub MIN xuint = 0
    const pub ZERO xuint = 0
    const pub ONE xuint = 1

fun pub xuint.toF32() f32 extern
fun pub xuint.toF64() f64 extern
fun pub xuint.toDecimal() Decimal extern
fun pub xuint.toStr() str extern

fun pub xuint.toI8Mask() i8 extern
fun pub xuint.toByteMask() byte extern
fun pub xuint.toI16Mask() i16 extern
fun pub xuint.toU16Mask() u16 extern
fun pub xuint.toI32Mask() i32 extern
fun pub xuint.toU32Mask() u32 extern
fun pub xuint.toU64Mask() u64 extern

// TBD: Add requires
fun pub xuint.toI8Fail() i8 extern
fun pub xuint.toByteFail() byte extern
fun pub xuint.toI16Fail() i16 extern
fun pub xuint.toU16Fail() u16 extern
fun pub xuint.toI32Fail() i32 extern
fun pub xuint.toU32Fail() u32 extern
fun pub xuint.toU64Fail() u64 extern    

fun pub xuint.getHash() int extern
fun pub _opEq(a xuint, b xuint) bool extern
fun pub _opCmp(a xuint, b xuint) int extern
fun pub _opAdd(a xuint, b xuint) xuint extern
fun pub _opSub(a xuint, b xuint) xuint extern
fun pub _opNeg(a xuint) xuint extern
fun pub _opMul(a xuint, b xuint) xuint extern
fun pub _opDiv(a xuint, b xuint) xuint extern
fun pub _opRem(a xuint, b xuint) xuint extern

fun pub xuint.getIterator() RangeIterator<xuint>
    return RangeIterator<xuint>(0, my)

// A 32 or 64 bit unsigned integer
type pub ro copy xint
    //const __size int = 8
    const pub MIN xint = 0
    const pub ZERO xint = 0
    const pub ONE xint = 1

fun pub xint.toF32() f32 extern
fun pub xint.toF64() f64 extern
fun pub xint.toDecimal() Decimal extern
fun pub xint.toStr() str extern

fun pub xint.toI8Mask() i8 extern
fun pub xint.toByteMask() byte extern
fun pub xint.toI16Mask() i16 extern
fun pub xint.toU16Mask() u16 extern
fun pub xint.toI32Mask() i32 extern
fun pub xint.toU32Mask() u32 extern
fun pub xint.toU64Mask() u64 extern

// TBD: Add requires
fun pub xint.toI8Fail() i8 extern
fun pub xint.toByteFail() byte extern
fun pub xint.toI16Fail() i16 extern
fun pub xint.toU16Fail() u16 extern
fun pub xint.toI32Fail() i32 extern
fun pub xint.toU32Fail() u32 extern
fun pub xint.toU64Fail() u64 extern    

fun pub xint.getHash() int extern
fun pub _opEq(a xint, b xint) bool extern
fun pub _opCmp(a xint, b xint) int extern
fun pub _opAdd(a xint, b xint) xint extern
fun pub _opSub(a xint, b xint) xint extern
fun pub _opNeg(a xint) xint extern
fun pub _opMul(a xint, b xint) xint extern
fun pub _opDiv(a xint, b xint) xint extern
fun pub _opRem(a xint, b xint) xint extern

fun pub xint.getIterator() RangeIterator<xint>
    return RangeIterator<xuint>(0, my)


type pub ro copy f32
    const __size int = 4
    const pub MAX f32 = 3.40282347E+38F
    const pub MIN f32 = -3.40282347E+38F
    const pub ZERO f32 = 0
    const pub ONE f32 = 1
    const pub EPSILON f32 = 1.401298E-45F
    const pub INF f32 = 1F/0F
    const pub NEG_INF f32 = -1F/0F
    const pub NAN f32 = 0_f32/0_f32
    const pub PI f32 = 3.141592653589793238
    const pub E f32 = 2.718281828459045235

get pub f32.isInfinity() bool extern
get pub f32.isNan() bool extern
get pub f32.isNegativeInfinity() bool extern
get pub f32.isPositiveInfinity() bool extern        

fun pub f32.toF64() f64 extern
fun pub f32.toDecimal() Decimal extern    
fun pub f32.toStr() str extern

fun pub f32.toI8Mask() i8 extern
fun pub f32.toByteMask() byte extern
fun pub f32.toI16Mask() i16 extern
fun pub f32.toU16Mask() u16 extern
fun pub f32.toI32Mask() i32 extern
fun pub f32.toU32Mask() u32 extern
fun pub f32.toIntMask() int extern
fun pub f32.toU64Mask() u64 extern

// TBD: Add requires
fun pub f32.toI8Fail() i8 extern
fun pub f32.toByteFail() byte extern
fun pub f32.toI16Fail() i16 extern
fun pub f32.toU16Fail() u16 extern
fun pub f32.toI32Fail() i32 extern
fun pub f32.toU32Fail() u32 extern
fun pub f32.toIntFail() int extern
fun pub f32.toU64Fail() u64 extern
        
fun pub f32.getHash() int extern
fun pub _opEq(a f32, b f32) bool extern
fun pub _opCmp(a f32, b f32) int extern
fun pub _opEqNan(a f32, b f32) bool extern
fun pub _opCmpNan(a f32, b f32) int extern
fun pub _opAdd(a f32, b f32) f32 extern
fun pub _opSub(a f32, b f32) f32 extern
fun pub _opNeg(a f32) f32 extern
fun pub _opMul(a f32, b f32) f32 extern
fun pub _opDiv(a f32, b f32) f32 extern
fun pub _opRem(a f32, b f32) f32 extern

fun pub f32.getIterator() RangeIterator<f32>
    return RangeIterator<f32>(0, my)

type pub ro copy f64
    const __size int = 8
    const pub MAX f64 = 1.7976931348623157E+308
    const pub MIN f64 = -1.7976931348623157E+308
    const pub ZERO f64 = 0
    const pub ONE f64 = 1
    const pub EPSILON f64 = 4.94065645841247E-324
    const pub INF f64 = 1.0/0.0
    const pub NEG_INF f64 = -1.0/0.0
    const pub NAN f64 = 0_f64/0_f64
    const pub PI f64 = 3.141592653589793238
    const pub E f64 = 2.718281828459045235

get pub f64.isInfinity() bool extern
get pub f64.isNan() bool extern
get pub f64.isNegativeInfinity() bool extern
get pub f64.isPositiveInfinity() bool extern        

fun pub f64.toDecimal() Decimal extern
fun pub f64.toStr() str extern

fun pub f64.toI8Mask() i8 extern
fun pub f64.toByteMask() byte extern
fun pub f64.toI16Mask() i16 extern
fun pub f64.toU16Mask() u16 extern
fun pub f64.toI32Mask() i32 extern
fun pub f64.toU32Mask() u32 extern
fun pub f64.toIntMask() int extern
fun pub f64.toU64Mask() u64 extern
fun pub f64.toF32Clamp() f32 extern
fun pub f64.toI8Fail() i8 extern
fun pub f64.toByteFail() byte extern
fun pub f64.toI16Fail() i16 extern
fun pub f64.toU16Fail() u16 extern
fun pub f64.toI32Fail() i32 extern
fun pub f64.toU32Fail() u32 extern
fun pub f64.toIntFail() int extern
fun pub f64.toU64Fail() u64 extern
fun pub f64.toF32Fail() f32 extern

fun pub f64.getHash() int extern

fun pub _opEq(a f64, b f64) bool extern
fun pub _opCmp(a f64, b f64) int extern
fun pub _opEqNan(a f64, b f64) bool extern
fun pub _opCmpNan(a f64, b f64) int extern
fun pub _opAdd(a f64, b f64) f64 extern
fun pub _opSub(a f64, b f64) f64 extern
fun pub _opNeg(a f64) f64 extern
fun pub _opMul(a f64, b f64) f64 extern
fun pub _opDiv(a f64, b f64) f64 extern
fun pub _opRem(a f64, b f64) f64 extern

fun pub f64.getIterator() RangeIterator<f64>
    return RangeIterator<f64>(0, my)


// 128 bit decimal integer.  This will support NAN, infinity, and
// exponents covering the entire range of f64 with more precision.
type pub ro copy Decimal
    const __size int = 16
    const pub MAX Decimal = 1E+1000M
    const pub MIN Decimal = -1E+1000M
    const pub ZERO Decimal = 0
    const pub ONE Decimal = 1
    const pub INF Decimal = 1.0/0.0
    const pub NEG_INF Decimal = -1.0/0.0
    const pub NAN Decimal = 0.0/0.0
    
get pub Decimal.isInfinity() bool extern
get pub Decimal.isNan() bool extern
get pub Decimal.isNegativeInfinity() bool extern
get pub Decimal.isPositiveInfinity() bool extern

fun pub Decimal.toI8Mask() i8 extern
fun pub Decimal.toByteMask() byte extern
fun pub Decimal.toI16Mask() i16 extern
fun pub Decimal.toU16Mask() u16 extern
fun pub Decimal.toI32Mask() i32 extern
fun pub Decimal.toU32Mask() u32 extern
fun pub Decimal.toIntMask() int extern
fun pub Decimal.toU64Mask() u64 extern
fun pub Decimal.toF32Clamp() f32 extern
fun pub Decimal.toF64Clamp() f64 extern
fun pub Decimal.toI8Fail() i8 extern
fun pub Decimal.toByteFail() byte extern
fun pub Decimal.toI16Fail() i16 extern
fun pub Decimal.toU16Fail() u16 extern
fun pub Decimal.toI32Fail() i32 extern
fun pub Decimal.toU32Fail() u32 extern
fun pub Decimal.toIntFail() int extern
fun pub Decimal.toU64Fail() u64 extern

fun pub Decimal.getHash() int extern
fun pub _opEq(a Decimal, b Decimal) bool extern
fun pub _opCmp(a Decimal, b Decimal) int extern
fun pub _opEqNan(a Decimal, b Decimal) bool extern
fun pub _opCmpNan(a Decimal, b Decimal) int extern
fun pub _opAdd(a Decimal, b Decimal) Decimal extern
fun pub _opSub(a Decimal, b Decimal) Decimal extern
fun pub _opNeg(a Decimal) Decimal extern
fun pub _opMul(a Decimal, b Decimal) Decimal extern
fun pub _opDiv(a Decimal, b Decimal) Decimal extern
fun pub _opRem(a Decimal, b Decimal) Decimal extern

fun pub Decimal.getIterator() RangeIterator<Decimal>
    return RangeIterator<Decimal>(0, my)

    