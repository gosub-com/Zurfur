/// Define the simple types.
/// i8, u8, i16, u16, i32, u32,
/// i64, u64, f32, f64, decimal.
/// byte, int, uint are aliases for u8, i32, and u32
/// xint and xuint are pointer sized integers (32 or 64 bits)

namespace Zurfur

pub struct void { }
pub struct object { }
pub struct int = i32
pub struct uint = u32
pub struct byte = u8

/// TBD: Implement
pub struct Array<T> { }

// TBD: Needs to be an actual type to enforce proper typing and casting rules
/// 32 bit or 64 bit integer depending on the platform
pub struct xint = i32

// TBD: Needs to be an actual type to enforce proper typing and casting rules
/// 32 bit or 64 bit integer depending on the platform
pub struct xuint = u32

/// bool (true or false)
pub struct ro bool
    implements Equatable<bool>
{
    pub static fun new(a bool) extern
    pub static fun GetHashCode(a bool) uint extern
    pub static fun Equals(a bool, b bool) bool extern

    // Not overloadable, but these are supplied specially for this type
    // fun static operator!(a bool)
    // fun static operator||(a bool, b bool)
    // fun static operator&&(a bool, b bool)
}

/// i8 (-128..127)
pub struct ro i8
    implements Comparable<i8>
{
    pub const MaxValue i8 = 127
    pub const MinValue i8 = -128
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun new(a i8) extern
    pub fun cast(a u8) i8 extern
    pub fun cast(a i16) i8 extern
    pub fun cast(a u16) i8 extern
    pub fun cast(a i32) i8 extern
    pub fun cast(a u32) i8 extern
    pub fun cast(a i64) i8 extern
    pub fun cast(a u64) i8 extern
    pub fun cast(a f32) i8 extern
    pub fun cast(a f64) i8 extern
    pub fun cast(a decimal) i8 extern
    
    //pub fun implicit(a i8) i16
    //pub fun implicit(a i8) i32
    //pub fun implicit(a i8) i64
    //pub fun implicit(a i8) f32
    //pub fun implicit(a i8) f64
    //pub fun implicit(a i8) decimal
    
    pub static fun GetHashCode(a i8) uint extern
    pub static fun Equals(a i8, b i8) bool extern
    pub static fun Compare(a i8, b i8) int extern
}


/// u8 (0..255) same as byte
pub struct ro u8
    implements Comparable<u8>
{
    pub const MaxValue u8 = 255
    pub const MinValue u8 = 0
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun new(a u8) extern
    
    pub fun cast(a i8) u8 extern
    pub fun cast(a i16) u8 extern
    pub fun cast(a u16) u8 extern
    pub fun cast(a i32) u8 extern
    pub fun cast(a u32) u8 extern
    pub fun cast(a i64) u8 extern
    pub fun cast(a u64) u8 extern
    pub fun cast(a f32) u8 extern
    pub fun cast(a f64) u8 extern
    pub fun cast(a decimal) u8 extern

    //pub fun implicit(a u8) i16
    //pub fun implicit(a u8) u16
    //pub fun implicit(a u8) i32
    //pub fun implicit(a u8) u32
    //pub fun implicit(a u8) i64
    //pub fun implicit(a u8) u64
    //pub fun implicit(a u8) f32
    //pub fun implicit(a u8) f64
    //pub fun implicit(a u8) decimal
    
    pub static fun GetHashCode(a u8) uint extern
    pub static fun Equals(a u8, b u8) bool extern
    pub static fun Compare(a u8, b u8) int extern
}

/// i16 (-32768..32768)
pub struct ro i16
    implements Comparable<i16>
{
    pub const MaxValue i16 = 32767
    pub const MinValue i16 = -32768
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun new(a i16) extern

    pub fun cast(a u16) i16 extern
    pub fun cast(a i32) i16 extern
    pub fun cast(a u32) i16 extern
    pub fun cast(a i64) i16 extern
    pub fun cast(a u64) i16 extern
    pub fun cast(a f32) i16 extern
    pub fun cast(a f64) i16 extern
    pub fun cast(a decimal) i16 extern

    //pub fun implicit(a i16) i32
    //pub fun implicit(a i16) i64
    //pub fun implicit(a i16) f32
    //pub fun implicit(a i16) f64
    //pub fun implicit(a i16) decimal

    pub static fun GetHashCode(a i16) uint extern
    pub static fun Equals(a i16, b i16) bool extern
    pub static fun Compare(a i16, b i16) int extern
}


/// u16 (0..65535)
pub struct ro u16
    implements Comparable<u16>
{
    pub const MaxValue u16 = 65535
    pub const MinValue u16 = 0
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun new(a u16) extern

    pub fun cast(a i8) u16 extern
    pub fun cast(a i16) u16 extern
    pub fun cast(a i32) u16 extern
    pub fun cast(a u32) u16 extern
    pub fun cast(a i64) u16 extern
    pub fun cast(a u64) u16 extern
    pub fun cast(a f32) u16 extern
    pub fun cast(a f64) u16 extern
    pub fun cast(a decimal) u16 extern

    //pub fun implicit(a u16) i32
    //pub fun implicit(a u16) u32
    //pub fun implicit(a u16) i64
    //pub fun implicit(a u16) u64
    //pub fun implicit(a u16) f32
    //pub fun implicit(a u16) f64
    //pub fun implicit(a u16) decimal

    pub static fun GetHashCode(a u16) uint extern
    pub static fun Equals(a u16, b u16) bool extern
    pub static fun Compare(a u16, b u16) int extern
}

/// A 32 bit integer (same as int)
pub struct ro i32
    implements IArithmetic<i32>
{
    pub const MaxValue i32 = 2147483647
    pub const MinValue i32 = -2147483648
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun new(a i32) extern

    pub fun cast(a u32) i32 extern
    pub fun cast(a i64) i32 extern
    pub fun cast(a u64) i32 extern
    pub fun cast(a f32) i32 extern
    pub fun cast(a f64) i32 extern
    pub fun cast(a decimal) i32 extern
    
    //pub fun implicit(a i32) i64
    //pub fun implicit(a i32) f32
    //pub fun implicit(a i32) f64
    //pub fun implicit(a i32) decimal

    // Comparisons
    pub static fun GetHashCode(a i32) uint extern
    pub static fun Equals(a i32, b i32) bool extern
    pub static fun Compare(a i32, b i32) int extern

    // Overloadable operators
    pub fun operator-(a i32) i32 extern
    pub fun operator+(a i32, b i32) i32 extern
    pub fun operator-(a i32, b i32) i32 extern
    pub fun operator*(a i32, b i32) i32 extern
    pub fun operator/(a i32, b i32) i32 extern
    pub fun operator%(a i32, b i32) i32 extern
    
    pub fun GetIterator() RangeIterator<i32>
        return RangeIterator<i32>(0, this)
    
    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a i32) i32
    // fun operator~(a i32, b i32) i32
    // fun operator|(a i32, b i32) i32
    // fun operator&(a i32, b i32) i32
    // fun operator<<(a i32, b i32) i32
    // fun operator>>(a i32, b i32) i32

    pub fun Abs() i32 extern
    pub fun Clamp(min i32, max i32) i32 extern
    pub fun Max(n2 i32) i32 extern
    pub fun Min(n2 i32) i32 extern
    pub fun Sign() int extern
    pub fun Sq() i32 extern
}

/// 32 bit unsigned integer (same as uint)
pub struct ro u32
    implements IArithmetic<u32>
{
    pub const MaxValue u32 = 4294967295
    pub const MinValue u32 = 0
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun new(a u32) extern

    pub fun cast(a i8) u32 extern
    pub fun cast(a i16) u32 extern
    pub fun cast(a i32) u32 extern
    pub fun cast(a i64) u32 extern
    pub fun cast(a u64) u32 extern
    pub fun cast(a f32) u32 extern
    pub fun cast(a f64) u32 extern
    pub fun cast(a decimal) u32 extern
    
    //pub fun implicit(a u32) i64
    //pub fun implicit(a u32) u64
    //pub fun implicit(a u32) decimal
    //pub fun implicit(a u32) f32
    //pub fun implicit(a u32) f64
    
    // Comparisons
    pub static fun GetHashCode(a u32) uint extern
    pub static fun Equals(a u32, b u32) bool extern
    pub static fun Compare(a u32, b u32) int extern
    
    // Overloadable operators
    pub fun operator-(a u32) u32 extern
    pub fun operator+(a u32, b u32) u32 extern
    pub fun operator-(a u32, b u32) u32 extern
    pub fun operator*(a u32, b u32) u32 extern
    pub fun operator/(a u32, b u32) u32 extern
    pub fun operator%(a u32, b u32) u32 extern
    
    pub fun GetIterator() RangeIterator<u32>
        return RangeIterator<u32>(0, this)
    

    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a u32) u32
    // fun operator~(a u32, b u32) u32
    // fun operator|(a u32, b u32) u32
    // fun operator&(a u32, b u32) u32
    // fun operator<<(a u32, b i32) u32
    // fun operator>>(a u32, b i32) u32

    pub fun Clamp(min u32, max u32) u32 extern
    pub fun Max(n2 u32) u32 extern
    pub fun Min(n2 u32) u32 extern
    pub fun Sq() u32 extern
}

/// A 64 bit integer
pub struct ro i64
    implements IArithmetic<i64>
{
    pub const MaxValue i64 = 9223372036854775807
    pub const MinValue i64 = -9223372036854775808
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun new(a i64) extern

    pub fun cast(a u64) i64 extern
    pub fun cast(a f32) i64 extern
    pub fun cast(a f64) i64 extern
    pub fun cast(a decimal) i64 extern
    
    //pub fun implicit(a i64) decimal
    //pub fun implicit(a i64) f64

    // Comparisons
    pub static fun GetHashCode(a i64) uint extern
    pub static fun Equals(a i64, b i64) bool extern
    pub static fun Compare(a i64, b i64) int extern

    // Overloadable operators
    pub fun operator-(a i64) i64 extern
    pub fun operator+(a i64, b i64) i64 extern
    pub fun operator-(a i64, b i64) i64 extern
    pub fun operator*(a i64, b i64) i64 extern
    pub fun operator/(a i64, b i64) i64 extern
    pub fun operator%(a i64, b i64) i64 extern
    
    pub fun GetIterator() RangeIterator<i64>
        return RangeIterator<i64>(0, this)

    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a i64) i64
    // fun operator~(a i64, b i64) i64
    // fun operator|(a i64, b i64) i64
    // fun operator&(a i64, b i64) i64
    // fun operator<<(a i64, b i32) i64
    // fun operator>>(a i64, b i32) i64

    pub fun Abs() i64 extern
    pub fun Clamp(min i64, max i64) i64 extern
    pub fun Max(n2 i64) i64 extern
    pub fun Min(n2 i64) i64 extern
    pub fun Sign() int extern
    pub fun Sq() i64 extern
}

/// 64 bit unsigned integer
pub struct ro u64
    implements IArithmetic<u64>
{
    pub const MaxValue u64 = 18446744073709551615
    pub const MinValue u64 = 0
    pub const Origin u64 = 0
    pub const Identity u64 = 1

    pub fun new(a u64) extern

    pub fun cast(a i8) u64 extern
    pub fun cast(a i16) u64 extern
    pub fun cast(a i32) u64 extern
    pub fun cast(a i64) u64 extern
    pub fun cast(a f32) u64 extern
    pub fun cast(a f64) u64 extern
    pub fun cast(a decimal) u64 extern
    
    //pub fun implicit(a u64) decimal
    //pub fun implicit(a u64) f64

    // Comparisons
    pub static fun GetHashCode(a u64) uint extern
    pub static fun Equals(a u64, b u64) bool extern
    pub static fun Compare(a u64, b u64) int extern
    
    // Overloadable operators
    pub fun operator-(a u64) u64 extern
    pub fun operator+(a u64, b u64) u64 extern
    pub fun operator-(a u64, b u64) u64 extern
    pub fun operator*(a u64, b u64) u64 extern
    pub fun operator/(a u64, b u64) u64 extern
    pub fun operator%(a u64, b u64) u64 extern

    pub fun GetIterator() RangeIterator<u64>
        return RangeIterator<u64>(0, this)

    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a u64)
    // fun operator~(a u64, b u64)
    // fun operator|(a u64, b u64)
    // fun operator&(a u64, b u64)
    // fun operator<<(a u64, b i32)
    // fun operator>>(a u64, b i32)

    pub fun Clamp(min u64, max u64) u64 extern
    pub fun Max(n2 u64) u64 extern
    pub fun Min(n2 u64) u64 extern
    pub fun Sq() u64 extern
}

pub struct ro f32
    implements IArithmetic<f32>
{
    pub const MaxValue f32 = 3.40282347E+38F
    pub const MinValue f32 = -3.40282347E+38F
    pub const Epsilon f32 = 1.401298E-45F
    pub const PositiveInfinity f32 = 1F/0F
    pub const NegativeInfinity f32 = -1F/0F
    pub const NaN f32 = 0F/0F
    pub const Origin f32 = 0
    pub const Identity f32 = 1

    pub fun new(a f32) extern

    pub fun cast(a f64) f32 extern
    pub fun cast(a decimal) f32 extern
    
    //pub fun implicit(a f32) f64
    //pub fun implicit(a f32) decimal

    // Normal f32 comparisons
    pub static fun Equals(a f32, b f32) bool extern
    pub static fun Compare(a f32, b f32) int extern
    
    // Sort order (these are true): NAN>infinity, NAN==NAN, -0==+0
    pub static fun GetHashCode(a f32) uint extern
    pub static fun Equatable<f32>.Equals(a f32, b f32) bool extern
    pub static fun Comparable<f32>.Compare(a f32, b f32) int extern
    
    pub prop IsInfinity bool return todo()
    pub prop IsNaN bool return todo()
    pub prop IsNegativeInfinity bool return todo()
    pub prop IsPositiveInfinity bool return todo()

    // Overloadable operators
    pub fun operator-(a f32) f32 extern
    pub fun operator+(a f32, b f32) f32 extern
    pub fun operator-(a f32, b f32) f32 extern
    pub fun operator*(a f32, b f32) f32 extern
    pub fun operator/(a f32, b f32) f32 extern
    pub fun operator%(a f32, b f32) f32 extern
    

    const PI f32 = 3.141592653589793238
    const E f32 = 2.718281828459045235
    pub fun Abs() f32 extern
    pub fun Acos() f32 extern
    pub fun ASin() f32 extern
    pub fun ATan() f32 extern
    pub fun ATan2(x f32) f32 extern
    pub fun Ceil() f32 extern
    pub fun Clamp(min f32, max f32) f32 extern
    pub fun Cos() f32 extern
    pub fun Cosh() f32 extern
    pub fun Exp() f32 extern
    pub fun Floor(n f32) f32 extern
    pub fun Log() f32 extern
    pub fun Log2() f32 extern
    pub fun Log10() f32 extern
    pub fun Log(b f32) f32 extern
    pub fun Max(n2 f32) f32 extern
    pub fun Min(n2 f32) f32 extern
    pub fun Pow(y f32) f32 extern
    pub fun Round(d int = 0) f32 extern
    pub fun Sign() int extern
    pub fun Sin() f32 extern
    pub fun Sinh() f32 extern
    pub fun Sqrt() f32 extern
    pub fun Sq() f32 extern
    pub fun Tan() f32 extern
    pub fun Tanh() f32 extern
    pub fun Trunc() f32 extern
}

pub struct ro f64
    implements IArithmetic<f64>
{
    pub const MaxValue f64 = 1.7976931348623157E+308
    pub const MinValue f64 = -1.7976931348623157E+308
    pub const Epsilon f64 = 4.94065645841247E-324
    pub const PositiveInfinity f64 = 1.0/0.0
    pub const NegativeInfinity f64 = -1.0/0.0
    pub const NaN f64 = 0.0/0.0
    pub const Origin f64 = 0
    pub const Identity f64 = 1

    pub fun new(a f64) extern
    pub fun cast(a decimal) f64 extern
    
    pub fun implicit(a f64) decimal extern

    // Normal f64 comparisons
    pub static fun Equals(a f64, b f64) bool extern
    pub static fun Compare(a f64, b f64) int extern
    
    // Sort order (these are true): NAN>infinity, NAN==NAN, -0==+0
    pub static fun GetHashCode(a f64) uint extern
    pub static fun Equatable<f32>.Equals(a f64, b f64) bool extern
    pub static fun Comparable<f32>.Compare(a f64, b f64) int extern
    
    pub prop IsInfinity bool return todo()
    pub prop IsNaN bool return todo()
    pub prop IsNegativeInfinity bool return todo()
    pub prop IsPositiveInfinity bool return todo()
    
    // Overloadable operators
    pub fun operator-(a f64) f64 extern
    pub fun operator+(a f64, b f64) f64 extern
    pub fun operator-(a f64, b f64) f64 extern
    pub fun operator*(a f64, b f64) f64 extern
    pub fun operator/(a f64, b f64) f64 extern
    pub fun operator%(a f64, b f64) f64 extern
    
    const PI f64 = 3.141592653589793238
    const E f64 = 2.718281828459045235
    pub fun Abs() f64 extern
    pub fun Acos() f64 extern
    pub fun ASin() f64 extern
    pub fun ATan() f64 extern
    pub fun ATan2(x f64) f64 extern
    pub fun Ceil() f64 extern
    pub fun Clamp(min f64, max f64) f64 extern
    pub fun Cos() f64 extern
    pub fun Cosh() f64 extern
    pub fun Exp() f64 extern
    pub fun Floor(n f64) f64 extern
    pub fun Log() f64 extern
    pub fun Log2() f64 extern
    pub fun Log10() f64 extern
    pub fun Log(b f64) f64 extern
    pub fun Max(n2 f64) f64 extern
    pub fun Min(n2 f64) f64 extern
    pub fun Pow(y f64) f64 extern
    pub fun Round(d int = 0) f64 extern
    pub fun Sign() int extern
    pub fun Sin() f64 extern
    pub fun Sinh() f64 extern
    pub fun Sqrt() f64 extern
    pub fun Sq() f64 extern
    pub fun Tan() f64 extern
    pub fun Tanh() f64 extern
    pub fun Trunc() f64 extern
}

/// 128 bit decimal integer.  This will support NAN, infinity, and
/// exponents covering the entire range of f64 with more precision.
pub struct ro decimal
    implements IArithmetic<decimal>
{
    pub fun new(a decimal) extern

    pub const MaxValue decimal = 1E+1000M
    pub const MinValue decimal = -1E+1000M
    pub const PositiveInfinity decimal = 1.0/0.0
    pub const NegativeInfinity decimal = -1.0/0.0
    pub const NaN decimal = 0.0/0.0
    pub const Origin decimal = 0
    pub const Identity decimal = 1
    
    pub prop IsInfinity bool return todo()
    pub prop IsNaN bool return todo()
    pub prop IsNegativeInfinity bool return todo()
    pub prop IsPositiveInfinity bool return todo()

    // Normal comparisons
    pub static fun Equals(a decimal, b decimal) bool extern
    pub static fun Compare(a decimal, b decimal) int extern
    
    // Sort order (these are true): NAN>infinity, NAN==NAN, -0==+0
    pub static fun GetHashCode(a decimal) uint extern
    pub static fun Equatable<f32>.Equals(a decimal, b decimal) bool extern
    pub static fun Comparable<f32>.Compare(a decimal, b decimal) int extern
    
    // Overloadable operators
    pub fun operator-(a decimal) decimal extern
    pub fun operator+(a decimal, b decimal) decimal extern
    pub fun operator-(a decimal, b decimal) decimal extern
    pub fun operator*(a decimal, b decimal) decimal extern
    pub fun operator/(a decimal, b decimal) decimal extern
    pub fun operator%(a decimal, b decimal) decimal extern


    pub fun Abs() decimal extern
    pub fun Clamp(min decimal, max decimal) decimal extern
    pub fun Max(n2 decimal) decimal extern
    pub fun Min(n2 decimal) decimal extern
    pub fun Sign() int extern
    pub fun Sq() decimal extern
}