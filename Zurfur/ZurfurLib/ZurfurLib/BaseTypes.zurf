/// Define the simple types:
///     i8, byte, i16, u16, i32, u32, int, uint, f32, f64, decimal.
///
/// int and uint are 64 bits
/// xint and xuint are pointer sized integers (32 or 64 bits)

namespace Zurfur

pub type void { }
pub type object { }
pub type u8 = byte
pub type i64 = int
pub type u64 = uint


// TBD: Needs to be an actual type to enforce proper typing and casting rules
/// 32 bit or 64 bit integer depending on the platform
pub type xint = i32

// TBD: Needs to be an actual type to enforce proper typing and casting rules
/// 32 bit or 64 bit integer depending on the platform
pub type xuint = u32

/// bool (true or false)
pub type ro bool
    implements Equatable<bool>
{
    pub noself fun GetHashCode(a bool) uint extern
    pub noself fun Equals(a bool, b bool) bool extern

    // Not overloadable, but these are supplied specially for this type
    // fun noself operator!(a bool)
    // fun noself operator||(a bool, b bool)
    // fun noself operator&&(a bool, b bool)
}

/// i8 (-128..127)
pub type ro i8
    implements Comparable<i8>
{
    pub const MaxValue i8 = 127
    pub const MinValue i8 = -128
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun ToByteMask() byte extern
    pub fun ToI16() i16 extern
    pub fun ToI32() i32 extern
    pub fun ToInt() int extern
    pub fun ToF32() f32 extern
    pub fun ToF64() f64 extern
    pub fun ToDecimal() decimal extern
    
    pub noself fun GetHashCode(a i8) uint extern
    pub noself fun Equals(a i8, b i8) bool extern
    pub noself fun Compare(a i8, b i8) int extern
}


/// byte (0..255) same as byte
pub type ro byte
    implements Comparable<byte>
{
    pub const MaxValue byte = 255
    pub const MinValue byte = 0
    pub const Origin byte = 0
    pub const Identity byte = 1

    pub fun ToI8Mask() i8 extern
    pub fun ToI16() i16 extern
    pub fun ToU16() u16 extern
    pub fun ToI32() i32 extern
    pub fun ToU32() u32 extern
    pub fun ToInt() int extern
    pub fun ToUInt() uint extern
    pub fun ToF32() f32 extern
    pub fun ToF64() f64 extern
    pub fun ToDecimal() decimal extern

    
    pub noself fun GetHashCode(a byte) uint extern
    pub noself fun Equals(a byte, b byte) bool extern
    pub noself fun Compare(a byte, b byte) int extern
}

/// i16 (-32768..32768)
pub type ro i16
    implements Comparable<i16>
{
    pub const MaxValue i16 = 32767
    pub const MinValue i16 = -32768
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun ToI8Mask() i8 extern
    pub fun ToByteMask() byte extern
    pub fun ToU16Mask() u16 extern
    pub fun ToI32() i32 extern
    pub fun ToInt() int extern
    pub fun ToF32() f32 extern
    pub fun ToF64() f64 extern
    pub fun ToDecimal() decimal extern

    pub noself fun GetHashCode(a i16) uint extern
    pub noself fun Equals(a i16, b i16) bool extern
    pub noself fun Compare(a i16, b i16) int extern
}


/// u16 (0..65535)
pub type ro u16
    implements Comparable<u16>
{
    pub const MaxValue u16 = 65535
    pub const MinValue u16 = 0
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun ToI8Mask() i8 extern
    pub fun ToByteMask() byte extern
    pub fun ToI16Mask() i16 extern
    pub fun ToI32() i32 extern
    pub fun ToU32() u32 extern
    pub fun ToInt() int extern
    pub fun ToUInt() uint extern
    pub fun ToF32() f32 extern
    pub fun ToF64() f64 extern
    pub fun ToDecimal() decimal extern

    pub noself fun GetHashCode(a u16) uint extern
    pub noself fun Equals(a u16, b u16) bool extern
    pub noself fun Compare(a u16, b u16) int extern
}

/// A 32 bit integer (same as int)
pub type ro i32
    implements IArithmetic<i32>
{
    pub const MaxValue i32 = 2147483647
    pub const MinValue i32 = -2147483648
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun ToI8Mask() i8 extern
    pub fun ToByteMask() byte extern
    pub fun ToI16Mask() i16 extern
    pub fun ToU16Mask() u16 extern
    pub fun ToU32Mask() u32 extern
    pub fun ToInt() int extern
    pub fun ToF32() f32 extern
    pub fun ToF64() f64 extern
    pub fun ToDecimal() decimal extern

    // Comparisons
    pub noself fun GetHashCode(a i32) uint extern
    pub noself fun Equals(a i32, b i32) bool extern
    pub noself fun Compare(a i32, b i32) int extern

    // Overloadable operators
    pub fun operator-(a i32) i32 extern
    pub fun operator+(a i32, b i32) i32 extern
    pub fun operator-(a i32, b i32) i32 extern
    pub fun operator*(a i32, b i32) i32 extern
    pub fun operator/(a i32, b i32) i32 extern
    pub fun operator%(a i32, b i32) i32 extern
    
    pub fun GetIterator() RangeIterator<i32>
        return RangeIterator<i32>(0, this)
    
    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a i32) i32
    // fun operator~(a i32, b i32) i32
    // fun operator|(a i32, b i32) i32
    // fun operator&(a i32, b i32) i32
    // fun operator<<(a i32, b i32) i32
    // fun operator>>(a i32, b i32) i32

    pub fun Abs() i32 extern
    pub fun Clamp(min i32, max i32) i32 extern
    pub fun Max(n2 i32) i32 extern
    pub fun Min(n2 i32) i32 extern
    pub fun Sign() int extern
    pub fun Sq() i32 extern
}

/// 32 bit unsigned integer (same as uint)
pub type ro u32
    implements IArithmetic<u32>
{
    pub const MaxValue u32 = 4294967295
    pub const MinValue u32 = 0
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun ToI8Mask() i8 extern
    pub fun ToByteMask() byte extern
    pub fun ToI16Mask() i16 extern
    pub fun ToU16Mask() u16 extern
    pub fun ToI32Mask() i32 extern
    pub fun ToInt() int extern
    pub fun ToUInt() uint extern
    pub fun ToF32() f32 extern
    pub fun ToF64() f64 extern
    pub fun ToDecimal() decimal extern
    
    // Comparisons
    pub noself fun GetHashCode(a u32) uint extern
    pub noself fun Equals(a u32, b u32) bool extern
    pub noself fun Compare(a u32, b u32) int extern
    
    // Overloadable operators
    pub fun operator-(a u32) u32 extern
    pub fun operator+(a u32, b u32) u32 extern
    pub fun operator-(a u32, b u32) u32 extern
    pub fun operator*(a u32, b u32) u32 extern
    pub fun operator/(a u32, b u32) u32 extern
    pub fun operator%(a u32, b u32) u32 extern
    
    pub fun GetIterator() RangeIterator<u32>
        return RangeIterator<u32>(0, this)
    

    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a u32) u32
    // fun operator~(a u32, b u32) u32
    // fun operator|(a u32, b u32) u32
    // fun operator&(a u32, b u32) u32
    // fun operator<<(a u32, b i32) u32
    // fun operator>>(a u32, b i32) u32

    pub fun Clamp(min u32, max u32) u32 extern
    pub fun Max(n2 u32) u32 extern
    pub fun Min(n2 u32) u32 extern
    pub fun Sq() u32 extern
}

/// A 64 bit integer
pub type ro int
    implements IArithmetic<int>
{
    pub const MaxValue int = 9223372036854775807
    pub const MinValue int = -9223372036854775808
    pub const Origin i8 = 0
    pub const Identity i8 = 1

    pub fun ToI8Mask() i8 extern
    pub fun ToByteMask() byte extern
    pub fun ToI16Mask() i16 extern
    pub fun ToU16Mask() u16 extern
    pub fun ToI32Mask() i32 extern
    pub fun ToU32Mask() u32 extern
    pub fun ToUIntMask() uint extern
    pub fun ToF32() f32 extern
    pub fun ToF64() f64 extern
    pub fun ToDecimal() decimal extern

    // Comparisons
    pub noself fun GetHashCode(a int) uint extern
    pub noself fun Equals(a int, b int) bool extern
    pub noself fun Compare(a int, b int) int extern

    // Overloadable operators
    pub fun operator-(a int) int extern
    pub fun operator+(a int, b int) int extern
    pub fun operator-(a int, b int) int extern
    pub fun operator*(a int, b int) int extern
    pub fun operator/(a int, b int) int extern
    pub fun operator%(a int, b int) int extern
    
    pub fun GetIterator() RangeIterator<int>
        return RangeIterator<int>(0, this)

    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a int) int
    // fun operator~(a int, b int) int
    // fun operator|(a int, b int) int
    // fun operator&(a int, b int) int
    // fun operator<<(a int, b i32) int
    // fun operator>>(a int, b i32) int

    pub fun Abs() int extern
    pub fun Clamp(min int, max int) int extern
    pub fun Max(n2 int) int extern
    pub fun Min(n2 int) int extern
    pub fun Sign() int extern
    pub fun Sq() int extern
}

/// 64 bit unsigned integer
pub type ro uint
    implements IArithmetic<uint>
{
    pub const MaxValue uint = 18446744073709551615
    pub const MinValue uint = 0
    pub const Origin uint = 0
    pub const Identity uint = 1

    pub fun ToI8Mask() i8 extern
    pub fun ToByteMask() byte extern
    pub fun ToI16Mask() i16 extern
    pub fun ToU16Mask() u16 extern
    pub fun ToI32Mask() i32 extern
    pub fun ToU32Mask() u32 extern
    pub fun ToIntMask() int extern
    pub fun ToF32() f32 extern
    pub fun ToF64() f64 extern
    pub fun ToDecimal() decimal extern

    // Comparisons
    pub noself fun GetHashCode(a uint) uint extern
    pub noself fun Equals(a uint, b uint) bool extern
    pub noself fun Compare(a uint, b uint) int extern
    
    // Overloadable operators
    pub fun operator-(a uint) uint extern
    pub fun operator+(a uint, b uint) uint extern
    pub fun operator-(a uint, b uint) uint extern
    pub fun operator*(a uint, b uint) uint extern
    pub fun operator/(a uint, b uint) uint extern
    pub fun operator%(a uint, b uint) uint extern

    pub fun GetIterator() RangeIterator<uint>
        return RangeIterator<uint>(0, this)

    // Not overloadable, but these are supplied specially for this type
    // fun operator~(a uint)
    // fun operator~(a uint, b uint)
    // fun operator|(a uint, b uint)
    // fun operator&(a uint, b uint)
    // fun operator<<(a uint, b i32)
    // fun operator>>(a uint, b i32)

    pub fun Clamp(min uint, max uint) uint extern
    pub fun Max(n2 uint) uint extern
    pub fun Min(n2 uint) uint extern
    pub fun Sq() uint extern
}

pub type ro f32
    implements IArithmetic<f32>
{
    pub const MaxValue f32 = 3.40282347E+38F
    pub const MinValue f32 = -3.40282347E+38F
    pub const Epsilon f32 = 1.401298E-45F
    pub const PositiveInfinity f32 = 1F/0F
    pub const NegativeInfinity f32 = -1F/0F
    pub const NaN f32 = 0F/0F
    pub const Origin f32 = 0
    pub const Identity f32 = 1

    pub fun ToI8Mask() i8 extern
    pub fun ToByteMask() byte extern
    pub fun ToI16Mask() i16 extern
    pub fun ToU16Mask() u16 extern
    pub fun ToI32Mask() i32 extern
    pub fun ToU32Mask() u32 extern
    pub fun ToIntMask() int extern
    pub fun ToUIntMask() uint extern
    pub fun ToF64() f64 extern
    pub fun ToDecimal() decimal extern

    // Normal f32 comparisons
    pub noself fun Equals(a f32, b f32) bool extern
    pub noself fun Compare(a f32, b f32) int extern
    
    // Sort order (these are true): NAN>infinity, NAN==NAN, -0==+0
    pub noself fun GetHashCode(a f32) uint extern
    pub noself fun Equatable<f32>::Equals(a f32, b f32) bool extern
    pub noself fun Comparable<f32>::Compare(a f32, b f32) int extern
    
    pub get IsInfinity bool
        return todo()
    pub get IsNaN bool
        return todo()
    pub get IsNegativeInfinity bool
        return todo()
    pub get IsPositiveInfinity bool
        return todo()

    // Overloadable operators
    pub fun operator-(a f32) f32 extern
    pub fun operator+(a f32, b f32) f32 extern
    pub fun operator-(a f32, b f32) f32 extern
    pub fun operator*(a f32, b f32) f32 extern
    pub fun operator/(a f32, b f32) f32 extern
    pub fun operator%(a f32, b f32) f32 extern
    

    const PI f32 = 3.141592653589793238
    const E f32 = 2.718281828459045235
    pub fun Abs() f32 extern
    pub fun Acos() f32 extern
    pub fun ASin() f32 extern
    pub fun ATan() f32 extern
    pub fun ATan2(x f32) f32 extern
    pub fun Ceil() f32 extern
    pub fun Clamp(min f32, max f32) f32 extern
    pub fun Cos() f32 extern
    pub fun Cosh() f32 extern
    pub fun Exp() f32 extern
    pub fun Floor(n f32) f32 extern
    pub fun Log() f32 extern
    pub fun Log2() f32 extern
    pub fun Log10() f32 extern
    pub fun Log(b f32) f32 extern
    pub fun Max(n2 f32) f32 extern
    pub fun Min(n2 f32) f32 extern
    pub fun Pow(y f32) f32 extern
    pub fun Round(d int = 0) f32 extern
    pub fun Sign() int extern
    pub fun Sin() f32 extern
    pub fun Sinh() f32 extern
    pub fun Sqrt() f32 extern
    pub fun Sq() f32 extern
    pub fun Tan() f32 extern
    pub fun Tanh() f32 extern
    pub fun Trunc() f32 extern
}

pub type ro f64
    implements IArithmetic<f64>
{
    pub const MaxValue f64 = 1.7976931348623157E+308
    pub const MinValue f64 = -1.7976931348623157E+308
    pub const Epsilon f64 = 4.94065645841247E-324
    pub const PositiveInfinity f64 = 1.0/0.0
    pub const NegativeInfinity f64 = -1.0/0.0
    pub const NaN f64 = 0.0/0.0
    pub const Origin f64 = 0
    pub const Identity f64 = 1

    pub fun ToI8Mask() i8 extern
    pub fun ToByteMask() byte extern
    pub fun ToI16Mask() i16 extern
    pub fun ToU16Mask() u16 extern
    pub fun ToI32Mask() i32 extern
    pub fun ToU32Mask() u32 extern
    pub fun ToIntMask() int extern
    pub fun ToUIntMask() uint extern
    pub fun ToF32() f32 extern
    pub fun ToDecimal() decimal extern

    // Normal f64 comparisons
    pub noself fun Equals(a f64, b f64) bool extern
    pub noself fun Compare(a f64, b f64) int extern
    
    // Sort order (these are true): NAN>infinity, NAN==NAN, -0==+0
    pub noself fun GetHashCode(a f64) uint extern
    pub noself fun Equatable<f32>::Equals(a f64, b f64) bool extern
    pub noself fun Comparable<f32>::Compare(a f64, b f64) int extern
    
    pub get IsInfinity bool
        return todo()
    pub get IsNaN bool
        return todo()
    pub get IsNegativeInfinity bool
        return todo()
    pub get IsPositiveInfinity bool
        return todo()
    
    // Overloadable operators
    pub fun operator-(a f64) f64 extern
    pub fun operator+(a f64, b f64) f64 extern
    pub fun operator-(a f64, b f64) f64 extern
    pub fun operator*(a f64, b f64) f64 extern
    pub fun operator/(a f64, b f64) f64 extern
    pub fun operator%(a f64, b f64) f64 extern
    
    const PI f64 = 3.141592653589793238
    const E f64 = 2.718281828459045235
    pub fun Abs() f64 extern
    pub fun Acos() f64 extern
    pub fun ASin() f64 extern
    pub fun ATan() f64 extern
    pub fun ATan2(x f64) f64 extern
    pub fun Ceil() f64 extern
    pub fun Clamp(min f64, max f64) f64 extern
    pub fun Cos() f64 extern
    pub fun Cosh() f64 extern
    pub fun Exp() f64 extern
    pub fun Floor(n f64) f64 extern
    pub fun Log() f64 extern
    pub fun Log2() f64 extern
    pub fun Log10() f64 extern
    pub fun Log(b f64) f64 extern
    pub fun Max(n2 f64) f64 extern
    pub fun Min(n2 f64) f64 extern
    pub fun Pow(y f64) f64 extern
    pub fun Round(d int = 0) f64 extern
    pub fun Sign() int extern
    pub fun Sin() f64 extern
    pub fun Sinh() f64 extern
    pub fun Sqrt() f64 extern
    pub fun Sq() f64 extern
    pub fun Tan() f64 extern
    pub fun Tanh() f64 extern
    pub fun Trunc() f64 extern
}

/// 128 bit decimal integer.  This will support NAN, infinity, and
/// exponents covering the entire range of f64 with more precision.
pub type ro decimal
    implements IArithmetic<decimal>
{
    pub fun new(a decimal) void extern

    pub const MaxValue decimal = 1E+1000M
    pub const MinValue decimal = -1E+1000M
    pub const PositiveInfinity decimal = 1.0/0.0
    pub const NegativeInfinity decimal = -1.0/0.0
    pub const NaN decimal = 0.0/0.0
    pub const Origin decimal = 0
    pub const Identity decimal = 1
    
    pub get IsInfinity bool
        return todo()
    pub get IsNaN bool
        return todo()
    pub get IsNegativeInfinity bool
        return todo()
    pub get IsPositiveInfinity bool
        return todo()

    pub fun ToI8Mask() i8 extern
    pub fun ToByteMask() byte extern
    pub fun ToI16Mask() i16 extern
    pub fun ToU16Mask() u16 extern
    pub fun ToI32Mask() i32 extern
    pub fun ToU32Mask() u32 extern
    pub fun ToIntMask() int extern
    pub fun ToUIntMask() uint extern
    pub fun ToF32() f32 extern
    pub fun ToF64() f64 extern

    // Normal comparisons
    pub noself fun Equals(a decimal, b decimal) bool extern
    pub noself fun Compare(a decimal, b decimal) int extern
    
    // Sort order (these are true): NAN>infinity, NAN==NAN, -0==+0
    pub noself fun GetHashCode(a decimal) uint extern
    pub noself fun Equatable<f32>::Equals(a decimal, b decimal) bool extern
    pub noself fun Comparable<f32>::Compare(a decimal, b decimal) int extern
    
    // Overloadable operators
    pub fun operator-(a decimal) decimal extern
    pub fun operator+(a decimal, b decimal) decimal extern
    pub fun operator-(a decimal, b decimal) decimal extern
    pub fun operator*(a decimal, b decimal) decimal extern
    pub fun operator/(a decimal, b decimal) decimal extern
    pub fun operator%(a decimal, b decimal) decimal extern


    pub fun Abs() decimal extern
    pub fun Clamp(min decimal, max decimal) decimal extern
    pub fun Max(n2 decimal) decimal extern
    pub fun Min(n2 decimal) decimal extern
    pub fun Sign() int extern
    pub fun Sq() decimal extern
}