use Zurfur

namespace TestZilHeader

// Comment out the next line to see compiler errors
pragma NoParse

// Disable the verifier so we can see only compiler errors
pragma NoVerify

type DupType
{
    @a int
    fun b() void {}
}

// Should mark error on type name, no errors on fields
type DupType
{
    @a int
    fun b() void {}
}

type TestFails
{
    @field0 int // ok
    pub fun fun0() void {} // OK
    
    @field0 int     // Duplicate name
    @field1 hello  //  Undefined
    @field2 Zurfur // Symbol is a namespace
    @field3 field0  // Symbol is a field
    @field4 fun0      // Symbol is a method

    pub fun fun0() void { } // Duplicate name
    pub fun fun1(a List<List<x>>) void { } // Undefined generic symbol
    pub fun fun2(a List) void { } // Wrong number of generic parameters
    pub fun fun3(a List<int,int>) void { } // Wrong number of generic parameters
    pub fun fun4(a List<List>) void { } // Wrong number of generic parameters
    pub fun fun5(a List<List<int,int>>) void { } // Wrong number of generic parameters
    pub fun fun6(a Zurfur) void {} // Symbol is a namespace
    pub fun fun7(a field0) void {} // Symbol is a field
    pub fun fun8(a fun0) void {} // Symbol is a method

    pub fun F1(a List) void { }
    pub fun F3(a List<int,int>) void { }
    pub fun F3a(a List<List>) void { }
    pub fun F4(a List<int,hello>) void { }
    pub fun F5(a List<List<x>>) void { }
    
    

}