

mod TestCompiler

use Zurfur

// Comment out the next line to see compiler errors
pragma NoParse

// Disable the verifier so we can see only compiler errors
pragma NoVerify

type OneGeneric<T> { } // No error expected here

type DupType
    a Int

fun DupType.b() Void {}

// Should mark error on type name, no errors on fields
type DupType
    a Int

fun DupType.b() Void {}

type TestFails
    field0 Int      // Duplicate name
    field0 Int      // Duplicate name
    field1 hello    //  Undefined
    field2 Zurfur   // Symbol is a module
    field3 field0   // Symbol is a field

fun fun0() Void {}

fun TestFails.fun0() Void {} // OK

fun fun0() Void { } // Duplicate name
fun fun1(a List<List<x>>) Void { } // Undefined generic symbol
fun fun2(a List) Void { } // Wrong number of generic parameters
fun fun3(a List<Int,Int>) Void { } // Wrong number of generic parameters
fun fun4(a List<List>) Void { } // Wrong number of generic parameters
fun fun5(a List<List<Int,Int>>) Void { } // Wrong number of generic parameters
fun fun6(a Zurfur) Void {} // Symbol is a module
fun fun7(a field0) Void {} // Symbol is a field
fun fun8(a fun0) Void {} // Symbol is a method
fun fun9(a *?OneGeneric) Void { } // Expecting 1 generic parameter, got 0

fun F1(a List) Void { }
fun F3(a List<Int,Int>) Void { }
fun F3a(a List<List>) Void { }
fun F4(a List<Int,hello>) Void { }
fun F5(a List<List<x>>) Void { }


