// Define the more complex base types: str, Array, List, Map, various spans

namespace Zurfur


/// Read only span
pub ref ro struct RoSpan<T>
{
    ro data ref T
    pub ro Count int
    pub this[index int] ro ref T => todo()
    pub this[index Range] RoSpan<T> => todo()
}

/// Span of contiguous elements in memory or an array
pub ref ro struct Span<T>
{
    ro data ref T
    pub ro Count int
    pub this[index int] ref T => todo()
    pub this[index Range] Span<T> => todo()
    operator implicit(from Span<T>) RoSpan<T> => todo()
}

/// Read only array span
pub ro struct RoASpan<T>
{
    ro data Array<T>
    pub ro Count int
    pub this[index int] T => todo()
    pub this[index Range] RoASpan<T> => todo()
    operator implicit(from RoASpan<T>) RoSpan<T> => todo()
}

/// Array span
pub ro struct ASpan<T>
{
    ro data Array<T>
    pub ro Count int
    pub this[index int] ref T => todo()
    pub this[index Range] ASpan<T> => todo()
    operator implicit(from ASpan<T>) RoASpan<T> => todo()
    operator implicit(from ASpan<T>) RoSpan<T> => todo()
    operator implicit(from ASpan<T>) Span<T> => todo()
}

/// String is a wrapper for a read only array of bytes
pub sealed ro class str
    : ArrayBase<byte>, IComparable<str>, IRoArray<byte>
{
    default string = "";
    
    pub new() { todo() }
    pub new(s str) { todo() }
    pub new(s RoSpan<byte>) { todo() }
    pub this[index int] byte => todo()
    pub this[range Range] RoSpan<byte> => todo() // Slice
    
    pub static func GetHashCode(a str) uint => todo()
    pub static func Equals(a str, b str) bool => todo()
    pub static func Compare(a str, b str) int => todo()
        
    pub operator+(s1 str, s2 str) str { todo() }   
    pub operator+(s1 RoSpan<byte>, s2 str) str { todo() }
    pub operator+(s1 str, s2 RoSpan<byte>) str { todo() }
    // TBD: Implicit conversion to and from RoSpan
}

// Array of constant size
pub sealed class Array<T> 
    : ArrayBase<T>, IArray<T>
{
    const MaxSize int = int.MaxInt/2
    pub static ro Empty Array<T>()

    pub new(count int) => todo()
    pub new(items ICollection<T>) => todo()
    
    pub this[index int] ref T => todo()
    pub this[range Range] ASpan<T> => todo()
}

// Note that the List class has a ref return indexer, just like Array
pub class List<T> 
    : IList<T>
{
    pub new() => todo()
    pub new(capacity int) => todo()
    pub new(items ICollection<T>) => todo()
    
    pub this[index int] T { get => todo() set => todo() }
    pub this[index Range] IArray<T> => todo()

    pub prop Count int => todo()
    pub func Add(item T) => todo()
    pub func Clear() => todo()
    pub func Insert(index int, item T) => todo()
    pub func Insert(index int, items ICollection<T>) => todo()
    pub func Remove(index int) => todo()
    pub func Remove(range Range) => todo()
    
}

pub class Map<TKey, TValue> 
    : IMap<TKey, TValue>
{
    compareFunc func(a TKey, b TKey) bool;
    hashFunc func(a TKey) bool;
    

    pub new() where TKey : IEquatable<TKey>
    {
        compareFunc = (a, b) -> TKey.Compare(a, b);
        hashFunc = (a) -> TKey.GetHashCode(a);		
    }
    pub new(compare func(a TKey, b TKey) bool, 
        getHashCode func(a TKey) uint)
    {
        compareFunc = compare;
        hashFunc = getHashCode;
    }
    pub new(capacity int) where TKey : IEquatable
        => todo()
    pub new(keyValues ICollection<KeyValuePair<TKey, TValue>>) => todo()
    
    pub this[key TKey] TValue { get => todo() set => todo() }
    pub operator in(a TKey) bool => todo()

    pub prop Count int => todo()
    pub func Clear() => todo()
    pub func Contains(key TKey) bool => todo()
    pub func Get(key TKey, defaultValue TValue) TValue => todo()
    pub func TryGet(key TKey, value out TValue) bool => todo()
    pub func Add(item KeyValue<TKey, TValue>) => todo()    
    pub func Add(items ICollection<KeyValue<TKey, TValue>>) => todo()    
    pub func Remove(TKey key) bool => todo()
    pub prop Keys ICollection<TKey> { get => todo() }
    pub prop Values ICollection<TValue> { get => todo() }
}

// TBD: Ensure this accepts Json({initializer}) syntax
pub class Json
{
    pub new(from int) => todo()
    pub new(from float32) => todo()
    pub new(from float64) => todo()
    pub new(from decimal) => todo()
    pub new(from str) => todo()
    pub new(from ICollection<Json>) => todo()
    pub new(from IRoMap<Json>) => todo()
   
    // TBD: Figure out how to make this efficient
    pub virtual prop Int int => todo()
    pub virtual prop Float32 float32 => todo()
    pub virtual prop Float64 float64 => todo()
    pub virtual prop Decimal decimal => todo()
    pub virtual prop Str str => todo()
    pub virtual prop Map Map<Json> => todo()
    pub virtual prop Array Array<Json> => todo()
}



