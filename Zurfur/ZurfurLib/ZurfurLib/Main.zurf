using a.b.c;
using system.gosub.p;

namespace zurfur.example;


// Test class
class Example 
{ 
    // Field types, initialized to zero, null, or "" for string
    f1 int;
    f2 float32;
    f3 string;		// Defaults to "", not NULL
    f4 array<int>;
    f5 []int;       // Same as array<int>
    f6 [][]int;     // Same as array<array<int>>
    f7 pointer<int>;
    f8 *int;        // Same as pointer<int>
    f9 **int;		// Same as pointer<pointer<int>>
    f10 map<string,list<int>>;	
    
    // Fields initialized to an expression (never null)
    // Must be an expression starting with a constructor or cast
    e1 int = int();
    e2 int = FuncThatReturnsInt >> 4;
    e3 float32 = FuncThatReturnsFloat32orInt();
    e4 string = "Hello";
    e5 array<int> = new(32);        // array, Length=32
    e7 list<int> = new(32);         // list, Length=0, Capacity=32
    e8 map<string,string> = new(); 	// Empty map
    e10 *int = GetIntPtr();			// Same as pointer<int> = `GetIntPtr()`
        
    // Illegal at parse time
    //i7 int(1); 		//  Must not be initialized
    //i8 = array<int>;	// Type name is not an expression
    //i9 = array<byte>[0]; // Type can't be dereferenced
    //i10 = int(list<in string>()); // Type argument can't have in/ref/out
    //func i11(a map<in string,string>) { } // Type argument can't have in/ref/out	

    func func1(a int) {}
    func func2(a ref float32) {}
    func func3(a ref string) {}
    func func4(a array) {}
    func func5(a [][]int) {} 
    func func5(a array<array<int>>) {}
    func func6(a ref **int) {}
    func func7(a list<int>) { }
    func func8(a ref list<list<int>>) { }
    func func10(a map<string,list<int>>) { }

    static func main(args array<string>)
    {
    }
}

/// Implement IHashable on any object that can be stored in a Map.
/// This is different than implementing just Equals
/// in that NAN must compare to itself as true.
interface IHashable<in T>
{
    static func GetHashCode(a T) uint;
    static func Equals(a T, b T) bool;
}

/// Implement ISortable on any object that can be sorted.
/// This is different than implementing just Compare
/// in that NAN must have a valid sort order.
interface ISortable<in T>
{
    static func Compare(a T, b T) int;
}

public struct ro string
{
    ro str array<byte>;

    func new() { str = array<byte>.Empty }
    func new(s string) { todo() }
    func new(s Span<byte>) { todo() }
    func Slice(start int, length int) RoSpan<byte> { todo() }
    func Slice(start int) RoSpan<byte> { todo() }
    
    static extern func operator+(s1 string, s2 string);    
    static extern func operator+(s1 RoSpan<byte>, s2 string);    
    static extern func operator+(s1 string, s2 RoSpan<byte>);
    // TBD: Implicit conversion to and from RoSpan
}

struct ref ro Span<T>
{
    ro data ref T;
    ro Length int;
    func get[index int] ref T { todo(); }
    func Slice(start int, length int) Span<T> { todo(); }
    // TBD: implicit conversion to RoSpan
}

struct ref roRoSpan<T>
{
    ro data ref T;
    ro Length int;
    func get[index int] ro ref T { todo(); }
    func Slice(start int, length int) RoSpan<T> { todo(); }
}

struct ref ro Memory<T>
{
    ro data object;
    ro offset xint;
    ro Length int;
    func get[index int] ref T { todo(); }
    func Slice(start int, length int) Memory<T> { todo(); }
    // TBD: implicit conversion to RoSpan
}

struct ref ro RoMemory<T>
{
    ro data object;
    ro offset xint;
    ro Length int;
    func get[index int] ro ref T { todo(); }
    func Slice(start int, length int) RoMemory<T> { todo(); }
}

// All variable sized objects must inherit from this class, must be sealed, and
// must call AllocateObject first thing in the constructor.  For efficiency,
// this class is unsafe and doesn't do any bounds checking.
// The inheriting class must be sealed (that's what sealed1 means)
unsafe sealed1 class VariableSizedObject<T>
{
    ro Length int;

    // Must be called first thing from the constuctor, never called again
    protected unsafe static func AllocateObject(int length) { todo() }

    // Return a pointer to the array
    // { return (T*)((*void)this + sizeof(this))}
    protected unsafe func get DataPointer() *T {todo()}
}


// Array of constant size
public sealed class array<T> : VariableSizedObject<T>
{
    const MaxSize int = int.MaxInt/2;
    static ro Empty array<T> = new();

    func new(length int) { todo }
    func get[index int] ref T { todo }
    func Slice(start int, length int) Span<T> { todo }
    func RoSlice(start int, length int) RoSpan<T> { todo }
}

// Note that the list class has a ref return indexer, just like Array
public class list<T>
{
    func new(capacity int) { todo() }
    func get[index int] ref T { todo() }
}

public class map<TKey, TValue>
{
    func new(capacity int) { todo() }
}

// The matrix class is used to implement square 2d arrays
sealed class Matrix2d<t> : VariableSizedObject<T>
{
    func new(len1 int, len2 int) { todo() }	
    func get[i1 int, i2 int] ref T { todo() }
}

interface IGeneric<Q>
{
    func A<T>(Q m) int;
}

class MyGeneric<QQ> : IGeneric<QQ>
{
    func IGeneric<QQ>::A<T>(QQ a) int { }
}


/// Compiler implemented interface created for all structs that are blittable.
/// A blittable struct does not contain references, but may contain pointers.
interface IBlittableStruct { }

// Represents a buffer in un-managed memory.  This class can create and 
// own the memory, or it can be attached to an already existing buffer.
// The GC knows this class and deletes the memory when necessary.
sealed class UnmanagedMemory<T> : UnmanagedHande where T : IBlittableStruct
{
    ro Memory *void;
    ro Capacity int;
    ro OwnedByGc bool;
    length int;
    
    func get Length() { todo() }
    func set Length() { todo() }
    
    // Create the buffer, the GC owns it and deletes it when there are no more
    // references to this object.  Be careful that unmanaged code doesn't
    // hold a reference to the memory beyond the lifetime of this object
    func new(length int) { todo }
    func new(length int, capacity int) { todo }

    // Attach this object to a buffer allocated by unmanaged code.  
    // Lenght and Capacity are set automatically. Be sure that
    // unmanaged code doesn't delete the object while still in use.  
    unsafe func new(data *void, sizeOfBufferInBytes int) { todo() }

    func CopyTo() { todo() }
}


// This is the base for all objects, struct and class alike.
public class object
{
    virtual func GetType() { todo }
    virtual func ToString() { todo }
}

// This is the base for all struct objects.
class StructObject
{
}

// This is the base for all class objects.  Its only field is
// the vtable pointer, so there is minimal overhead.  All class
// objects are allocated on the managed heap and are subject
// to garbage collection.
class ClassObject
{
    // The only member
    protected unsafe ro VT *void;

    override func GetType() { todo }
}


// Base class for all things that need to notify when they are garbage collected
class FinalizedNotify 
{
    protected func SetFinalizeNotifier(notifierQueue FinalizedNotifyQueue, token IntPtr, memoryPressure int) { todo() }
    protected func ClearFinalizeNotifier() { todo() }
}
class FinalizedNotifyQueue 
{
    func get Count() int { todo() }
    func Dequeue() IntPtr { todo() }
    async func WaitQueueNotEmpty() { todo() }
}

static func memcpy(to *void, from *void, length xint)
{
    if length <= 0
    {
        return;
    }

    // Align `to` on int32
    while to & 3 != 0 && length != 0
    {
        *(*byte)to = *(*byte)from; to+=1; from+=1; length-=1;
    }
    
    if (to|from) & 3 == 0
    {
        memcpya32(to, from, length);
        return;
    }
    
    // Byte copy
    #end = to + length;
    while end-to >= 4
    {
        *(*byte)to = *(*byte)from; to+=1; from+=1;
        *(*byte)to = *(*byte)from; to+=1; from+=1;
        *(*byte)to = *(*byte)from; to+=1; from+=1;
        *(*byte)to = *(*byte)from; to+=1; from+=1;
    } 
    while to != end
    {
        *(*byte)to = *(*byte)from; to+=1; from+=1;
    }
}

static func memcpya32(to *void, from *void, length xint)
{
    if length <= 0
    {
        return
    }
    if (to|from) & 3 != 0
    {
        throw MisalignedMemoryAccessException();
    }

    // Try 64 bit copy first
    #end = to + length;
    if (to^from) & 7 == 0 && length >= 8
    {
        if to & 7 != 0
        {
            *(*int32)to = *(*int32)from; to+=4; from+=4;
        }
        while end - to >= 32
        {
            *(*int64)to = *(*int64)from; to+=8; from+=8;
            *(*int64)to = *(*int64)from; to+=8; from+=8;
            *(*int64)to = *(*int64)from; to+=8; from+=8;
            *(*int64)to = *(*int64)from; to+=8; from+=8;
        }
        while end - to >= 8
        {
            *(*int64)to = *(*int64)from; to+=8; from+=8;
        }
    }
    while end-to >= 16
    {
        *(*int32)to = *(*int32)from; to+=4; from+=4;
        *(*int32)to = *(*int32)from; to+=4; from+=4;
        *(*int32)to = *(*int32)from; to+=4; from+=4;
        *(*int32)to = *(*int32)from; to+=4; from+=4;
    }
    while end-to >= 4
    {
        *(*int32)to = *(*int32)from; to+=4; from+=4;
    }
    while to != end
    {
        *(*byte)to = *(*byte)from; to+=1; from+=1;
    }
}

 