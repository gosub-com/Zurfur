
// This file is to test the parse, make sure error
// messages look good and no crashes, etc.
// Comment out "pragma NoParse"
pragma NoParse
//pragma ShowSemi


use Zurfur

namespace TestSyntax


static fun A() { } // Expecting a type name
static fun A() nil{ } // Duplicate
static fun B() int { } // Duplicate
static fun B() f32 { } // Duplicate
static fun C(a int, a int) nil { } // Duplicate parameter
static fun D<X,X>(a X) nil { } // Duplicate type parameter
static fun E<X>(a Y) nil{ } // Unresolved type

type A { pub fun A() nil { } } // Same name as parent
type C<T> { type D<T> { } } // Same type arg name as parent
type B<T> { pub fun A<T>() nil { } } // Same type arg name as parent


pub type ro test
{
    pub const MaxValue i8 = 127
    pub const MinValue i8 = -128
    pub const Origin i8 = 0
    pub const Identity i8 = 1


    // Try to give good info at the end of each line
    fun new(a i8) nil // Compound statement error
    pub fun
    fun A
    fun B(
    fun C(a
    fun E(a int
    fun F(a int,
    fun G(a int, b
    pub fun H(a int, b int) nil  // Compound error on this line (not next)
    pub fun I(a int, b int) nil

    fun J(a int, x int) nil
    NoCompoundHere()

    // Error in 'fun' declaration still parses function after '{'
    fun K(a int, x)  nil
    {
        if a > 3   // Error: Next line doesn't look like a compound
        a += 1

        if a > 3
            a+=1
             b+=1  // Error: Compound statement alignment

        if a >
        a+= 1       // No error here because it's marked on the previous line

        if a > 3 return 4 // Error: Compound must be on next line
        
    }


    // TBD: The curly brace should be accepted as part of the `fun` declaration
    fun K(a int, x) hello world nil
    {
    }
    
}