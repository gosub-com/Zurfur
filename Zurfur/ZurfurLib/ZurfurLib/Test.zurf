///
/// This is where we will keep working unit tests.
/// Nothing works yet.
///

namespace Zurfur.UnitTests

fun test_HelloWorld()
{
    Console.Log("Hello World.  Let's count from 1 to 10.")
    for @a in 1..11
    {
        Console.Log("Count={a}")
    }

    @a = "Regular string literal"       // No interpolation
    @b = "Column 1{\t}Column 2{\rn}"    // Containing a tab, ending with \r\n
    @c = tr"Translated string"          // Translated at runtime
    @d = "Hello world, a+b={a+b}{\rn}"  // Interpolated with \r\n at the end
    @e = tr"Hello world, X={X}!{\rn}"   // Translated, interpolated, \r\n at end
    @f = "Jack says ""Hello World!"""   // Containing quote character
    @g = "{{""X"":1,""Y"":2}}"          // {"X":1,"Y":2}
}

pub type Example
{
    @info str                  // Private string initialized to ""
    @array Array<int> = [1,2,3]             // Private mutable array
    @list List<str> = ["Hello", "World"]    // Private mutable list
    @m ro Map<str,int> = ["A":1, "B":2]     // Private immutable map
    @Header ro str pub get = "Zurfur"       // Public immutable string
    pub fun F(a int) int:
        return m["A"]+10   // Public function
    pub get P() str:
        return Header + info     // Public property
}

fun test_ForSimple()
{

    @count int
    for @a in 0..10
    {
        if a == 2
        {
            count += 100
        }
        elif a == 3 || a == 4
        {
            count += 1000
        }
        elif a == 5
        {
            count += 10000
            count += 10000
        }
        else
        {
            count += 100000
        }
        count += a
    }
    Console.Log("For loop: "(count == 622145 ? "Pass" : "Fail"))
}


pub fun test_Convert():
    @a = List<float>()
    @b = List<int>()
    @c = a.Convert(@ => int(i))


pub type class TestGuiForm extends Form
{
    type Label { }
    @Message1 Label pub get set
    @Message2 Label pub get set
    @Message3 Label pub get set


    fun new()
    {
        InitializeComponent()
    }
   
   
    #NewCallableAttribute()
    fun InitializeComponent()
    {
    
        Message1 = Label(Text: "Message 1",
                        Location: Point(X:4, Y:4),
                        Size: Size(Width:100,Height:24))
        Message2 = Label(Text: "Message 2",
                        Location: Point(100, 4),
                        Size: Size(100,24))
        Message3 = Label(Text: "Message 3",
                        Location.X: 200,
                        Size: Size(100,24))
                       
        @x Json = ["Hello":"a",
                      "World":"b",
                      "List":[1,2,3]]
    }
    
    pub static fun Create(message1 str, message2 str) TestGuiForm
    {
        return TestGuiForm(Message1.Text: message1,
                           Message2.Text: message2)
    }
}