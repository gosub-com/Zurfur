using a.b.c
using system.gosub.p

namespace Zurfur.Example

pub func Example::Extension() { }

// Test class
pub class Example 
{ 
    // Todo List:
    //    .. operator doesn't need parameters at beginning or end
    //    Support for :: operator (start::count)
    //    Editor should always use spaces (or tabs, just pick one and be done)
    //    Editor should comment out blocks with CTRL-'/'
    //    Implement switch (doesn't use break)
    //    Switch statement

    // Fields initialized to zero, null, or "" for string
    f1 int			// Initialized to 0
    f2 float32		// Initialized to 0.0
    f3 string		// Initialized to "", not NULL
    
    // Fields initialized to null
    f4 Array<int>
    f5 Array<Array<int>> 
    f6 []int       // Same as Array<int>
    f7 Map<string,List<int>>
    f8 Pointer<int>
    f9 ^int        // Same as Pointer<int>
    
    // Fields initialized via constructor
    f10 int(FuncReturnsInt())
    f11 Array<int>()          // Array, Count=0
    f12 Array<int>(32)        // Array, Count=32
    f13 Array<int>({1,2,3})   // Array initialized with 1, 2, 3
    f13 List<int>(32)         // Empty List, Capacity=32
    f14 Map<string,string>()  // Empty map
    
    // Fields initialized via assignment
    f15 int = 32
    f16 int = FuncReturnsInt() >> 4
    f17 float32 = FuncReturnsFloat32orInt()
    f18 string = "Hello"
    f19 ^int = GetIntPtr()			// Same as Pointer<int> = `GetIntPtr()`
    
    // Properties
    pub prop P1 int => 1
    pub prop P2 float =>  f1 + f2
    pub prop P3 int { get { return 3 } }
    pub prop P4 int = 3 { get set } // Initialized to 3
    pub prop P5 int(3) // Initializes p1 to 3
    {
        get { return p1 }
        set { p1 = value }
    }
    
    pub this[index i] int => i
    
    // Function
    func fun1(a int) float => f1 + f2 + a
    func func1(a int) { }
    func func2(a ref float32) {}
    func func3(a ref string) {}
    func func4(a Array) {}
    func func5(a [][]int) {} 
    func func5(a Array<Array<int>>) {}
    func func6(a ref ^^int) {}
    func func7(a List<int>) { }
    func func8(a ref List<List<int>>) { }
    func func10(a Map<string,List<int>>) { }
    
    pub func Sort<T>(greaterThan func(a T, b T) bool) { }
    pub MyFieldFunc func(sender object, message string)


    pub func M<A,B>(a A, b B, c List<int>) List<int> {}
    
    func func8(a ref List<List<int>>) { }
    func func8(a ref List<int,x,y,z>) { }
    pub func Main(args Array<string>)
    {
        // Function calls vs parameter lists
        @a1 = MyType<a,b,c>()
        @a2 = MyType(a,b,c)()
        @a3 = List<List<int>>()
        @a4 = List(List(int))()
        @a5 = M<string,int.x<T>.y>.Hello2<x.x>()
        @a6 = M(string,int.x(T).y).Hello2(x.x)()     
        @a7 = f(f<a>())(a+b)

        // Casts
        @c1 = (M<string,int.x<T>.y>.Hello2)A
        @c2 = (M<string,int.x<T>.y>.Hello2<x.x>)A
        @c3 = (List<int,y,z>)x

        // Static assigments
        M<string>.Hello = 6
        M<string,int.x<T>.y>.Hello2 = f(1, 2, "Jeremy")
        M<string,int>.Hello2 = f(1, 2, (x, y) => x < y)

        // Cast errors
        //@ce1 = (M(string,int.x(T).y).Hello2(x.x))A
        //@ce2 = (List(int,y,z))x
        //@ce3 = (List<int,y.y+2,z>)x
        
        @a = x>y
        if MyFieldFunc != null
            { MyFieldFunc(this, "hello") }

        @l1 = (a) => { return 23 }
        @l2 = (a) => 23
        list.Sort((a, b) => a < b)
        list.Sort((a, b) => { return a < b })

        // Switch expression
        @num = switch myConstant { 23 => a, 27 => b, default => 0}

        // Switch statement
		switch a
		{
		case 1:
            DoIt(1) // No break necessary, always breaks unless there are no statements                
		case 2: // Empty case does fall through
        case 3:
            DoIt2()
        default: doit3();
		}
		
		// For statement
     	for a in 1..23
    	{
    	}
        
    }
}

pub static func Sort<T>(s Span<T>, lessThan func(a T, b T) bool)
{
    // Simple selection sort
    for @i in s.Length-1
    {
        @lowElem = s[i]
        @lowIndex = i
        for @j in i+1..s.Length
        {
            if lessThan(s[j], lowElem)
            {
                lowElem = s[j]
                lowIndex = j
            }
        }
        if lowIndex != i
        {
            s[lowIndex] = s[i]
            s[i] = lowElem
        }
    }
}


pub struct ro string
{
    ro str Array<byte>

    new() { str = Array<byte>.Empty }
    new(s string) { todo() }
    new(s Span<byte>) { todo() }
    pub func Slice(start int, length int) RoSpan<byte> { todo() }
    pub func Slice(start int) RoSpan<byte> { todo() }
    
    pub operator+(s1 string, s2 string) string { todo() }   
    pub operator+(s1 RoSpan<byte>, s2 string) string { todo() }
    pub operator+(s1 string, s2 RoSpan<byte>) string { todo() }
    // TBD: Implicit conversion to and from RoSpan
}

pub struct ref ro Span<T>
{
    ro data ref T
    pub ro Length int
    pub this[index int] ref T => todo()
    pub func Slice(start int, length int) Span<T> { todo() }
    // TBD: implicit conversion to RoSpan
}

pub struct ref ro RoSpan<T>
{
    ro data ref T
    
    pub ro Length int
    pub this[index int] ro ref T => todo()
    pub func Slice(start int, length int) RoSpan<T> { todo() }
}

pub struct ref ro Memory<T>
{
    ro data object
    ro offset xint
    
    pub ro Length int
    pub this[index int] ref T => todo()
    pub func Slice(start int, length int) Memory<T> { todo() }
    // TBD: implicit conversion to RoSpan
}

pub struct ref ro RoMemory<T>
{
    ro data object
    ro offset xint
    
    pub ro Length int
    pub this[index int] ro ref T => todo()
    pub func Slice(start int, length int) RoMemory<T> { todo() }
}

// All variable sized objects must inherit from this class, must be sealed, and
// must call AllocateObject first thing in the constructor.  For efficiency,
// this class is unsafe and doesn't do any bounds checking.
// The inheriting class must be sealed (that's what sealed1 means)
pub unsafe sealed1 class VariableSizedObject<T>
{
    pub ro Length int

    // Must be called first thing from the constuctor, never called again
    protected unsafe static func AllocateObject(int length) { todo() }

    // Return a pointer to the Array
    // { return (T^)((^void)this + sizeof(this))}
    protected unsafe prop DataPointer ^T => todo()
}


// Array of constant size
pub sealed class Array<T> : VariableSizedObject<T>
{
    const MaxSize int = int.MaxInt/2
    pub static ro Empty Array<T>()

    new(length int) { todo }
    pub this[index int] ref T => todo()
    pub func Slice(start int, length int) Span<T> { todo }
    pub func RoSlice(start int, length int) RoSpan<T> { todo }
}

// Note that the List class has a ref return indexer, just like Array
pub class List<T>
{
    new(capacity int) { todo() }
    pub this[index int] ref T => todo()
}

pub class Map<TKey, TValue>
{
    new(capacity int) { todo() }
}

// The matrix class is used to implement square 2d arrays
pub sealed class Matrix2d<t> : VariableSizedObject<T>
{
    new(len1 int, len2 int) { todo() }	
    pub this[i1 int, i2 int] ref T => todo()
}

// Represents a buffer in un-managed memory.  This class can create and 
// own the memory, or it can be attached to an already existing buffer.
// The GC knows this class and deletes the memory when necessary.
pub sealed class UnmanagedMemory<T> : UnmanagedHande where T is IBlittableStruct
{
    pub ro Memory ^void
    pub ro Capacity int
    pub ro OwnedByGc bool
    length int
    
    pub prop Length int
    {
        get { todo() }
        set { todo() }
    }
        
    // Create the buffer, the GC owns it and deletes it when there are no more
    // references to this object.  Be careful that unmanaged code doesn't
    // hold a reference to the memory beyond the lifetime of this object
    new(length int) { todo }
    new(length int, capacity int) { todo }

    // Attach this object to a buffer allocated by unmanaged code.  
    // Lenght and Capacity are set automatically. Be sure that
    // unmanaged code doesn't delete the object while still in use.  
    unsafe new(data ^void, sizeOfBufferInBytes int) { todo() }

    pub func CopyTo() { todo() }
}


// This is the base for all objects, struct and class alike.
pub class object
{
    pub virtual func GetType() { todo }
    pub virtual func ToString() { todo }
}

// This is the base for all struct objects.
pub class StructObject
{
}

// This is the base for all class objects.  Its only field is
// the vtable pointer, so there is minimal overhead.  All class
// objects are allocated on the managed heap and are subject
// to garbage collection.
pub class ClassObject
{
    // The only member
    protected unsafe ro VT ^void

    pub override func GetType() { todo }
}

// Base class for all things that need to notify when they are garbage collected
pub class FinalizedNotify 
{
    protected func SetFinalizeNotifier(notifierQueue FinalizedNotifyQueue, token IntPtr, memoryPressure int) { todo() }
    protected func ClearFinalizeNotifier() { todo() }
}

pub class FinalizedNotifyQueue 
{
    pub prop Count int => todo()
    pub func Dequeue() IntPtr { todo() }
    pub afunc WaitQueueNotEmpty() { todo() }
}

pub static func MemCopy(dest ^void, source ^void, length xint)
{
	@to = (^byte)dest
	@from = (^byte)source
	
    if length <= 0
    {
        return
    }
    // Align `to` on int32
    while (xint)to & 3 != 0 && length != 0
    {
        ^to = ^from; to+=1; from+=1; length-=1
    }
    
    if (xint)from & 3 == 0
    {
        MemCopyAlign32(to, from, length)
        return
    }
    
    // Byte copy
    @end = to + length
    while (xint)end-(xint)to >= 4
    {
        ^to = ^from; to+=1; from+=1
        ^to = ^from; to+=1; from+=1
        ^to = ^from; to+=1; from+=1
        ^to = ^from; to+=1; from+=1
    } 
    while (xint)to != (xint)end
    {
        ^to = ^from; to+=1; from+=1
    }
}

pub static func MemCopyAlign32(dest ^void, source ^void, length xint)
{
	@to = (^byte)dest
	@from = (^byte)source

    if length <= 0
    {
        return
    }
    if ((xint)from | (xint)to) & 3 != 0
    {
    	throw MemoryAccessEception()
    }

    // Try 64 bit copy first
    @end = to + length
    if ((xint)to~(xint)from) & 4 == 0 && length >= 8
    {
        if (xint)to & 4 != 0
        {
            ^(^int32)to = ^(^int32)from; to+=4; from+=4
        }
        while end - to >= 8
        {
            ^(^int64)to = ^(^int64)from; to+=8; from+=8
        }
    }
    while (xint)end-(xint)to >= 4
    {
        ^(^int32)to = ^(^int32)from; to+=4; from+=4
    }
    while (xint)to != end
    {
        ^to = ^from; to+=1; from+=1
    }
}

 