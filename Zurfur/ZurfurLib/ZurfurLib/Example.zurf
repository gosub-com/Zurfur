use a.b.c
use system.gosub.p


// http://zurfur.com
namespace Zurfur.Example

/// Example class, a test of hover comments and `code` comments
pub class Example
{
    pub @field1 f32
    pub @field2 int    
    pub prop Prop str => Header + info      // Property
    pub fun A(this, a int, b int, c f32) f32 => a+1
    pub fun A(this, a f32) f32 => a+1
    pub fun B(this, a f32) f32 => a+1
    pub prop ChangedTime DateTime = DateTime.Now
        => default get private set
    
}
pub fun Example::MyExtension(this) => Func1(10) // Extension method


pub fun Example::Extension(this) 
{ 
    for @a in 1..23
    {
        F(out @b, c)
    }
}

// Test class
pub class Example2  // YES, errors working
{ 
    // Todo List:
    //    .. operator doesn't need parameters at beginning or end
    //    Support for :: operator (start::count)
    //    Editor should always use spaces (or tabs, just pick one and be done)
    //    Editor should comment out blocks with CTRL-'/'
    //    Implement switch (doesn't use break)
    //    Switch statement

    // Fields initialized to zero, null, or "" for string
    @f1 int          // Initialized to 0
    @f2 f32      // Initialized to 0.0
    @f3 str          // Initialized to "", not NULL
    
    // Fields initialized to null
    @f4 Array<int>
    @f5 Array<Array<int>> 
    @f7 Map<str,List<int>>
    @f8 Pointer<int>
    @f9 *int        // Same as Pointer<int>
    
    // Fields initialized via constructor
    @f10 int(FuncReturnsInt())
    @f11 Array<int>()            // Array, Count=0
    @f12 Array<int>(32)          // Array, Count=32
    @f13 Array<int>([1,2,3])     // Array initialized with 1, 2, 3
    @f13a List<int>(32)          // Empty List, Capacity=32
    @f14 Map<str,str>()          // Empty map
    
    // Fields initialized via assignment
    @f15 int = 32
    @f16 int = FuncReturnsInt() >> 4
    @f17 f32 = FuncReturnsf32orInt()
    @f18 str = "Hello"
    @f19 *int = GetIntPtr()      // Same as Pointer<int> = `GetIntPtr()`
    
    // Properties
    pub prop P1 int => 1
    pub prop P2 f32 =>  f1 + f2
    pub prop P3 int { get { return 3 } }
    pub prop P4 int = 3 => default get set // Initialized to 3
    pub prop P5 int(3) // Initializes p1 to 3
    {
        get { return p1 } 
        set { p1 = value }
    }
    
    pub operator[](this, index i) int => i
    
    // Function
    fun fun1(this, a int) f32 => f1 + f2 + a
    fun func1(this, a int) { }
    fun func2(this, a out str) bool {}
    fun func4(this, a ref MyStruct) {}
    fun func5(this, a Array<Array<int>>) {}
    fun func7(this, a List<int>) { }
    fun func8(this, a out List<List<int>>) { }
    fun func10(this, a Map<str,List<int>>) { }
    
    pub fun Sort<T>(greaterThan fun(a T, b T) bool) { }
    pub @MyFieldFunc fun(sender object, message str)


    pub fun M<A,B>(this, a A, b B, c List<int>) List<int> {}
    
    fun func8(this, a out List<List<int>>) { }
    fun func8(this, a out MyList<int,x,y,z>){ }
    
    pub fun Main(args Array<str>)
    {
        use @a = OpenFile("My File");
        defer file.close();
        
        // Function calls vs parameter lists
        @a1 = MyType<a,b,c>()
        @a2 = MyType(a,b,c)()
        @a3 = List<List<int>>()
        @a4 = List(List(int))()
        @a5 = M<str,int.x<T>.y>.Hello2<x.x>()
        @a6 = M(str,int.x(T).y).Hello2(x.x)()     
        @a7 = f(f<a>())(a+b)

        // Casts
        @a = #int(a+b+myFloat32)*23+4        // Prefix, operator
        @a = #List<Stuff>(yourStuff.SeeMyStuff).Add(Stuff())    // Prefix
        @b = *#*int(myVoidPointer)      // Prefix
        @c1 = #M<str,int.x<T>.y>.Hello2(A)
        @c2 = #M<str,int.x<T>.y>.Hello2<x.x>(A)
        @c3 = #List<int,y,z>(A)
        @a = #int(a+b+myFloat32)
        @a = #List<Stuff>(yourStuff.SeeMyStuff).Add(Stuff())
        @a = (#List<Stuff>(yourStuff.SeeMyStuff)).Add(Stuff())
        @b = *#*int(myVoidPointer)
        #List<Stuff>(yourStuff.SeeMyStuff)[23] = 4


        // Local variables declared in a function
        @myString = "Hello World"
        @myInt = 3
        @myList = List<int>([1,2,3])
        @myMap = Map<str,int>({"A":1,"B":2})
        @myOtherMap = MyMapReturningFunction()
       
        @myStr str = MyStrFunc()    // Error if MyStrFunc returns an int
        @myInt int = MyIntFunc()    // Error if MyIntFunc returns a f32
        @a str                      // `a` is a string, initialized to ""
        @b List<int>                // `b` is a List<int>, initialized to empty
    
        @myNullStr ?str         // String is null
        @myEmptyStr ?str()      // String is ""
        
        @myTranslation = tr"jeremy"

        // Static assigments
        M<str>.Hello = 6
        M<str,int.x<T>.y>.Hello2 = f(1, 2, "Jeremy")
        M<str,int>.Hello2 = f(1, 2, (x, y) -> x < y)
        
        @a = x>y
        if MyFieldFunc != null
            { MyFieldFunc(this, "hello") }

        @l1 = (a) -> { return 23 }
        @l2 = (a) -> 23
        list.Sort((a, b) -> a < b)
        list.Sort((a, b) -> { return a < b })

        // In operator
        if myStr in myMap || myIn in 1..23
        {
            DoSomething();
        }

        // Switch expressions
        @num = switch myConstant { 23 => a, 27 => b, default => 0}

        // Switch statement
        switch a
        {
        case 1:
            DoIt(1) // No break necessary         
        case 2: // Empty case is the only time it falls through
        case 3:
            DoIt2()
        default: doit3();
        }
                
    }
}


pub fun Example::IfTests() 
{ 
    // In operator
    if myStr in myMap || myIn in 1..23
    {
        DoSomething()
        break
        return
    }
    
    while f(x)
    {
        x = x + 1
    }
    
    if myStr in myMap || myIn in 1..23
    {
        DoSomething()
        hello()
    }
    
    if a
    {
        todo()
        todo()
    }
    else if b
    {
        todo()
    }
    else if c
    {
        todo()
    }
    
    if a
    {
        f(x)
    }
    

    if myStr in myMap || myIn in 1..23
    {
      DoSomething()
      hello()
    }
    else
    {
        f(a)
    }

    if myStr in myMap || myIn in 1..23
    {
        DoSomething()
        hello()
    }
    else 
    {
        f(a)
    }
        

    for @a in 1..23
    {
      F(out @b, c)
    }


    for @a in 1..23
    {
        F(out @b, c)
    }
}

pub struct MyPoint
{
    pub @X int
    pub @Y int
    pub override fun ToStr(this) => "(" + X + "," + Y + ")"
}


pub enum MyEnum
{
    @A          // A=0
    @B; @C      // B=1, C=2
    @D = 23     // D=23
    @E; @F; @G  // E=24, F=25, G=26
}


pub interface MyInterfaceTest
{
    fun A(this) int => imp
    protected fun C(this ) int => imp
        
    pub fun B(this) int => A() + 1
    pub struct Astruct { pub @a int }
    pub enum Aenum { @a; @b; @c}
    pub class Aclass { pub @a int  }
}

pub class MyClass1 
    implements MyInterfaceTest
{
    pub fun A() int => 3
    pub fun MyInterfaceTest::C(this) int => 3

}


pub fun Sort<T>(s MutSpan<T>, lessThan fun(a T, b T) bool)
{
    // Simple selection sort
    for @i in s.Count-1
    {
        @lowElem = s[i]
        @lowIndex = i
        for @j in i+1..s.Count
        {
            if lessThan(s[j], lowElem)
            {
                lowElem = s[j]
                lowIndex = j
            }
        }
        if lowIndex != i
        {
            s[lowIndex] = s[i]
            s[i] = lowElem
        }
    }
}

// The matrix class is used to implement square 2d arrays
pub class Matrix2d<t>
    extends VariableSizedObject<T>
{
    new(len1 int, len2 int) { todo() }
    pub operator[](i1 int, i2 int) ref T => todo()
}



pub fun MemCopy(dest *void, source *void, length xint)
{
    @to = #xint(dest)
    @from = #xint(source)
    
    if length <= 0
    {
        return
    }
    // Align `to` on i32
    while to & 3 != 0 && length != 0
    {
        *#*byte(to) = *#*byte(from); to+=1; from+=1; length-=1
    }
    
    if from & 3 == 0
    {
        MemCopy32(#*void(to), #*void(from), length)
        return
    }
    
    // Byte copy
    @end = to + length
    while end-to >= 4
    {
        *#*byte(to) = *#*byte(from); to+=1; from+=1
        *#*byte(to) = *#*byte(from); to+=1; from+=1
        *#*byte(to) = *#*byte(from); to+=1; from+=1
        *#*byte(to) = *#*byte(from); to+=1; from+=1
    } 
    while to != end
    {
        *#*byte(to) = *#*byte(from); to+=1; from+=1
    }
}

pub fun MemCopy32(dest *void, source *void, length xint)
{
    @to = #xint(dest)
    @from = #xint(source)

    if length <= 0
    {
        return
    }

    // Try 64 bit copy first
    @end = to + length
    if (to~from) & 4 == 0 && length >= 8
    {
        if to & 4 != 0
        {
            *#*i32(to) = *#*i32(from); to+=4; from+=4
        }
        while end - to >= 8  
        {
            *#*i64(to) = *#*i64(from); to+=8; from+=8
        }
    }
    while end-to >= 4
    {
        *#*i32(to) = *#*i32(from); to+=4; from+=4
    }
    while to != end
    {
        *#*byte(to) = *#*byte(from); to+=1; from+=1
    }
}

namespace ExampleNs1.HelloWorld
{
    fun F1() => todo
    
    class ClassEx1
    {
        @a int;
        @b int;
    }
}


namespace ExampleNs1
{
    fun F1() => todo
    
    namespace InnerEx1
    {

    }

    namespace InnerEx2
    {
    }

    class ClassEx1
    {
        @a int;
        @b int;
        class Inner1
        {
        }
    
        class Inner2
        {
        }
    }
    class ClassEx2
    {
        class Inner1
        {
        }
    
        class Inner2
        {
        }
    }
}

namespace ExampleNs2
{
    fun F1() => todo
    
    class ClassEx1
    {
        @a int;
        @b int;
        class Inner1
        {
        }
    
        class Inner2
        {
        }
    }
    class ClassEx2
    {
        class Inner1
        {
        }
    
        class Inner2
        {
        }
    }
}