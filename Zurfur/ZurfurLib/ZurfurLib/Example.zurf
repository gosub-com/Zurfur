using a.b.c;
using system.gosub.p;

namespace Zurfur.Example;


// Test class
pub class Example 
{ 
    // Field types, initialized to zero, null, or "" for string
    f1 int;
    f2 float32;
    f3 string;		// Defaults to "", not NULL
    f4 Array<int>;
    f5 []int;       // Same as Array<int>
    f6 [][]int;     // Same as Array<Array<int>>
    f7 Pointer<int>;
    f8 *int;        // Same as Pointer<int>
    f9 **int;		// Same as Pointer<Pointer<int>>
    f10 Map<string,List<int>>;	
    
    // Fields initialized to an expression (never null)
    // Must be an expression starting with a constructor or cast
    e1 int = int();
    e2 int = FuncThatReturnsInt >> 4;
    e3 float32 = FuncThatReturnsFloat32orInt();
    e4 string = "Hello";
    e5 Array<int> = new(32);        // Array, Length=32
    e7 List<int> = new(32);         // List, Length=0, Capacity=32
    e8 Map<string,string> = new(); 	// Empty map
    e10 *int = GetIntPtr();			// Same as Pointer<int> = `GetIntPtr()`
        
    // Illegal at parse time
    //i7 int(1); 		//  Must not be initialized
    //i8 = Array<int>;	// Type name is not an expression
    //i9 = Array<byte>[0]; // Type can't be dereferenced
    //i10 = int(List<in string>()); // Type argument can't have in/ref/out
    //func i11(a Map<in string,string>) { } // Type argument can't have in/ref/out	

    func func1(a int) {}
    func func2(a ref float32) {}
    func func3(a ref string) {}
    func func4(a Array) {}
    func func5(a [][]int) {} 
    func func5(a Array<Array<int>>) {}
    func func6(a ref **int) {}
    func func7(a List<int>) { }
    func func8(a ref List<List<int>>) { }
    func func10(a Map<string,List<int>>) { }

    pub static func Main(args Array<string>)
    {
    }
}

pub struct ro string
{
    ro str Array<byte>;

    construct() { str = Array<byte>.Empty }
    construct(s string) { todo() }
    construct(s Span<byte>) { todo() }
    pub func Slice(start int, length int) RoSpan<byte> { todo() }
    pub func Slice(start int) RoSpan<byte> { todo() }
    
    pub static operator+(s1 string, s2 string) string { todo() }   
    pub static operator+(s1 RoSpan<byte>, s2 string) string { todo() }
    pub static operator+(s1 string, s2 RoSpan<byte>) string { todo() }
    // TBD: Implicit conversion to and from RoSpan
}

pub struct ref ro Span<T>
{
    ro data ref T;
    pub ro Length int;
    pub get this[index int] ref T { todo(); }
    pub func Slice(start int, length int) Span<T> { todo(); }
    // TBD: implicit conversion to RoSpan
}

pub struct ref ro RoSpan<T>
{
    ro data ref T;
    
    pub ro Length int;
    pub get this[index int] ro ref T { todo(); }
    pub func Slice(start int, length int) RoSpan<T> { todo(); }
}

pub struct ref ro Memory<T>
{
    ro data object;
    ro offset xint;
    
    pub ro Length int;
    pub get this[index int] ref T { todo(); }
    pub func Slice(start int, length int) Memory<T> { todo(); }
    // TBD: implicit conversion to RoSpan
}

pub struct ref ro RoMemory<T>
{
    ro data object;
    ro offset xint;
    
    pub ro Length int;
    pub get this[index int] ro ref T { todo(); }
    pub func Slice(start int, length int) RoMemory<T> { todo(); }
}

// All variable sized objects must inherit from this class, must be sealed, and
// must call AllocateObject first thing in the constructor.  For efficiency,
// this class is unsafe and doesn't do any bounds checking.
// The inheriting class must be sealed (that's what sealed1 means)
pub unsafe sealed1 class VariableSizedObject<T>
{
    pub ro Length int;

    // Must be called first thing from the constuctor, never called again
    protected unsafe static func AllocateObject(int length) { todo() }

    // Return a pointer to the Array
    // { return (T*)((*void)this + sizeof(this))}
    protected unsafe get DataPointer *T {todo()}
}


// Array of constant size
pub sealed class Array<T> extends VariableSizedObject<T>
{
    const MaxSize int = int.MaxInt/2;
    pub static ro Empty Array<T> = new();

    construct(length int) { todo }
    pub get this[index int] ref T { todo }
    pub func Slice(start int, length int) Span<T> { todo }
    pub func RoSlice(start int, length int) RoSpan<T> { todo }
}

// Note that the List class has a ref return indexer, just like Array
pub class List<T>
{
    construct(capacity int) { todo() }
    pub get this[index int] ref T { todo() }
}

pub class Map<TKey, TValue>
{
    construct(capacity int) { todo() }
}

// The matrix class is used to implement square 2d arrays
pub sealed class Matrix2d<t> extends VariableSizedObject<T>
{
    construct(len1 int, len2 int) { todo() }	
    pub get this[i1 int, i2 int] ref T { todo() }
}

// Represents a buffer in un-managed memory.  This class can create and 
// own the memory, or it can be attached to an already existing buffer.
// The GC knows this class and deletes the memory when necessary.
pub sealed class UnmanagedMemory<T> extends UnmanagedHande where T is IBlittableStruct
{
    pub ro Memory *void;
    pub ro Capacity int;
    pub ro OwnedByGc bool;
    length int;
    
    pub get Length int { todo() }
    pub set Length int { todo() }
    
    // Create the buffer, the GC owns it and deletes it when there are no more
    // references to this object.  Be careful that unmanaged code doesn't
    // hold a reference to the memory beyond the lifetime of this object
    construct(length int) { todo }
    construct(length int, capacity int) { todo }

    // Attach this object to a buffer allocated by unmanaged code.  
    // Lenght and Capacity are set automatically. Be sure that
    // unmanaged code doesn't delete the object while still in use.  
    unsafe construct(data *void, sizeOfBufferInBytes int) { todo() }

    pub func CopyTo() { todo() }
}


// This is the base for all objects, struct and class alike.
pub class object
{
    pub virtual func GetType() { todo }
    pub virtual func ToString() { todo }
}

// This is the base for all struct objects.
pub class StructObject
{
}

// This is the base for all class objects.  Its only field is
// the vtable pointer, so there is minimal overhead.  All class
// objects are allocated on the managed heap and are subject
// to garbage collection.
pub class ClassObject
{
    // The only member
    protected unsafe ro VT *void;

    pub override func GetType() { todo }
}

// Base class for all things that need to notify when they are garbage collected
pub class FinalizedNotify 
{
    protected func SetFinalizeNotifier(notifierQueue FinalizedNotifyQueue, token IntPtr, memoryPressure int) { todo() }
    protected func ClearFinalizeNotifier() { todo() }
}

pub class FinalizedNotifyQueue 
{
    pub get Count int { todo() }
    pub func Dequeue() IntPtr { todo() }
    pub async func WaitQueueNotEmpty() { todo() }
}

pub static func MemCopy(to *void, from *void, length xint)
{
    if length <= 0
    {
        return;
    }

    // Align `to` on int32
    while to & 3 != 0 && length != 0
    {
        *(*byte)to = *(*byte)from; to+=1; from+=1; length-=1;
    }
    
    if (to|from) & 3 == 0
    {
        MemCopyAlign32(to, from, length);
        return;
    }
    
    // Byte copy
    #end = to + length;
    while end-to >= 4
    {
        *(*byte)to = *(*byte)from; to+=1; from+=1;
        *(*byte)to = *(*byte)from; to+=1; from+=1;
        *(*byte)to = *(*byte)from; to+=1; from+=1;
        *(*byte)to = *(*byte)from; to+=1; from+=1;
    } 
    while to != end
    {
        *(*byte)to = *(*byte)from; to+=1; from+=1;
    }
}

pub static func MemCopyAlign32(to *void, from *void, length xint)
{
    if length <= 0
    {
        return
    }
    if (to|from) & 3 != 0
    {
        throw MisalignedMemoryAccessException();
    }

    // Try 64 bit copy first
    #end = to + length;
    if (to^from) & 7 == 0 && length >= 8
    {
        if to & 7 != 0
        {
            *(*int32)to = *(*int32)from; to+=4; from+=4;
        }
        while end - to >= 32
        {
            *(*int64)to = *(*int64)from; to+=8; from+=8;
            *(*int64)to = *(*int64)from; to+=8; from+=8;
            *(*int64)to = *(*int64)from; to+=8; from+=8;
            *(*int64)to = *(*int64)from; to+=8; from+=8;
        }
        while end - to >= 8
        {
            *(*int64)to = *(*int64)from; to+=8; from+=8;
        }
    }
    while end-to >= 16
    {
        *(*int32)to = *(*int32)from; to+=4; from+=4;
        *(*int32)to = *(*int32)from; to+=4; from+=4;
        *(*int32)to = *(*int32)from; to+=4; from+=4;
        *(*int32)to = *(*int32)from; to+=4; from+=4;
    }
    while end-to >= 4
    {
        *(*int32)to = *(*int32)from; to+=4; from+=4;
    }
    while to != end
    {
        *(*byte)to = *(*byte)from; to+=1; from+=1;
    }
}

 