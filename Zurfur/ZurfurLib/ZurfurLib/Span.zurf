

module Zurfur

use Zurfur.Operators[OpEq]

// []T is converted to Span<T>
[pub]
type Span<T> ref copy
    data ro mut ref T
    length ro int


[pub]
type SpanIterator<T> ref copy
    data ro mut ref T
    length ro int
    count ro int
    
[pub]
fun Span<T>.opIndex(i int) mut ref T
    require i in 0..my.length
    extern // Implementation TBD

[pub]
fun Span<T>.opIndex(range Range<int>) mut Span<T>
    require range.start in 0..my.length
    require range.end in 0..my.length
    require range.start <= range.end
    extern // Implementation TBD

[pub]
fun mut Span<T>.sort(compare fun(a T, b T)bool)
    extern

// Set the span to `item` (or default if not specified)
[pub]
fun mut Span<T>.clear(item T = default)
    extern
    
// Find index of the sequence `seq`.
// Returns -1 if not found, or 0 if `seq` is empty.
[pub]
fun Span<T>.find(seq Span<T>) int
        where T has OpEq<T>
    extern

// Find the index of the `item`.  Returns -1 if not found.
[pub]
fun Span<T>.find(item T) int
        where T has OpEq<T>
    extern
    
// Find the index of the `item` when `eq` returns true.
// Returns -1 if not found.
[pub]
fun Span<T>.find(eq fun(item T) bool) int
    extern

        